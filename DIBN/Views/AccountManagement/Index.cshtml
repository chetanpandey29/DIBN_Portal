@model DIBN.Models.AccountManagementModel
@{
    ViewData["Title"] = "Index";
}
<style>
    .datepicker{ z-index:99999 !important; }

    .ui-autocomplete {
        max-height: 200px;
        max-width: 300px;
        overflow-y: auto;
        overflow-x: hidden;
    }

    .select2-selection--single {
        height: 100% !important;
    }

    .select2-selection__rendered {
        word-wrap: break-word !important;
        width: 150px !important;
        text-overflow: inherit !important;
        white-space: normal !important;
    }

    .select2-results__option[aria-selected] {
        border-bottom: 1px dotted #000;
    }
</style>
<div id="loader">
    <div class="spinner-1">
        <div class="center-div-1">
            <div class="loader-circle-75">
            </div>
        </div>
    </div>
</div>
<div class="row Details">
    <div class="col-lg-12">
        <a class="btn btn-theme mb-3 float-end" href="@Url.Action("GetHistory","AccountManagement")">History</a>
    </div>
</div>
<div class="row" id="Insert"> 
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="col-12 float-start">
                    <h4 class="card-title text-center">Account Management</h4>
                    <hr style="height:1px;" class="text-theme"/>
                    <div class="table-rep-plugin">
                        <div class="table-responsive mb-0" data-pattern="priority-columns">
                            <table id="tblAddExpenses" class="table table-bordered table-striped" style="border-collapse: collapse; border-spacing: 0; width: 100%;">
                                <thead>
                                    <tr>
                                        <th>
                                            Company
                                        </th>
                                        <th>
                                            Date
                                        </th>
                                        <th>
                                            Description
                                        </th>
                                        <th>
                                            Type
                                        </th>
                                        <th>
                                            Amount
                                        </th>
                                        <th>
                                            Quantity
                                        </th>
                                        <th>
                                            Total Amount
                                        </th>
                                        <th>
                                            Vat 
                                        </th>
                                        <th>
                                            Vat Amount
                                        </th>
                                        <th>
                                            Grand Total
                                        </th>
                                        <th>

                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                                <tfoot id="tableFooter">
                                    <tr>
                                        <td>
                                            @Html.DropDownListFor(w => w.CompanyId, Model.Companies, new { @class = "form-control form-select single-line",@id="Companies" })
                                        </td>
                                        <td><input type="text" id="txtDate" class="form-control" required readonly/></td>
                                        <td><textarea rows="3" cols="30" id="txtTask" class="form-control" required></textarea></td>
                                        <td>
                                            <select class="form-control form-select single-line" id="txtType" onchange="CheckType(this)">
                                                <option value="-1"> Select Type </option>
                                                <option value="Credit"> Credit </option>
                                                <option value="Debit"> Debit </option>
                                            </select>
                                        </td>
                                        <td><input type="text" id="txtAmount" class="form-control" onkeyup="ValidAlphabet(this)" onkeypress="ValidTextLength(this)" maxlength="10" required /></td>
                                        <td>
                                            <div style="width: 110px;" class="product-cart-touchspin">
                                                <input data-toggle="touchspin" type="text" value="01" id="txtQuantity" required readonly/>
                                            </div>
                                        </td>
                                        <td><input type="text" id="txtTotalAmount" class="form-control" value="0" required readonly/></td>
                                        <td><input type="text" id="txtVat" step=".01" class="form-control" onkeyup="ValidAlphabet(this)" onkeypress="ValidTextLength(this)" maxlength="4" value="0" required /></td>
                                        <td><input type="text" id="txtVatAmount" class="form-control" value="0" required readonly/></td>
                                        <td><input type="text" id="txtGrandAmount" class="form-control" value="0" required readonly/></td>
                                        <td><input type="button" id="btnAdd" class="btn btn-theme" value="Add" /></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        <input type="button" id="btnSave" class="btn btn-theme" value="Save all" />
                        <span id="btnPaymentDetailsMessage" class="text-danger">Please Wait While We Are Saving Portal Balance Details.</span>
                        <input type="hidden" id="Module" value="@Model.Module" name="Module" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<!-- Required datatable js -->
<script src="~/assets/libs/datatables.net/js/jquery.dataTables.min.js"></script>
<script src="~/assets/libs/datatables.net-bs4/js/dataTables.bootstrap4.min.js"></script>

<!-- Responsive examples -->
<script src="~/assets/libs/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
<script src="~/assets/libs/datatables.net-responsive-bs4/js/responsive.bootstrap4.min.js"></script>

<!-- Bootrstrap touchspin -->
<link href="~/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css" rel="stylesheet" />
<script src="~/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js"></script>

<!-- Sweet Alerts-->
<script src="~/assets/libs/sweetalert2/sweetalert2.all.min.js"></script>
<link href="~/assets/libs/sweetalert2/sweetalert2.min.css" />

<!-- Select 2-->
<link href="~/select2/select2.min.css" rel="stylesheet" />
<script src="~/select2/select2.min.js"></script>

<script src="~/bootstrap.min.js"></script>
<script>
    $(function () {
        $("#Insert").hide();
        $(".View").hide();
        $("#View1").hide();
        $(".Update").hide();
        $(".Delete").hide();
        $(".Details").hide();
    });
</script>
<script>
    $(function () {
        var module = $("#Module").val();
        $("#loader").show();
        $.ajax({
            url: "@Url.Action("GetRolePermissionsName", "UserPermission")",
            method: "GET",
            data: { "Module": "AccountManagement" },
            async: false,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (RoleResponse) {

                $.ajax({
                    url: "@Url.Action("GetUserPermissionsName", "UserPermission")",
                    method: "GET",
                    data: { "Module": "AccountManagement" },
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (UserResponse) {

                        if (UserResponse.length > 0) {
                            for (let i = 0; i < UserResponse.length; i++) {
                                if (UserResponse[i] == "PermissionCount") {
                                    alert("You don't have any permission for this module.");
                                    var url = "@Url.Action("Index","Home")";
                                    url = url + "?name=HomePage";
                                    window.location.href = url;
                                } else {
                                    $("#" + UserResponse[i]).show();
                                    if (UserResponse[i] == "View") {
                                        $(".Details").show();
                                        $("#View1").show();
                                    }
                                    if (UserResponse[i] == "Update") {
                                        $("." + UserResponse[i]).show();
                                    }
                                    if (UserResponse[i] == "Delete") {
                                        $("." + UserResponse[i]).show();
                                    }
                                }

                            }
                            $("#loader").hide();
                        } else if (RoleResponse.length > 0) {
                            for (let i = 0; i < RoleResponse.length; i++) {
                                if (RoleResponse[i] == "PermissionCount") {
                                    alert("You don't have any permission for this module.");
                                    var url = "@Url.Action("Index","Home")";
                                    url = url + "?name=HomePage";
                                    window.location.href = url;
                                }
                                else {
                                    $("#" + RoleResponse[i]).show();
                                    if (RoleResponse[i] == "View") {
                                        $(".Details").show();
                                        $("#View1").show();
                                    }
                                    if (RoleResponse[i] == "Update") {
                                        $("." + RoleResponse[i]).show();
                                    }
                                    if (RoleResponse[i] == "Delete") {
                                        $("." + RoleResponse[i]).show();
                                    }
                                }

                            }
                            $("#loader").hide();

                        } else {
                            alert("You don't have any permission for this module.");
                            $("#loader").hide();
                        }
                    }
                })
            }
        });
    });
</script>
<script>
    function ValidAlphabet(data) {
        var code = (event.which) ? event.which : event.keyCode;  
        if (!(code>= 48 && code <=57) || !(code >=96 && code <=105) || code == 54 || code == 189 || code == 219 || code==57) {
            if (code != 32 && code != 190) {
                var digits = $(data).val();
                var lastValue = digits.substring(digits.length - 1);
                digits = digits.replace(/[^(\.\s)[^0-9-]/g, '');
                if (lastValue == "^" || lastValue == "-" || lastValue == "(" || lastValue == ")" || lastValue == "[") {
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(0, lastIndex);
                    digits = currentText;
                    digits = digits.replace(lastValue, '');
                }
                else if (digits.includes("-") || digits.includes("^") || digits.includes("(")|| digits.includes(")")|| digits.includes("[")) {
                    if (digits.includes("-")) {
                        var lastIndex = digits.lastIndexOf("-");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes("^")) {
                        var lastIndex = digits.lastIndexOf("^");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes("(")) {
                        var lastIndex = digits.lastIndexOf("(");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes(")")) {
                        var lastIndex = digits.lastIndexOf(")");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes("[")) {
                        var lastIndex = digits.lastIndexOf("[");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                }
                else if (digits.replace(/[^.]/g, "").length > 1) {
                    lastValue = digits.substring(digits.length - 1);
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(lastIndex, digits.length);
                    if (currentText.replace(/[^.]/g, "").length > 1) {
                        var currentDigits1 = digits.slice(0, lastIndex+1);
                        digits = currentDigits1;
                    }
                    else {
                        var currentDigits = digits.slice(0,lastIndex);
                        digits = currentDigits;
                    }

                }
                $(data).val(digits);
            }
            else if (digits.replace(/[^.]/g, "").length > 1) {
                lastValue = digits.substring(digits.length - 1);
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(lastIndex, digits.length);
                    if (currentText.replace(/[^.]/g, "").length > 1) {
                        var currentDigits1 = digits.slice(0, lastIndex+1);
                        digits = currentDigits1;
                    }
                    else {
                        var currentDigits = digits.slice(0,lastIndex);
                        digits = currentDigits;
                    }

                $(data).val(digits);
            }
        }
    } 
     function ValidTextLength(data) {
        
        var digits = $(data).val();
         var currentDigits = digits.split(".");
        if (digits.includes(".") == true) {
            if (currentDigits[1].length >= 2) {
                event.preventDefault();
            }
        }
    }
</script>
<script>
    ////// Open Selection dropdown on focus                                     -- Yashasvi TBC (09-02-2023)
    $(document).on('focus', '.select2.select2-container', function (e) {
        if (e.originalEvent && $(this).find(".select2-selection--single").length > 0) {
            $(this).siblings('select').select2('open');
        }
    });
    $("#txtQuantity").TouchSpin({
        min: 1,
        max: 20,
        boostat: 5,
        maxboostedstep: 10
    });
    $(function(){
        $("#Companies").select2();
    });
    $(document).ready(function () {
        $("#loader").hide();
    });
    $(function () {
        var today = new Date();
        $("#txtDate").datepicker({
            format: 'yyyy-mm-dd',
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
            language: "tr",
            endDate: "today",
            maxDate: today
        }).on('changeDate', function (ev) {
            $(this).datepicker('hide');
        });
    });

    $(document).ready(function() {
        $("#btnPaymentDetailsMessage").hide();
    });
</script>
<script>
    $("#txtAmount").on("keyup",function(){
        $("#txtTotalAmount").val(0);
        var amount = $("#txtAmount").val();
        var quantity = $("#txtQuantity").val();
        var totalAmount = 0,grandTotal=0,vatPercentage=0;
        totalAmount = $("#txtTotalAmount").val();
        grandTotal =  $("#txtGrandAmount").val();
        vatPercentage = $("#txtVat").val();
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        if(parseInt(vatPercentage)!=0){
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if(isNaN(vatAmount)){
                vatAmount = 0;
            }
            $("#txtVatAmount").val(parseFloat(vatAmount).toFixed(2));
        }
        else{
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        if(isNaN(grandTotal)){
            grandTotal = 0;
        }
        $("#txtTotalAmount").val(parseInt(totalAmount).toFixed(2));
        $("#txtGrandAmount").val(parseFloat(grandTotal).toFixed(2));
    });
    $("#txtQuantity").on("change",function(){
        $("#txtTotalAmount").val(0);
        var amount = $("#txtAmount").val();
        var quantity = $("#txtQuantity").val();
        var totalAmount = 0,grandTotal=0,vatPercentage=0;
        totalAmount = $("#txtTotalAmount").val();
        grandTotal =  $("#txtGrandAmount").val();
        vatPercentage = $("#txtVat").val();
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        if(parseInt(vatPercentage)!=0){
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if(isNaN(vatAmount)){
                vatAmount = 0;
            }
            $("#txtVatAmount").val(parseFloat(vatAmount).toFixed(2));
        }
        else{
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        if(isNaN(grandTotal)){
            grandTotal = 0;
        }
        $("#txtTotalAmount").val(parseInt(totalAmount).toFixed(2));
        $("#txtGrandAmount").val(parseFloat(grandTotal).toFixed(2));
    });
    $("#txtVat").on("keyup",function(){
        var totalAmount = $("#txtTotalAmount").val();
        var amount = $("#txtAmount").val();
        var vatPercentage = $("#txtVat").val();
        var vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercentage))/100;
        if(isNaN(vatAmount)){
            vatAmount = 0;
        }
        var totalAmount = $("#txtTotalAmount").val();
        var grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        if(isNaN(grandTotal)){
            grandTotal = 0;
        }
        $("#txtVatAmount").val(parseFloat(vatAmount).toFixed(2));
        $("#txtGrandAmount").val(parseFloat(grandTotal).toFixed(2));
    });

    $("#txtAmount").on("focus", function () {
        $("#txtTotalAmount").val(0);
        var amount = $("#txtAmount").val();
        var quantity = $("#txtQuantity").val();
        var totalAmount = 0, grandTotal = 0, vatPercentage = 0;
        totalAmount = $("#txtTotalAmount").val();
        grandTotal = $("#txtGrandAmount").val();
        vatPercentage = $("#txtVat").val();
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $("#txtVatAmount").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $("#txtTotalAmount").val(parseInt(totalAmount).toFixed(2));
        $("#txtGrandAmount").val(parseFloat(grandTotal).toFixed(2));
    });
    $("#txtQuantity").on("focus", function () {
        $("#txtTotalAmount").val(0);
        var amount = $("#txtAmount").val();
        var quantity = $("#txtQuantity").val();
        var totalAmount = 0, grandTotal = 0, vatPercentage = 0;
        totalAmount = $("#txtTotalAmount").val();
        grandTotal = $("#txtGrandAmount").val();
        vatPercentage = $("#txtVat").val();
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $("#txtVatAmount").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $("#txtTotalAmount").val(parseInt(totalAmount).toFixed(2));
        $("#txtGrandAmount").val(parseFloat(grandTotal).toFixed(2));
    });
    $("#txtVat").on("focus", function () {
        var totalAmount = $("#txtTotalAmount").val();
        var amount = $("#txtAmount").val();
        var vatPercentage = $("#txtVat").val();
        var vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercentage)) / 100;
        if (isNaN(vatAmount)) {
            vatAmount = 0;
        }
        var totalAmount = $("#txtTotalAmount").val();
        var grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $("#txtVatAmount").val(parseFloat(vatAmount).toFixed(2));
        $("#txtGrandAmount").val(parseFloat(grandTotal).toFixed(2));
    });
</script>
<script>

    var UploadedReceiptFile = new Array();
    $("body").on("click","#btnAdd",function(){
        $("#loader").show();
        var amount = $("#txtAmount").val();
        var quantity = $("#txtQuantity").val();
        var totalAmount = parseInt(amount) * parseInt(quantity);
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        $("#txtTotalAmount").val(totalAmount);
        var vatPercetange = $("#txtVat").val();
        var vatAmount = $("#txtVatAmount").val();
        vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercetange)) / 100;
        $("#txtVatAmount").val(vatAmount);
        var grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
        $("#txtGrandAmount").val(grandTotal);
        
        var Task = $("#txtTask").val();
        var Amount = $("#txtAmount").val();
        var Quantity = $("#txtQuantity").val();
        var TotalAmount = $("#txtTotalAmount").val();
        var CompanyId = $("#Companies").val();
        var Type = $("#txtType").val();
        var date = $("#txtDate").val();
        var Vat = $("#txtVat").val();
        var VatAmount = $("#txtVatAmount").val();
        var GrandAmount = $("#txtGrandAmount").val();
        var name = $("#Module").val();
        if(Amount==""||Amount=="0"||Amount=="0.0" || Quantity == ""|| TotalAmount=="" || Task == "" || CompanyId=="0"||Type=="-1" || !/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)){
             if(CompanyId=="0"){
                $("#loader").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Select Company for which you are adding Expense.",
                    'error'
                )
            }
            else if(Task==""){
                $("#loader").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Name for which you are adding Expense.",
                    'error'
                )
            }else if(Amount==""||Amount=="0"||Amount=="0.0"){
                $("#loader").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Amount of Expense.",
                    'error'
                )
            }else if(Quantity==""){
                $("#loader").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Quantity.",
                    'error'
                )
            }
            else if(TotalAmount == ""){
                $("#loader").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Total Amount of This Expense",
                    'error'
                )
            }
            else if(Type == "-1"){
                $("#loader").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Select Expense Type(Credit/Debit).",
                    'error'
                )
            }
            else if(!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)){
                $("#loader").hide();
                alert("Please Enter Valid Date Format for Date.");
                var today = new Date();
                var dd = String(today.getDate()).padStart(2, '0');
                var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
                var yyyy = today.getFullYear();

                today = yyyy + '-' + mm + '-' + dd;
                $('#txtDate').datepicker('setDate', today);
                $("#txtDate").focus();
            }

        }
        else if (isNaN(parseFloat(Amount)) || isNaN(parseFloat(Vat)) ) {
            if (isNaN(parseFloat(Amount))) {
                $("#loader").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Valid Amount.",
                    'error'
                ).then((result) => {
                    $("#txtAmount").val(0);
                });
            }
            else if (isNaN(parseFloat(Vat))) {
                $("#loader").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Valid  Vat.",
                    'error'
                ).then((result) => {
                    $("#txtVat").val(0);
                });
            }
        }
        else{  
            $("#loader").show();
            
            if (UploadedReceiptFile.length < 20) {
                UploadedReceiptFile.push(
                    {
                        "Task": Task,
                        "Amount": parseFloat(Amount).toFixed(2).toString(),
                        "Quantity": Quantity,
                        "TotalAmount": TotalAmount,
                        "CompanyId": CompanyId,
                        "Vat": parseFloat(Vat).toFixed(2).toString(),
                        "VatAmount": VatAmount,
                        "Date": date,
                        "Type": Type,
                        "PaymentMode": "Cash",
                        "GrandTotal": GrandAmount
                    }
                );

                var txtTask = $("#txtTask");
                var txtAmount = $("#txtAmount");
                var txtQuantity = $("#txtQuantity");
                var txtTotalAmount = $("#txtTotalAmount");
                var txtFormFile = $("#txtFormFile");
                var Companies = $("#Companies");
                var txtType = $("#txtType");
                var txtDate = $("#txtDate");
                var txtVat = $("#txtVat");
                var txtVatAmount = $("#txtVatAmount");

                var txtGrandAmount = $("#txtGrandAmount");

                var tbody = $("#tblAddExpenses > TBODY")[0];

                var row = tbody.insertRow(-1);

                var cell = $(row.insertCell(-1));
                cell.html($("#Companies :selected").text());

                var cell = $(row.insertCell(-1));
                cell.html(txtDate.val());

                var cell = $(row.insertCell(-1));
                cell.html(txtTask.val());

                var cell = $(row.insertCell(-1));
                cell.html($("#txtType :selected").text());

                cell = $(row.insertCell(-1));
                cell.html(parseFloat(txtAmount.val()).toFixed(2));

                cell = $(row.insertCell(-1));
                cell.html(txtQuantity.val());

                cell = $(row.insertCell(-1));
                cell.html(txtTotalAmount.val());

                cell = $(row.insertCell(-1));
                cell.html(parseFloat(txtVat.val()).toFixed(2));

                cell = $(row.insertCell(-1));
                cell.html(txtVatAmount.val());

                cell = $(row.insertCell(-1));
                cell.html(txtGrandAmount.val());

                cell = $(row.insertCell(-1));
                var btnRemove = $("<input />");
                btnRemove.attr("type", "button");
                btnRemove.attr("class", "btn btn-theme");
                btnRemove.attr("onclick", "Remove(this);");
                btnRemove.val("Remove");
                cell.append(btnRemove);

                txtTask.val("");
                txtAmount.val("");
                txtQuantity.val("1");
                txtTotalAmount.val("");
                txtVat.val("0");
                txtVatAmount.val("0");
                txtDate.val("");
                $("#txtDate").datepicker('setDate', null);
                txtTotalAmount.val("");
                txtGrandAmount.val("0");
                $("#Companies").select2('val', '0');
                if (parseInt(UploadedReceiptFile.length) < 20) {
                    $("#Companies").focus();
                    $("#Companies").select2('open');
                }
                $("#txtType").val("-1");
                $("#txtVat").removeAttr("readonly");
                if (parseInt(UploadedReceiptFile.length) == 20) {
                    const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                            confirmButton: 'ms-3 btn btn-success',
                            cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
                    })
                    swalWithBootstrapButtons.fire({
                        title: 'Maximum limit is about to exceeds , Do you want to Save all entries?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes!',
                        cancelButtonText: 'No, cancel!',
                        reverseButtons: true,
                        showConfirmButton: true,
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $("#loader").show();
                            if (parseInt(UploadedReceiptFile.length) > 0) {
                                $('#btnSave').hide();
                                $("#btnPaymentDetailsMessage").show();
                                var data = JSON.stringify(UploadedReceiptFile);
                                $.ajax({
                                    contentType: 'application/json; charset=utf-8',
                                    dataType: 'json',
                                    type: 'POST',
                                    url: "@Url.Action("AddCompanyExpenses", "AccountManagement")",
                                    data: data,
                                    success: function (result) {
                                        $("#loader").hide();
                                        const swalWithBootstrapButtons = Swal.mixin({
                                            customClass: {
                                                confirmButton: 'ms-3 btn btn-success',
                                                cancelButton: 'btn btn-danger'
                                            },
                                            buttonsStyling: false
                                        })
                                        swalWithBootstrapButtons.fire({
                                            title: 'Success.',
                                            text: "Company Expense(s) Added Successfully.!!",
                                            icon: 'success'
                                        }).then((result) => {
                                            $('#btnSave').show();
                                            window.location.reload();
                                        });
                                    }
                                })
                            }
                        }
                        else {
                            $("#loader").hide();
                            $('tfoot#tableFooter > tr').hide();
                            $('#btnSave').before("<p class='text-danger fw-bold fs-6 pt-1 pb-1 text-center'>* Maximum limit exceeded , please click on save all button. *</p>");
                        }
                    });
                    
                }
                $("#loader").hide();
            }
            else {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })

                swalWithBootstrapButtons.fire({
                    title: 'Error.',
                    text: "Please first save all this entries before adding other entries.",
                    icon: 'error'
                }).then((result) => {
                    var txtTask = $("#txtTask");
                    var txtAmount = $("#txtAmount");
                    var txtQuantity = $("#txtQuantity");
                    var txtTotalAmount = $("#txtTotalAmount");
                    var txtFormFile = $("#txtFormFile");
                    var Companies = $("#Companies");
                    var txtType = $("#txtType");
                    var txtDate = $("#txtDate");
                    var txtVat = $("#txtVat");
                    var txtVatAmount = $("#txtVatAmount");

                    var txtGrandAmount = $("#txtGrandAmount");

                    txtTask.val("");
                    txtAmount.val("");
                    txtQuantity.val("1");
                    txtTotalAmount.val("");
                    txtVat.val("0");
                    txtVatAmount.val("0");
                    txtDate.val("");
                    $("#txtDate").datepicker('setDate', null);
                    txtTotalAmount.val("");
                    txtGrandAmount.val("0");
                    $("#Companies").select2('val', '0');
                    $("#Companies").focus();
                    $("#Companies").select2('open');
                    $("#txtType").val("-1");
                    $("#txtVat").removeAttr("readonly");

                    $("#tblAddExpenses TBODY").focus();
                });
            }
        }
        $("#loader").hide();
    });


    $("body").on("click","#btnSave",function(){
        $("#loader").show();
        if (parseInt(UploadedReceiptFile.length) > 0) {
            if ($("#Companies").val() != "0" || $("#txtTask").val() != "" || $("#txtDate").val() != ""
                || ($("#txtAmount").val() != "" && $("#txtAmount").val() != "0" && $("#txtAmount").val() != "0.0")
                || ($("#txtTotalAmount").val() != "" && $("#txtTotalAmount").val() != "0" && $("#txtTotalAmount").val() != "0.0")
                || ($("#txtGrandAmount").val() != "" && $("#txtGrandAmount").val() != "0" && $("#txtGrandAmount").val() != "0.0")
                || ($("#txtVatAmount").val() != "" && ($("#txtVat").val() != "" && $("#txtVat").val() != "0" && $("#txtVat").val() != "0.0"))
            ) {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })

                swalWithBootstrapButtons.fire({
                    title: 'One entry is Left. Do you want to Continue ?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes!',
                    cancelButtonText: 'No, cancel!',
                    reverseButtons: true,
                    showConfirmButton: true,
                }).then((result) => {
                    if (result.isConfirmed) {
                        $("#loader").show();
                        if (parseInt(UploadedReceiptFile.length) > 0) {
                            $('#btnSave').hide();
                            $("#btnPaymentDetailsMessage").show();
                            var data = JSON.stringify(UploadedReceiptFile);
                            $.ajax({
                                contentType: 'application/json; charset=utf-8',
                                dataType: 'json',
                                type: 'POST',
                                url: "@Url.Action("AddCompanyExpenses","AccountManagement")",
                                data: data,
                                success: function(result) {
                                    $("#loader").hide();
                                    const swalWithBootstrapButtons = Swal.mixin({
                                        customClass: {
                                            confirmButton: 'ms-3 btn btn-success',
                                            cancelButton: 'btn btn-danger'
                                        },
                                        buttonsStyling: false
                                    })
                                    swalWithBootstrapButtons.fire({
                                        title: 'Success.',
                                        text: "Company Expense(s) Added Successfully.!!",
                                        icon: 'success'
                                    }).then((result) => {
                                        $('#btnSave').show();
                                        window.location.reload();
                                    });
                                }
                            })
                        }
                        else {
                            $("#loader").hide();
                            const swalWithBootstrapButtons = Swal.mixin({
                                customClass: {
                                    confirmButton: 'ms-3 btn btn-success',
                                    cancelButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            })
                            swalWithBootstrapButtons.fire({
                                title: 'Error.',
                                text: "Please Add Expenses/Credits for Company(s)",
                                icon: 'error'
                            }).then((result) => {
                                $("#tblAddExpenses TBODY").focus();
                            });
                        }
                    }
                });
            }
            else{
                $("#loader").show();
                $('#btnSave').hide();
                $("#btnPaymentDetailsMessage").show();
                var data = JSON.stringify(UploadedReceiptFile);
                $.ajax({
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    type: 'POST',
                    url: "@Url.Action("AddCompanyExpenses","AccountManagement")",
                    data: data,
                    success: function(result) {
                        $("#loader").hide();
                        const swalWithBootstrapButtons = Swal.mixin({
                            customClass: {
                                confirmButton: 'ms-3 btn btn-success',
                                cancelButton: 'btn btn-danger'
                            },
                            buttonsStyling: false
                        })
                        swalWithBootstrapButtons.fire({
                            title: 'Success.',
                            text: "Company Expense(s) Added Successfully.!!",
                            icon: 'success'
                        }).then((result) => {
                            $('#btnSave').show();
                            window.location.reload();
                        });
                    }
                })
            }
        }
        else {
            $("#loader").hide();
            const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
                    })
            swalWithBootstrapButtons.fire({
                title: 'Error.',
                text: "Please Add Expenses/Credits for Company(s)",
                icon: 'error'
            }).then((result) => {
                $("#tblAddExpenses TBODY").focus();     
            });
        }
        $("#loader").hide();
    });

    function Remove(data){
        var row = $(data).closest("TR");
        var task = $("TD",row).eq(1).html();
        if(confirm("Are you sure you want to delete this :"+task)){
            var table = $("#tblAddExpenses")[0];
            var remove = UploadedReceiptFile.splice(row[0].rowIndex-1,1);
            table.deleteRow(row[0].rowIndex);
        }
    };

</script>
<script>

$(document).ready(function () {  
    $("#txtTask").autocomplete({  
        minLength: 0,
        source: function(request,response) {  
            $.ajax({  
                url: "@Url.Action("GetTaskDetails","PortalBalanceExpense")",  
                type: "GET",  
                dataType: "json",  
                data: { prefix: request.term },  
                success: function (data) {  
                    if (data.length > 0) {
                        
                        response($.map(data, function (item) {
                            return {
                                label: item,
                                val: item
                            };
                        }))
                    }
                }  
            })  
        },
        focus: function () {
            return false;
        },
    }); 
    $('#txtTask').on("keydown", function (event) {
        if (event.keyCode === $.ui.keyCode.TAB && $(this).data("autocomplete").menu.active) {
            event.preventDefault();
        }
    });
}); 
</script>
<script>
    function CheckType(type){
        
        if($(type).val()=="Credit"){
            $("#txtVat").attr("readonly","readonly");
            $("#txtVatAmount").attr("readonly","readonly");
        }
        else if($(type).val()=="Debit"){
            $("#txtVat").removeAttr("readonly");
        }
    }

</script>
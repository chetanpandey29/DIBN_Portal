@model DIBN.Areas.Admin.Models.GetAllExpenses
@{
    ViewData["Title"] = "Index";
}
<div class="row">
    <div class="col-lg-12">
        <h6 class="text-theme float-start">@Model.Company</h6>
        <a href="@Url.Action("Index","Company",new{name=@Model.Module})" class="btn btn-theme float-end" style="margin-bottom:15px;">Back to List</a>
    </div>
</div>
<input type="hidden" asp-for="@Model.CompanyId" id="CompanyId" />
<input type="hidden" asp-for="@Model.Module" id="Module" />
<input type="hidden" asp-for="@Model.message" id="message" />
<div id="loader">
    <div class="spinner-1">
        <div class="center-div-1">
            <div class="loader-circle-75">
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title text-center">Company Expense(s)</h4>
                <hr style="height:1px;" class="text-theme"/>
                <div class="table-rep-plugin">
                    <div class="table-responsive mb-0" data-pattern="priority-columns">
                        <table id="datatable" class="table table-bordered table-striped dt-responsive nowrap" style="border-collapse: collapse; border-spacing: 0; width: 100%;">
                            <thead>
                                <tr>
                                    <th>
                                        #
                                    </th>
                                    <th>
                                        Date
                                    </th>
                                    <th>
                                        Description
                                    </th>
                                    <th>
                                        Amount
                                    </th>
                                    <th>
                                        Quantity
                                    </th>
                                    <th>
                                        Total Amount
                                    </th>
                                    <th>
                                        Vat 
                                    </th>
                                    <th>
                                        Vat Amount
                                    </th>
                                    <th>
                                        Grand Amount
                                    </th>
                                    <th>
                                        Action
                                    </th>
                                    <th>
                                        Download Receipt
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var j = 0;
                                }
                                @foreach (var item in Model.portalBalanceExpenses)
                                {
                                    <tr>
                                        <td>
                                            @(j+1)
                                        </td>
                                        <td>
                                            @item.CreatedOnUtc
                                        </td>
                                        <td>
                                            @item.Title
                                        </td>
                                        <td>
                                            @item.Amount
                                        </td>
                                        <td>
                                            @item.Quantity
                                        </td>
                                        <td>
                                            @item.TotalAmount
                                        </td>
                                        <td>
                                            @item.Vat @Html.Raw("%")
                                        </td>
                                        <td>
                                            @item.VatAmount
                                        </td>
                                        <td>
                                            @item.GrandAmount
                                        </td>
                                        <td>
                                            <span class="btn btn-theme Update" onclick="Update(@item.Id)">
                                                <i class="fas fa-edit"></i>
                                            </span>
                                            <span class="btn btn-theme Delete" onclick="RemoveExpenses(@item.Id,@item.GrandAmount)">
                                                <i class="fas fa-trash"></i>
                                            </span>
                                        </td>
                                        <td>
                                            @if (item.ExpenseReceiptId != 0)
                                            {
                                                <form asp-action="DownloadReceipt" asp-controller="PortalBalanceExpense" method="get">
                                                    <input type="hidden" asp-for="@item.Id" name="ReceiptId"/>
                                                    <input type="hidden" asp-for="@item.ExpenseReceiptId" name="ExpenseReceiptId"/>
                                                    <input type="submit" value="Download" name="Download Receipt" class="btn btn-theme"/>
                                                </form>
                                            }
                                            else
                                            {
                                                @Html.Raw("---")
                                            }

                                        </td>
                                    </tr>

                                    j++;
                                }
                            </tbody>
                        </table>

                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="changedTopupBalance" value="@Model.getPortalBalanceDetails.PortalBalance" />

<div id="EditExpense" class="modal" data-bs-keyboard="false" data-bs-backdrop="static" role="dialog">
    @*tabindex="-1"*@
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit</h5>
                <button type="button" class="close btn btn-theme" id="EditExpenseClose" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
            </div>
        </div>
    </div>
</div>

<div id="PortalBalanceAmount" class="modal" data-bs-keyboard="false" data-bs-backdrop="static" role="dialog">
    @*tabindex="-1"*@
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Portal Balance</h5>
                <button type="button" class="btn btn-theme" id="PortalBalanceAmountClose" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form asp-action="AddPortalBalance" asp-controller="PortalBalanceExpense" method="post">
                    <div class="form-group">
                        <label class="control-label">Date</label> <span class="text-danger">*</span>
                        <input name="Date" class="form-control" data-toggle="datepicker" id="ReceiptDate" placeholder="yyyy-mm-dd" required readonly/>
                    </div>
                     <div class="form-group">
                        <label class="control-label">Payment Mode</label>
                        <select class="form-select" name="PaymentMode" required>
                            <option value="">Select Payment Mode</option>
                            <option value="Cash">Cash</option>
                            <option value="Online Transaction">Online Transaction</option>
                            <option value="Cheque">Cheque</option>
                        </select>
                    </div>
                     <div class="form-group">
                        <label class="control-label">Description</label>
                        <input name="Description" type="text" class="form-control" required />
                    </div>
                     <div class="form-group">
                        <label class="control-label">Amount</label>
                        <input name="Amount" id="Amount" type="text" class="form-control" maxlength="10" required />
                        <input type="hidden" asp-for="@Model.CompanyId" />
                        <input type="hidden" name="Actionname" value="GetCompanyExpenseDetails"/>
                        <input type="hidden" name="cnt" value="CompanyAccount"/>
                    </div>
                    <div class="form-group" style="width: 110px;">
                        <label class="control-label">Quantity</label>
                        <input data-toggle="touchspin" type="text" id="Quantity" name="Quantity" value="01" class="txtQuantity" required readonly/>
                    </div>
                    <div class="form-group">
                        <label class="control-label">Total Amount</label>
                        <input name="TotalAmount" id="TotalAmount" type="text" class="form-control" required readonly/>
                        <input type="hidden" asp-for="@Model.CompanyId" />
                        <input type="hidden" name="Actionname" value="GetCompanyExpenseDetails"/>
                        <input type="hidden" name="cnt" value="CompanyAccount"/>
                    </div>
                    <div class="modal-footer">
                        <div class="form-group">
                            <input type="button" id="btnAddPortal" value="Add" class="btn btn-theme" />
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div id="UpdatePortalBalanceAmount" class="modal" data-bs-keyboard="false" data-bs-backdrop="static" role="dialog">
    @*tabindex="-1"*@
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Portal Balance</h5>
                <button type="button" class="btn btn-theme" id="UpdatePortalBalanceAmountClose" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                
            </div>
        </div>
    </div>
</div>
<script src="~/lib/jquery/dist/jquery.min.js"></script>

<!-- Required datatable js -->
<script src="~/assets/libs/datatables.net/js/jquery.dataTables.min.js"></script>
<script src="~/assets/libs/datatables.net-bs4/js/dataTables.bootstrap4.min.js"></script>
<!-- Responsive examples -->
<script src="~/assets/libs/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
<script src="~/assets/libs/datatables.net-responsive-bs4/js/responsive.bootstrap4.min.js"></script>

<!-- Bootrstrap touchspin -->
<link href="~/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css" rel="stylesheet" />
<script src="~/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js"></script>

<!-- Sweet Alerts-->
<script src="~/assets/libs/sweetalert2/sweetalert2.all.min.js"></script>
<link href="~/assets/libs/sweetalert2/sweetalert2.min.css" />
<script src="~/bootstrap.min.js"></script>
<script>
    $(function(){
        var today = new Date();
        $('#ReceiptDate').datepicker({
            format: "yyyy-mm-dd",
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
            endDate: "today",
            maxDate: today
        }).on('changeDate', function (ev) {
            $(this).datepicker('hide');
        });
    });

    $(document).ready(function () {
        $("#loader").hide();
        var message = $("#message").val();
        if (message != null && message != "") {
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                },
                buttonsStyling: false
            })

            swalWithBootstrapButtons.fire({
                title: 'Error.',
                text: message,
                icon: 'error'
            }).then((result) => {
                var CompanyId = $("#CompanyId").val();
                var Module = $("#Module").val();
                var url = "@Url.Action("Index","PortalBalanceExpense")";
                url = url + "?Id=" + CompanyId + "&name=" + Module;
                window.location.href = url;
            });
        }
    });
</script>
<script>
    $('#datatable').dataTable({
        paging: true,
        ordering: true,
        searching: true,
        "aLengthMenu": [20, 30, 50],
        dom: "<'row'<'col-sm-3'l><'col-sm-3'f><'col-sm-6'p>>" +
            "<'row'<'col-sm-12'tr>>" +
            "<'row'<'col-sm-5'i><'col-sm-7'p>>",
    });
    $('#datatable-1').dataTable({
        paging: true,
        ordering: true,
        searching: true,
        "aLengthMenu": [20, 30, 50],
        dom: "<'row'<'col-sm-3'l><'col-sm-3'f><'col-sm-6'p>>" +
            "<'row'<'col-sm-12'tr>>" +
            "<'row'<'col-sm-5'i><'col-sm-7'p>>",
    });
    $(".txtQuantity").TouchSpin({
        min: 1,
        max: 20,
        boostat: 5,
        maxboostedstep: 10
    });
    $(function () {
        var today = new Date();
        $("#txtDate").datepicker({
            format: 'yyyy-mm-dd',
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
            endDate: "today",
            maxDate: today
        }).on('changeDate', function (ev) {
            $(this).datepicker('hide');
        });
    });
</script>
<script>
    $("#Quantity").on("change",function(){
        
        $("#TotalAmount").val(0);
        var amount = $("#Amount").val();
        var quantity = $("#Quantity").val();
        var totalAmount = parseInt(amount) * parseInt(quantity);
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        $("#TotalAmount").val(parseInt(totalAmount));
    });
    $("#Amount").on("keyup",function(){
        
        $("#TotalAmount").val(0);
        var amount = $("#Amount").val();
        var quantity = $("#Quantity").val();
        var totalAmount = parseInt(amount) * parseInt(quantity);
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        $("#TotalAmount").val(parseInt(totalAmount));
    });
</script>
<script>
    $("#EditExpenseClose").on("click",function(){
        window.location.reload();
    });
    $("#PortalBalanceAmountClose").on("click",function(){
        window.location.reload();
    });
    $("#UpdatePortalBalanceAmountClose").on("click",function(){
        window.location.reload();
    });
    $("#AddTopUpBalance").on("click",function(){
        $mymodal = $("#PortalBalanceAmount");
        $mymodal.modal("show");
    });
</script>
<script>
    function RemovePayment(Id,Amount){
        
        var companyId = $("#CompanyId").val();
        event.preventDefault();
        const swalWithBootstrapButtons = Swal.mixin({
          customClass: {
            confirmButton: 'ms-3 btn btn-success',
            cancelButton: 'btn btn-danger'
          },
          buttonsStyling: false
        })

        swalWithBootstrapButtons.fire({
          title: 'Are you sure?',
          text: "You won't be able to revert this!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, delete it!',
          cancelButtonText: 'No, cancel!',
          reverseButtons: true,
          showConfirmButton: true,
        }).then((result) => {
            if (result.isConfirmed) {
                $("#loader").show();
                $.ajax({
                    url: "@Url.Action("DeletePaymentDetails", "PortalBalanceExpense")",
                    method: "GET",
                    data:{"Id":Id,"CompanyId":companyId,"Amount":Amount},
                    success: function (response) {
                        $("#loader").hide();
                        swalWithBootstrapButtons.fire({
                          title: 'Deleted.',
                          text: "Selected Payment Transaction Deleted Successfully..!!",
                          icon: 'success'
                        }).then((result) => {
                            window.location.reload();
                        });
                    }
                });
            }
        });
    }
</script>
<script>
    function Update(Id){
        $("#loader").show();
        var module = $("#Module").val();
        var companyId = $("#CompanyId").val();
        $.ajax({
            url: "@Url.Action("Edit","PortalBalanceExpense")",
            method: "GET",
            data:{"Id":Id,"CompanyId":companyId,"name":module},
            success: function (response) {
                $("#loader").hide();
                $mymodal = $("#EditExpense");
                $mymodal.find("div.modal-body").html(response);
                $mymodal.modal("show");
            }
        });
    };

    function UpdatePayment(Id){
        $("#loader").show();
        var module = $("#Module").val();
        var companyId = $("#CompanyId").val();
        $.ajax({
            url: "@Url.Action("GetTransactionModification","AccountManagement")",
            method: "GET",
            data: { "Id": Id , "CompanyId" : companyId },
            success: function (response) {
                if (response != "" && response != null) {
                    const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                            confirmButton: 'ms-3 btn btn-success',
                            cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
                    })

                    swalWithBootstrapButtons.fire({
                        title: 'Error.',
                        text: response,
                        icon: 'error'
                    }).then((result) => {
                        window.location.reload();
                    });
                }
                else {
                    $.ajax({
                        url: "@Url.Action("GetPaymentDetails","PortalBalanceExpense")",
                        method: "GET",
                        data:{"Id":Id,"CompanyId":companyId,"ActionName":"Index","Cnt":"PortalBalanceExpense"},
                        success: function (response) {
                            $("#loader").hide();
                            $mymodal = $("#UpdatePortalBalanceAmount");
                            $mymodal.find("div.modal-body").html(response);
                            $mymodal.modal("show");
                        }
                    });
                }
            }
        });
    };
</script>
<script>
    function RemoveExpenses(Id,Amount){
        var companyId = $("#CompanyId").val();
        event.preventDefault();
        const swalWithBootstrapButtons = Swal.mixin({
          customClass: {
            confirmButton: 'ms-3 btn btn-success',
            cancelButton: 'btn btn-danger'
          },
          buttonsStyling: false
        })

        swalWithBootstrapButtons.fire({
          title: 'Are you sure?',
          text: "You won't be able to revert this!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, delete it!',
          cancelButtonText: 'No, cancel!',
          reverseButtons: true,
          showConfirmButton: true,
        }).then((result) => {
            if (result.isConfirmed) {
                $("#loader").show();
                $.ajax({
                    url: "@Url.Action("Delete", "PortalBalanceExpense")",
                    method: "GET",
                    data:{"Id":Id,"CompanyId":companyId,"Amount":Amount},
                    success: function (response) {
                        $("#loader").hide();
                        swalWithBootstrapButtons.fire({
                          title: 'Deleted.',
                          text: "Selected Expense Deleted Successfully..!!",
                          icon: 'success'
                        }).then((result) => {
                            window.location.reload();
                        });
                    }
                });
            }
        });
    }
</script>
<script>
    $("#txtAmount").on("keyup",function(){
        
        $("#txtTotalAmount").val(0);
        var amount = $("#txtAmount").val();
        var quantity = $("#txtQuantity").val();
        var totalAmount = parseInt(amount) * parseInt(quantity);
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        $("#txtTotalAmount").val(parseInt(totalAmount));
        $("#txtGrandAmount").val(parseFloat(totalAmount));

    });
    $("#txtQuantity").on("change",function(){
        
        $("#txtTotalAmount").val(0);
        var amount = $("#txtAmount").val();
        var quantity = $("#txtQuantity").val();
        var totalAmount = parseInt(amount) * parseInt(quantity);
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        $("#txtTotalAmount").val(parseInt(totalAmount));
        $("#txtGrandAmount").val(parseFloat(totalAmount));
    });
    $("#txtTotalAmount").on("focus",function(){
        
        $("#txtTotalAmount").val(0);
        var amount = $("#txtAmount").val();
        var quantity = $("#txtQuantity").val();
        var totalAmount = parseInt(amount) * parseInt(quantity);
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        $("#txtTotalAmount").val(parseInt(totalAmount));
        $("#txtGrandAmount").val(parseFloat(totalAmount));
    });
    $("#txtVat").on("keyup",function(){
        var totalAmount = $("#txtTotalAmount").val();
        var vatPercentage = $("#txtVat").val();
        var vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercentage))/100;
        if(isNaN(vatAmount)){
            vatAmount = 0;
        }
        var totalAmount = $("#txtTotalAmount").val();
        $("#txtVatAmount").val(parseFloat(vatAmount));
        $("#txtGrandAmount").val(parseFloat(totalAmount)+parseFloat(vatAmount));
    });
</script>
<script>
    
    var UploadedReceiptFile = new Array();
    $("body").on("click","#btnAdd",function(){
        $("#loader").show();
        var checkRemainingBalance = $("#changedTopupBalance").val();
        var amount = $("#txtAmount").val();
        var quantity = $("#txtQuantity").val();
        var totalAmount = parseInt(amount) * parseInt(quantity);
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }

        var Task = $("#txtTask").val();
        var Amount = $("#txtAmount").val();
        var Quantity = $("#txtQuantity").val();
        var TotalAmount = $("#txtTotalAmount").val();
        var CompanyId = $("#CompanyId").val();
        var date = $("#txtDate").val();
        var Vat = $("#txtVat").val();
        var VatAmount = $("#txtVatAmount").val();
        var GrandAmount = $("#txtGrandAmount").val();
        var name = $("#Module").val();
        if(Amount=="" || Quantity == ""|| TotalAmount=="" || Task == "" || ||!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)){
            if(Task==""){
                $("#loader").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Name for which you are adding Expense.",
                    'error'
                )
            }else if(Amount == ""){
                $("#loader").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Amount of Expense.",
                    'error'
                )
            }else if(Quantity==""){
                $("#loader").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Quantity.",
                    'error'
                )
            }else if(TotalAmount == ""){
                $("#loader").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Total Amount of This Expense",
                    'error'
                )
            }
            else if(!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)){
                $("#loader").hide();
                alert("Please Enter Valid Date Format for Date.");
                var today = new Date();
                var dd = String(today.getDate()).padStart(2, '0');
                var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
                var yyyy = today.getFullYear();

                today = yyyy + '-' + mm + '-' + dd;
                $('#txtDate').datepicker('setDate', today);
                $("#txtDate").focus();
            }
            
        }else{
            $("#loader").show();
            var topup = $("#changedTopupBalance").val();
            var remainingAmount = parseInt(topup) - parseInt(GrandAmount);

            if(isNaN(remainingAmount)){
                remainingAmount = 0-parseInt(GrandAmount);
            }
            $("#changedTopupBalance").val(parseInt(remainingAmount));
            $("#UpdatedTopUpBalance").val(parseInt(remainingAmount));

            var RemainingBalance = $("#changedTopupBalance").val();
          
            UploadedReceiptFile.push({
                "Task":Task,
                "Amount":Amount,
                "Quantity":Quantity,
                "TotalAmount":TotalAmount,
                "CompanyId":CompanyId,
                "name":name,
                "RemainingBalance":RemainingBalance,
                "Date":date,
                "Vat":Vat,
                "VatAmount":VatAmount,
                "GrandTotal":GrandTotal
            });

            var txtTask = $("#txtTask");
            var txtAmount = $("#txtAmount");
            var txtQuantity = $("#txtQuantity");
            var txtTotalAmount = $("#txtTotalAmount");
            var txtVat = $("#txtVat");
            var txtVatAmount = $("#txtVatAmount");
            var txtGrandTotal = $("#txtGrandAmount");
            var txtDate = $("#txtDate");

            var tbody = $("#tblAddExpenses > TBODY")[0];

            var row = tbody.insertRow(-1);

            var cell = $(row.insertCell(-1));
            cell.html(txtDate.val());

            cell = $(row.insertCell(-1));
            cell.html(txtTask.val());

            cell = $(row.insertCell(-1));
            cell.html(txtAmount.val());

            cell = $(row.insertCell(-1));
            cell.html(txtQuantity.val());

            cell = $(row.insertCell(-1));
            cell.html(txtTotalAmount.val());

            cell = $(row.insertCell(-1));
            cell.html(txtVat.val());

            cell = $(row.insertCell(-1));
            cell.html(txtVatAmount.val());

            cell = $(row.insertCell(-1));
            cell.html(txtGrandTotal.val());


            cell = $(row.insertCell(-1));
            var btnRemove = $("<input />");
            btnRemove.attr("type","button");
            btnRemove.attr("class","btn btn-theme");
            btnRemove.attr("onclick","Remove(this);");
            btnRemove.val("Remove");
            cell.append(btnRemove);

            txtTask.val("");
            txtAmount.val("");
            txtQuantity.val("1");
            txtTotalAmount.val("");
            txtVat.val("");
            txtVatAmount.val("");
            txtDate.val("");
            txtGrandTotal.val("");
            $("#loader").hide();
        }
        $("#loader").hide();
    });


    $("body").on("click","#btnSave",function(){
        $("#loader").show();
        var data = JSON.stringify(UploadedReceiptFile);
        $.ajax({
            url:"@Url.Action("AddExpenses","PortalBalanceExpense")",
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            type: 'POST',
            data:data,
            success:function(result){
                $("#loader").hide();
                window.location.reload();
            }
        })
    });

    function Remove(data,Id){
        var row = $(data).closest("TR");
        var task = $("TD",row).eq(1).html();
        if(confirm("Are you sure you want to delete this :"+task)){
            var TotalAmount = row.find("TD").eq(4).html();
            var checkRemainingBalance = $("#changedTopupBalance").val();
            var remainingAmount = parseInt(TotalAmount) + parseInt(checkRemainingBalance);
            $("#changedTopupBalance").val(remainingAmount);
            $("#UpdatedTopUpBalance").val(remainingAmount);
            var table = $("#tblAddExpenses")[0];
            table.deleteRow(row[0].rowIndex);
        }
    };
</script>
<script>
    $("#UpdatePortalBalance").on("click",function(){
        $("#loader").show();
        var balance = $("#changedTopupBalance").val();
        var UpdateTopUpBalance = $("#UpdatedTopUpBalance").val();
        if(parseInt(UpdateTopUpBalance) == parseInt(balance)){
            $("#loader").hide();
            $("#UpdatedTopUpBalance").removeAttr("readonly");
        }else{
            $("#loader").show();
            var CompanyId = $("#CompanyId").val();
            balance = $("#UpdatedTopUpBalance").val();
            $.ajax({
                url:"@Url.Action("UpdatePortalBalance","PortalBalanceExpense")",
                type:"GET",
                data:{"CompanyId":CompanyId,"Amount":balance},
                success:function(response){
                    $("#loader").hide();
                    $("#UpdatedTopUpBalance").attr("readonly");
                    window.location.reload();
                }
            });
        }
        
    });
</script>
<script>

$(document).ready(function () {  
    $("#txtTask").autocomplete({  
        minLength: 0,
        source: function(request,response) {  
            $.ajax({  
                url: "@Url.Action("GetTaskDetails","PortalBalanceExpense")",  
                type: "GET",  
                dataType: "json",  
                data: { prefix: request.term },  
                success: function (data) {  
                    if (data.length > 0) {
                        
                        response($.map(data, function (item) {
                            return {
                                label: item,
                                val: item
                            };
                        }))
                    }
                }  
            })  
        },
        focus: function () {
            return false;
        },
    }); 
    $('#txtTask').on("keydown", function (event) {
        if (event.keyCode === $.ui.keyCode.TAB && $(this).data("autocomplete").menu.active) {
            event.preventDefault();
        }
    });
}); 
</script>
<script>
    $("#btnAddPortal").on('click', function() {
        $("#loader").show();
        var dateString = $("#ReceiptDate").val();

        if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(dateString)) {
            alert("Please Enter Valid Date Format for Date.");
            var today = new Date();
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
            var yyyy = today.getFullYear();

            today = yyyy + '-' + mm + '-' + dd;
            $('#ReceiptDate').datepicker('setDate', today);
            $("#ReceiptDate").focus();
            $("#loader").hide();
            return false;
        }
        else {
            $("#loader").hide();
            $("#btnAddPortal").removeAttr("type");
            $("#btnAddPortal").attr("type", "submit");
        }
    });
</script>
@model DIBN.Areas.Admin.Models.CompanyInvoiceModel
@{
    ViewData["Title"] = "Create";
}
<style>
.datepicker{ z-index:99999 !important; }

.ui-autocomplete {
    max-height: 200px;
    overflow-y: auto;
    overflow-x: hidden;
    padding-right: 20px;
}
</style>
<div class="spinner-1">
    <div class="center-div-1">
        @* <div class="loader-1">
            <span><img src="~/DIBN_Logo.png" width="100" height="50"/></span>
        </div> *@
        <div class="loader-circle-75">
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-12">
        <h6 class="text-theme float-start">Invoice Details</h6>
        <a href="@Url.Action("Index","CompanyInvoice")" class="btn btn-theme float-end mb-3">Back to List</a>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="col-12">
                    <div class="col-md-6 float-start">
                        <label class="control-label">Company</label> <span class="text-danger">*</span>
                        @Html.DropDownListFor(w => w.CompanyId, @Model.companies, "Select Company", new { @class = "form-control form-select single-line",@id="CompanyId", required = (string)null })
                        <span asp-validation-for="CompanyId" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 float-start">
                        <label class="control-label">Currency</label> <span class="text-danger">*</span>
                        @Html.DropDownListFor(w => w.Currency, @Model.Currencies, "Select Currency", new { @class = "form-control form-select single-line",@id="CurrencyId", required = (string)null })
                        <span asp-validation-for="Currency" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-12">
                    <div class="col-md-6 float-start mt-1">
                        <label class="control-label">Service</label>
                        <input name="Service" class="form-control" id="txtService"/>
                    </div>
                    <div class="col-md-5 ms-1 float-start mt-1">
                        <label class="control-label">Date</label> <span class="text-danger">*</span>
                        <input name="InvoiceDate" class="form-control" data-toggle="datepicker" id="InvoiceDate" placeholder="dd-mm-yyyy" readonly/>
                    </div>
                </div>
                <div class="col-12 float-start">
                    <hr style="height:1.5px;" class="text-theme"/>
                    <div class="table-rep-plugin">
                        <div class="table-responsive mb-0" data-pattern="priority-columns">
                            <table id="tblAddExpenses" class="table table-bordered table-striped dt-responsive nowrap" style="border-collapse: collapse; border-spacing: 0; width: 100%;">
                                <thead>
                                    <tr>
                                        <th>
                                            Description
                                        </th>
                                        <th>
                                            Amount
                                        </th>
                                        <th>
                                            Quantity
                                        </th>
                                        <th>
                                            Total Amount
                                        </th>
                                        <th>
                                            VAT(%)
                                        </th>
                                        <th>
                                            VAT Amount
                                        </th>
                                        <th>

                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td><textarea id="txtTask" maxlength="200" class="form-control" rows="3" cols="30" required></textarea></td>
                                        <td><input type="text" id="txtAmount" class="form-control" maxlength="10" onkeyup="ValidAlphabet(this)" onfocusout="ValidAlphabet(this)" onkeypress="ValidTextLength(this)" step=".01" required/></td>
                                        <td>
                                            <div style="width: 110px;" class="product-cart-touchspin">
                                                <input data-toggle="touchspin" type="text" value="01" id="txtQuantity" required readonly/>
                                            </div>
                                        </td>
                                        <td><input type="text" id="txtTotalAmount" class="form-control" step=".01" value="0" required readonly/></td>
                                        <td><input type="text" id="txtVat" class="form-control" maxlength="4" onkeyup="ValidAlphabet(this)" onfocusout="ValidAlphabet(this)" onkeypress="ValidTextLength(this)" step=".01" value="0" /></td>
                                        <td><input type="text" id="txtVatAmount" step=".01" class="form-control" value="0" readonly/></td>
                                        <td>
                                            <input type="button" id="btnAdd" class="btn btn-theme" value="Add" />
                                            <button type="button" id="btnClear" class="btn btn-theme"><i class="fas fa-trash"></i></button>
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Grand Total :</label>
                            <input name="GrandTotal" id="GrandTotal" type="text" class="form-control" value="0" readonly/>
                            <input name="InvoiceNumber" id="InvoiceNumber" type="hidden" class="form-control"/>
                        </div>
                        <input type="button" id="btnSave" class="btn btn-theme mt-3" value="Save all" />
                        <span id="btnPaymentDetailsMessage" class="text-danger">Please Wait While We Are Saving Invoice Details.</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/lib/jquery/dist/jquery.min.js">
</script>
<!-- Required datatable js -->
<script src="~/assets/libs/datatables.net/js/jquery.dataTables.min.js"></script>
<script src="~/assets/libs/datatables.net-bs4/js/dataTables.bootstrap4.min.js"></script>
<!-- Sweet Alerts-->
<script src="~/assets/libs/sweetalert2/sweetalert2.all.min.js"></script>
<link href="~/assets/libs/sweetalert2/sweetalert2.min.css" />
<!-- Bootrstrap touchspin -->
<link href="~/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css" rel="stylesheet" />
<script src="~/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js"></script>

<link href="~/select2/select2.min.css" rel="stylesheet" />
<script src="~/select2/select2.min.js"></script>


<script src="~/bootstrap.min.js"></script>
<script>
    ////// Open Selection dropdown on focus                                     -- Yashasvi TBC (09-02-2023)
    $(document).on('focus', '.select2.select2-container', function (e) {
        if (e.originalEvent && $(this).find(".select2-selection--single").length > 0) {
            $(this).siblings('select').select2('open');
        }
    });
    $('#datatable').dataTable({
        paging: true,
        ordering: false,
        searching: true,
        "aLengthMenu": [20, 30, 50],
    });
    $("#txtQuantity").TouchSpin({
        min: 1,
        max: 20,
        boostat: 5,
        maxboostedstep: 10
    });
    $(function() {
      $('#CompanyId').select2();
      $('#CurrencyId').select2();
    });

    $(document).ready(function() {
        $('#btnPaymentDetailsMessage').hide();
        $(".spinner-1").hide();
    });

    function isNumber(evt) {
        
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57)) {
            alert("Please Enter Numeric Values Only.");
            return false;
        }
        return true;
    }

</script>
<script>
    function ValidAlphabet(data) {
        var code = (event.which) ? event.which : event.keyCode;
        var digits = $(data).val();
        
        if (!(code>= 48 && code <=57) || !(code >=96 && code <=105) || code == 54 || code == 189 || code == 219 || code==57) {
            if (code != 32 && code != 190) {
                var lastValue = digits.substring(digits.length - 1);
                digits = digits.replace(/[^(\.\s)[^0-9-]/g, '');
                
                if (lastValue == "^" || lastValue == "-" || lastValue == "(" || lastValue == ")" || lastValue == "[") {
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(0, lastIndex);
                    digits = currentText;
                    digits = digits.replace(lastValue, '');
                }
                else if (digits.includes("-") || digits.includes("^") || digits.includes("(")|| digits.includes(")")|| digits.includes("[")) {
                    if (digits.includes("-")) {
                        var lastIndex = digits.lastIndexOf("-");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes("^")) {
                        var lastIndex = digits.lastIndexOf("^");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes("(")) {
                        var lastIndex = digits.lastIndexOf("(");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes(")")) {
                        var lastIndex = digits.lastIndexOf(")");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes("[")) {
                        var lastIndex = digits.lastIndexOf("[");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                }
                else if (digits.replace(/[^.]/g, "").length > 1) {
                    lastValue = digits.substring(digits.length - 1);
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(lastIndex, digits.length);
                    if (currentText.replace(/[^.]/g, "").length > 1) {
                        var currentDigits1 = digits.slice(0, lastIndex+1);
                        digits = currentDigits1;
                    }
                    else {
                        var currentDigits = digits.slice(0,lastIndex);
                        digits = currentDigits;
                    }

                }
                $(data).val(digits);
            }
            else if (digits.replace(/[^.]/g, "").length > 1) {
                lastValue = digits.substring(digits.length - 1);
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(lastIndex, digits.length);
                    if (currentText.replace(/[^.]/g, "").length > 1) {
                        var currentDigits1 = digits.slice(0, lastIndex+1);
                        digits = currentDigits1;
                    }
                    else {
                        var currentDigits = digits.slice(0,lastIndex);
                        digits = currentDigits;
                    }

                $(data).val(digits);
            }
        }
    } 
    function ValidTextLength(data) {
        var digits = $(data).val();
        var currentDigits = digits.split(".");
        if (digits.includes(".") == true) {
            if (currentDigits[1].length >= 2) {
                event.preventDefault();
            }
        }
    }
</script>
<script>
    $(function(){
        $('#InvoiceDate').datepicker({
            format: "yyyy-mm-dd",
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
        });
    });
</script>
<script>
    $("#txtAmount").on("keyup",function(){
        $("#txtTotalAmount").val(0);
        var amount = $("#txtAmount").val();
        var quantity = $("#txtQuantity").val();
        var totalAmount = 0,vatPercentage=0;
        totalAmount = $("#txtTotalAmount").val();
        vatPercentage = $("#txtVat").val();
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        if(parseInt(vatPercentage)!=0){
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            if(isNaN(vatAmount)){
                vatAmount = 0;
            }
            $("#txtVatAmount").val(parseFloat(vatAmount).toFixed(2));
        }
        else{
            totalAmount = ((parseFloat(amount) * quantity));
        }
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        $("#txtTotalAmount").val(parseFloat(totalAmount).toFixed(2));
    });
    $("#txtQuantity").on("change",function(){
        $("#txtTotalAmount").val(0);
        var amount = $("#txtAmount").val();
        var quantity = $("#txtQuantity").val();
        var totalAmount = 0,vatPercentage=0;
        totalAmount = $("#txtTotalAmount").val();
        vatPercentage = $("#txtVat").val();
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        if(parseInt(vatPercentage)!=0){
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            if(isNaN(vatAmount)){
                vatAmount = 0;
            }
            $("#txtVatAmount").val(parseFloat(vatAmount).toFixed(2));
        }
        else{
            totalAmount = parseFloat(amount) * parseInt(quantity);
        }
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        $("#txtTotalAmount").val(parseFloat(totalAmount).toFixed(2));
    });
    $("#txtVat").on("keyup",function(){
        var amount = $("#txtAmount").val();
        var totalAmount = $("#txtTotalAmount").val();
        var vatPercentage = $("#txtVat").val();
        var vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercentage))/100;
        if(isNaN(vatAmount)){
            vatAmount = 0;
        }
        $("#txtVatAmount").val(parseFloat(vatAmount).toFixed(2));
    });

    $("#txtAmount").on("focus", function () {
        $("#txtTotalAmount").val(0);
        var amount = $("#txtAmount").val();
        var quantity = $("#txtQuantity").val();
        var totalAmount = 0, vatPercentage = 0;
        totalAmount = $("#txtTotalAmount").val();
        vatPercentage = $("#txtVat").val();
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $("#txtVatAmount").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        $("#txtTotalAmount").val(parseFloat(totalAmount).toFixed(2));
    });

    $("#txtQuantity").on("focus", function () {
        $("#txtTotalAmount").val(0);
        var amount = $("#txtAmount").val();
        var quantity = $("#txtQuantity").val();
        var totalAmount = 0, vatPercentage = 0;
        totalAmount = $("#txtTotalAmount").val();
        vatPercentage = $("#txtVat").val();
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $("#txtVatAmount").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = parseFloat(amount) * parseInt(quantity);
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        $("#txtTotalAmount").val(parseFloat(totalAmount).toFixed(2));
    });
    $("#txtVat").on("focus", function () {
        var amount = $("#txtAmount").val();
        var totalAmount = $("#txtTotalAmount").val();
        var vatPercentage = $("#txtVat").val();
        var vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercentage)) / 100;
        if (isNaN(vatAmount)) {
            vatAmount = 0;
        }
        $("#txtVatAmount").val(parseFloat(vatAmount).toFixed(2));
    });
</script>
<script>
    var UploadedReceiptFile = new Array();

    $("body").on("click", "#btnClear", function() {
        $("#txtTask").val('');
        $("#txtAmount").val('');
        $("#txtQuantity").val('1');
        $("#txtTotalAmount").val('0');
        $("#txtVat").val('0');
        $("#txtVatAmount").val('0');
    });

    $("body").on("click","#btnAdd",function(){
        isNumber();
        if($("#CompanyId").val()=="" ||$("#CompanyId").val()==0 ){
            alert("Please Select Company");
            $("#CompanyId").select2('open');
            return false;
        }
        if($("#CurrencyId").val()=="" ||$("#CurrencyId").val()==0 ){
            alert("Please Select Currency");
            $("#CurrencyId").select2('open');
            return false;
        }
        var txtGrandTotal = $("#GrandTotal");
        var amount = $("#txtAmount").val();
        var quantity = $("#txtQuantity").val();
        var grandTotal = $("#GrandTotal").val();
        var InvoiceNumber = $("#InvoiceNumber").val();
        var totalAmount = parseFloat(amount) * parseInt(quantity);
        $("#txtTotalAmount").val(totalAmount);
        var vatPercetange = $("#txtVat").val();
        var vatAmount = $("#txtVatAmount").val();
        var _invoiceDate =$("#InvoiceDate").val();
        vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercetange)) / 100;
        $("#txtVatAmount").val(vatAmount);
        if(isNaN(vatAmount) || vatAmount==""){
            vatAmount = 0;
        }
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }

         if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(_invoiceDate)) {
            var today = new Date();
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0'); 
            var yyyy = today.getFullYear();

            today = yyyy + '-' + mm + '-' + dd;

            alert("Please Enter Valid Date Format for Invoice Date.");
            $('#InvoiceDate').datepicker('setDate', today);
            $("#InvoiceDate").focus();
            return false;
        }
        if(_invoiceDate==""){
            alert("Please Select Date");
            $("#InvoiceDate").focus();
            return false;
        }
        
        
        var Task = $("#txtTask").val();
        var Amount = $("#txtAmount").val();
        var Quantity = $("#txtQuantity").val();
        var TotalAmount = $("#txtTotalAmount").val();
        var CompanyId = $("#CompanyId").val();
        var Currency = $("#CurrencyId").val();
        var Service = $("#txtService").val();
        var vat = $("#txtVat").val();
        var vatAmt = $("#txtVatAmount").val();
        if (vat == "" || isNaN(vat)) {
            $("#txtVat").val(0);
            vat="0";
        }
        if(vatAmt == "" || isNaN(vatAmt)){
            $("#txtVatAmount").val(0);
            vatAmt=0;
        }

        if(Amount=="" ||Amount=="0" || Amount=="0.0"|| Quantity == ""|| TotalAmount=="" || Task == "" || (vat!=""  && vatAmt=="")){
            if(Task==""){
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Name for which you are adding Expense.",
                    'error'
                )
            }else if(Amount=="" ||Amount=="0" || Amount=="0.0"){
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Valid Amount of Expense.",
                    'error'
                )
            }else if(Quantity==""){
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Quantity.",
                    'error'
                )
            }else if(TotalAmount == ""){
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Total Amount of This Expense",
                    'error'
                )
            }else if(vat!="" && vatAmt==""){
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Total Amount of Vat.",
                    'error'
                )
            }

        }
        else if (isNaN(parseFloat(Amount)) || isNaN(parseFloat(vat)) ) {
            if (isNaN(parseFloat(Amount))) {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Valid Amount.",
                    'error'
                ).then((result) => {
                    $("#txtAmount").val(0);
                    $("#txtVatAmount").val(0);
                });
            }
            else if (isNaN(parseFloat(vat))) {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Provide Valid  Vat.",
                    'error'
                ).then((result) => {
                    $("#txtVat").val(0);
                    $("#txtVatAmount").val(0);
                });
            }
        }
        else{
            var grandTotalAmount = parseFloat(grandTotal) + parseFloat(totalAmount) + parseFloat(vatAmount);
            txtGrandTotal.val(parseFloat(grandTotalAmount).toFixed(2));
            vatAmt = parseFloat(vatAmt).toFixed(2);
            UploadedReceiptFile.push({
                "Product":Task,
                "Amount":parseFloat(Amount).toFixed(2).toString(),
                "Quantity":Quantity,
                "TotalAmount":TotalAmount,
                "Vat":parseFloat(vat).toFixed(2).toString(),
                "VatAmount":parseFloat(vatAmt),
                "InvoiceDate":_invoiceDate,
                "Service":Service
            });

            var txtTask = $("#txtTask");
            var txtAmount = $("#txtAmount");
            var txtQuantity = $("#txtQuantity");
            var txtTotalAmount = $("#txtTotalAmount");
            var txtVat = $("#txtVat");
            var txtVatAmount = $("#txtVatAmount");

            var tbody = $("#tblAddExpenses > TBODY")[0];

            var row = tbody.insertRow(-1);

            var cell = $(row.insertCell(-1));
            cell.html(txtTask.val());

            cell = $(row.insertCell(-1));
            cell.html(parseFloat(txtAmount.val()).toFixed(2));

            cell = $(row.insertCell(-1));
            cell.html(txtQuantity.val());

            cell = $(row.insertCell(-1));
            cell.html(parseFloat(txtTotalAmount.val()).toFixed(2));

            cell = $(row.insertCell(-1));
            cell.html(parseFloat(txtVat.val()));

            cell = $(row.insertCell(-1));
            cell.html(parseFloat(vatAmt).toFixed(2));

            cell = $(row.insertCell(-1));
            var btnRemove = $("<input />");
            btnRemove.attr("type","button");
            btnRemove.attr("class","btn btn-theme");
            btnRemove.attr("onclick","Remove(this);");
            btnRemove.val("Remove");
            cell.append(btnRemove);

            txtTask.val("");
            txtAmount.val("");
            txtQuantity.val("1");
            txtTotalAmount.val("");
            txtVat.val("0");
            txtVatAmount.val("0");
            txtTask.focus();
        }

    });


    $("body").on("click","#btnSave",function(){
       
        var _tableLength = $("#tblAddExpenses TBODY TR").length;

        if($("#CompanyId").val()=="" ||$("#CompanyId").val()==0 ){
            alert("Please Select Company");
            $("#CompanyId").select2('open');
            return false;
        }
        if($("#CurrencyId").val()=="" ||$("#CurrencyId").val()==0 ){
            alert("Please Select Currency");
            $("#CurrencyId").select2('open');
            return false;
        }

        if (parseInt(UploadedReceiptFile.length) > 0) {
            if ($("#txtTask").val() != ""
                || ($("#txtAmount").val() != "" && $("#txtAmount").val() != "0" && $("#txtAmount").val() != "0.0")
                || ($("#txtTotalAmount").val() != "" && $("#txtTotalAmount").val() != "0" && $("#txtTotalAmount").val() != "0.0")
                || ($("#txtVatAmount").val() != "" && ($("#txtVat").val() != "" && $("#txtVat").val() != "0" && $("#txtVat").val() != "0.0"))
            ) {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire({
                    title: 'One entry is Left. Do you want to Continue ?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes!',
                    cancelButtonText: 'No, cancel!',
                    reverseButtons: true,
                    showConfirmButton: true,
                }).then((result) => {
                    if (result.isConfirmed) {
                        if (parseInt(UploadedReceiptFile.length) > 0) {
                            
                            var CompanyId = $("#CompanyId").val();
                            var Currency = $("#CurrencyId").val();
                            $('#btnSave').hide();
                            $("#btnPaymentDetailsMessage").show();
                            $(".spinner-1").show();
                            UploadedReceiptFile.push({
                                "GrandTotal": $("#GrandTotal").val(),
                                "Count": UploadedReceiptFile.length,
                                "CompanyId": CompanyId,
                                "Currency": Currency
                            });

                            var data = JSON.stringify(UploadedReceiptFile);
                            $.ajax({
                                contentType: 'application/json; charset=utf-8',
                                dataType: 'json',
                                type: 'POST',
                                url: "@Url.Action("Creates","CompanyInvoice")",
                                data: data,
                                success: function(result) {

                                    const swalWithBootstrapButtons = Swal.mixin({
                                        customClass: {
                                            confirmButton: 'ms-3 btn btn-success',
                                            cancelButton: 'btn btn-danger'
                                        },
                                        buttonsStyling: false
                                    })
                                    swalWithBootstrapButtons.fire({
                                        title: 'Success.',
                                        text: "Invoice " + result + " Saved Successfully..!!",
                                        icon: 'success'
                                    }).then((result) => {
                                        $('#btnSave').show();
                                        $(".spinner-1").hide();
                                        $("#btnPaymentDetailsMessage").hide();
                                        var url = "@Url.Action("Index","CompanyInvoice")";
                                        window.location.href = url;
                                    });
                                }
                            })
                        }
                        else {
                            const swalWithBootstrapButtons = Swal.mixin({
                                customClass: {
                                    confirmButton: 'ms-3 btn btn-success',
                                    cancelButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            })
                            swalWithBootstrapButtons.fire({
                                title: 'Error.',
                                text: "Please Provide Invoice Details.!",
                                icon: 'error'
                            }).then((result) => {
                                $(".spinner-1").hide();
                                $("#tblAddExpenses TBODY").focus();
                            });
                        }
                    }
                });
            }
            else {
                var CompanyId = $("#CompanyId").val();
                var Currency = $("#CurrencyId").val();
                $('#btnSave').hide();
                $("#btnPaymentDetailsMessage").show();
                $(".spinner-1").show();
                UploadedReceiptFile.push({
                    "GrandTotal":$("#GrandTotal").val(),
                    "Count":UploadedReceiptFile.length,
                    "CompanyId":CompanyId,
                    "Currency":Currency
                });
            
                var data = JSON.stringify(UploadedReceiptFile);
                $.ajax({
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    type: 'POST',
                    url:"@Url.Action("Creates","CompanyInvoice")",
                    data:data,
                    success:function(result){
                        
                        const swalWithBootstrapButtons = Swal.mixin({
                            customClass: {
                            confirmButton: 'ms-3 btn btn-success',
                            cancelButton: 'btn btn-danger'
                            },
                            buttonsStyling: false
                        })
                        swalWithBootstrapButtons.fire({
                            title: 'Success.',
                            text: "Invoice "+result+" Saved Successfully..!!",
                            icon: 'success'
                        }).then((result) => {
                            $('#btnSave').show();
                            $(".spinner-1").hide();
                            $("#btnPaymentDetailsMessage").hide();
                            var url = "@Url.Action("Index","CompanyInvoice")";
                            window.location.href=url;
                        });
                    }
                })
            }
        }
        else{
            const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
                    })
            swalWithBootstrapButtons.fire({
                title: 'Error.',
                text: "Please Provide Invoice Details.!",
                icon: 'error'
            }).then((result) => {
                $(".spinner-1").hide();
                $("#tblAddExpenses TBODY").focus();     
            });
        }
    });

    function Remove(data,Id){
        var row = $(data).closest("TR");
        var task = $("TD",row).eq(0).html();
        if(confirm("Are you sure you want to delete this : "+task)){
            var GrandTotal = $("#GrandTotal").val();
            var amount = $("TD",row).eq(3).html();
            var vatamount = $("TD",row).eq(5).html();
            var totalAmount = parseFloat(amount) + parseFloat(vatamount);
            var _total = parseFloat(GrandTotal) - parseFloat(totalAmount);
            $("#GrandTotal").val(_total.toFixed(2));
            if(isNaN($("#GrandTotal").val())){
                $("#GrandTotal").val(0);
            }
            var remove = UploadedReceiptFile.splice(row[0].rowIndex-1,1);
            var table = $("#tblAddExpenses")[0];
            table.deleteRow(row[0].rowIndex);
        }
    };
</script>

<script>
$(document).ready(function () {  
    $("#txtTask").autocomplete({  
        minLength: 0,
        source: function(request,response) {  
            $.ajax({  
                url: "@Url.Action("GetPredefinedTask","CompanyInvoice")",  
                type: "GET",  
                dataType: "json",  
                data: { prefix: request.term },  
                success: function (data) {  
                    if (data.length > 0) {
                        
                        response($.map(data, function (item) {
                            return {
                                label: item,
                                val: item
                            };
                        }))
                    }
                }  
            })  
        },
        focus: function () {
            return false;
        },
    }); 
    $('#txtTask').on("keydown", function (event) {
        if (event.keyCode === $.ui.keyCode.TAB && $(this).data("autocomplete").menu.active) {
            event.preventDefault();
        }
    });
}); 
</script>

<script>
$(document).ready(function () {  
    $("#txtService").autocomplete({  
        minLength: 0,
        source: function(request,response) {  
            $.ajax({  
                url: "@Url.Action("GetPredefinedServices","CompanyInvoice")",  
                type: "GET",  
                dataType: "json",  
                data: { prefix: request.term },  
                success: function (data) {  
                    if (data.length > 0) {
                        
                        response($.map(data, function (item) {
                            return {
                                label: item,
                                val: item
                            };
                        }))
                    }
                }  
            })  
        },
        focus: function () {
            return false;
        },
    }); 
    $('#txtService').on("keydown", function (event) {
        if (event.keyCode === $.ui.keyCode.TAB && $(this).data("autocomplete").menu.active) {
            event.preventDefault();
        }
    });
}); 
</script>

@model DIBN.Areas.Admin.Models.UpdateCompanyExpenses
<style>
    .datepicker {
        z-index: 99999 !important;
    }</style>
<div class="row">
    <form asp-action="UpdateExpenseDetails" method="post" enctype="multipart/form-data">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="Id" />
        <div class="form-group">
            <label asp-for="Type" class="control-label"></label>
            @Html.DropDownListFor(w => w.Type, Model.expenseType, "Select Type", new { @class = "form-control form-select single-line",@id="types",@onchange="ExpenseTypeChange();" })
            <span asp-validation-for="Type" class="text-danger"></span>
        </div>
        <div class="form-group" id="paymentModeBlock1">
            <label asp-for="PaymentMode" class="control-label"></label>
            @Html.DropDownListFor(w => w.PaymentMode, Model.PaymentModeType, "Select Payment Mode", new { @class = "form-control form-select single-line",@id="paymentMode1" })
            <span asp-validation-for="PaymentMode" class="text-danger"></span>
        </div>
        <div class="form-group" id="CompanyBlock">
            <label asp-for="CompanyId" class="control-label"></label>
            @Html.DropDownListFor(w => w.CompanyId, Model.Companies, "Select Company", new { @class = "form-control form-select single-line",@id="Companies" })
            <span asp-validation-for="CompanyId" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label class="control-label">Expense Created Date </label> <span style="font-weight:bold;">(eg. 2022-01-31)</span>
            <input asp-for="CreatedOnUtc" class="form-control" data-toggle="datepicker" id="CreatedDate1" placeholder="yyyy-mm-dd" required readonly/>
            <span asp-validation-for="CreatedOnUtc" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Task" class="control-label"></label>
            <textarea asp-for="Task" class="form-control text-wrap" maxlength="200" required rows="3" cols="30" id="txtDescription12"></textarea>
            <span asp-validation-for="Task" class="text-danger"></span>
        </div>
        <div class="form-group" id="AmountBlock1">
            <label asp-for="Amount" class="control-label"></label>
            <input asp-for="Amount" type="text" class="form-control" step=".01" maxlength="10" onkeyup="ValidAlphabet(this)" onfocusout="ValidAlphabet(this)" onkeypress="ValidTextLength(this)" id="Amount2" />
            <span asp-validation-for="Amount" class="text-danger"></span>
        </div>
        <div class="form-group" id="QuantityBlock">
            <label asp-for="Quantity" class="control-label"></label>
            <input asp-for="Quantity" type="number" class="form-control" data-toggle="touchspin" id="Quantity2" readonly />
            <span asp-validation-for="Quantity" class="text-danger"></span>
        </div>
        <div class="form-group" id="TotalAmountBlock">
            <label asp-for="TotalAmount" class="control-label"></label>
            <input asp-for="TotalAmount" type="text" class="form-control" step=".01" id="TotalAmount2" readonly />
            <span asp-validation-for="TotalAmount" class="text-danger"></span>
        </div>
        <div class="form-group" id="vatBlock">
            <label asp-for="Vat" class="control-label"></label>
            <input asp-for="Vat" type="text" class="form-control" step=".01" onkeyup="ValidAlphabet(this)" onfocusout="ValidAlphabet(this)" onkeypress="ValidTextLength(this)" maxlength="4" id="Vat2" />
            <span asp-validation-for="Vat" class="text-danger"></span>
        </div>
        <div class="form-group" id="vatAmountBlock">
            <label asp-for="VatAmount" class="control-label"></label>
            <input asp-for="VatAmount" step=".01" type="text" class="form-control" id="VatAmount2" readonly />
            <span asp-validation-for="VatAmount" class="text-danger"></span>
        </div>
        <div class="form-group" id="grandTotalBlock">
            <label asp-for="GrandTotal" class="control-label"></label>
            <input asp-for="GrandTotal" type="text" class="form-control" step=".01" id="GrandTotal2" readonly />
            <span asp-validation-for="GrandTotal" class="text-danger"></span>
        </div>
        <div class="form-group" id="receiptBlock">
            <label asp-for="formFile" class="control-label"></label>
            <input name="formFile" class="form-control" type="file" id="formFile" />
            <span asp-validation-for="formFile" class="text-danger"></span>
        </div>
        <input asp-for="Module" name="Module" type="hidden" class="form-control" id="Module" />
        <input asp-for="ActionName" type="hidden" class="form-control" />
        <input asp-for="TransactionId" type="hidden" class="form-control" />
        <input asp-for="PreviousCompanyId" id="previousCompanyId" type="hidden" value="@Model.CompanyId" class="form-control" />
        <input asp-for="Controller" type="hidden" class="form-control" />
        <input asp-for="CreatedOnUtc" type="hidden" class="form-control" />
        <input asp-for="PreviousAmount" type="hidden" value="@Model.GrandTotal" class="form-control" />
        <input type="hidden" name="previousTotalAmount" value="@Model.TotalAmount" id="previousTotalAmount" />
        <input type="hidden" name="previousQuantity" value="@Model.Quantity" id="previousQuantity" />
        <input type="hidden" name="previousAddedAmount" value="@Model.Amount" id="previousAddedAmount" />
        <input type="hidden" name="previousAddedVat" value="@Model.Vat" id="previousAddedVat" />
        <input type="hidden" name="previousAddedVatAmount" value="@Model.VatAmount" id="previousAddedVatAmount" />
        <input type="hidden" name="previousGrandTotal" value="@Model.GrandTotal" id="previousGrandTotal" />
        <div class="modal-footer">
            <div class="form-group">
                <input type="button" id="btnSaveDetails" value="Save Changes" class="btn btn-theme" />
                <span id="btnPaymentDetailsMessage11" class="text-danger">Please Wait While We Are Saving Portal Balance Details.</span>
            </div>
        </div>
    </form>
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>

<script src="~/assets/libs/bootstrap-datepicker/js/bootstrap-datepicker.min.js"></script>

<link href="~/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css" rel="stylesheet" />
<script src="~/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js"></script>
<!-- Sweet Alerts-->
<script src="~/assets/libs/sweetalert2/sweetalert2.all.min.js"></script>
<link href="~/assets/libs/sweetalert2/sweetalert2.min.css" />

<!-- Select 2-->
<link href="~/select2/select2.min.css" rel="stylesheet" />
<script src="~/select2/select2.min.js"></script>

<script>
    function ValidAlphabet(data) {
        var code = (event.which) ? event.which : event.keyCode;
        if (!(code >= 48 && code <= 57) || !(code >= 96 && code <= 105) || code == 54 || code == 189 || code == 219 || code == 57) {
            if (code != 32 && code != 190) {
                var digits = $(data).val();
                var lastValue = digits.substring(digits.length - 1);
                digits = digits.replace(/[^(\.\s)[^0-9-]/g, '');
                if (lastValue == "^" || lastValue == "-" || lastValue == "(" || lastValue == ")" || lastValue == "[") {
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(0, lastIndex);
                    digits = currentText;
                    digits = digits.replace(lastValue, '');
                }
                else if (digits.includes("-") || digits.includes("^") || digits.includes("(")|| digits.includes(")")|| digits.includes("[")) {
                    if (digits.includes("-")) {
                        var lastIndex = digits.lastIndexOf("-");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes("^")) {
                        var lastIndex = digits.lastIndexOf("^");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes("(")) {
                        var lastIndex = digits.lastIndexOf("(");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes(")")) {
                        var lastIndex = digits.lastIndexOf(")");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes("[")) {
                        var lastIndex = digits.lastIndexOf("[");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                }
                else if (digits.replace(/[^.]/g, "").length > 1) {
                    lastValue = digits.substring(digits.length - 1);
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(lastIndex, digits.length);
                    if (currentText.replace(/[^.]/g, "").length > 1) {
                        var currentDigits1 = digits.slice(0, lastIndex+1);
                        digits = currentDigits1;
                    }
                    else {
                        var currentDigits = digits.slice(0,lastIndex);
                        digits = currentDigits;
                    }

                }
                $(data).val(digits);
            }
            else if (digits.replace(/[^.]/g, "").length > 1) {
                lastValue = digits.substring(digits.length - 1);
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(lastIndex, digits.length);
                    if (currentText.replace(/[^.]/g, "").length > 1) {
                        var currentDigits1 = digits.slice(0, lastIndex+1);
                        digits = currentDigits1;
                    }
                    else {
                        var currentDigits = digits.slice(0,lastIndex);
                        digits = currentDigits;
                    }

                $(data).val(digits);
            }
        }
    }
    function ValidTextLength(data) {
        var digits = $(data).val();
        var currentDigits = digits.split(".");
        if (digits.includes(".") == true) {
            if (currentDigits[1].length >= 2) {
                event.preventDefault();
            }
        }
    }
</script>

<script>
    ////// Open Selection dropdown on focus                                     -- Yashasvi TBC (09-02-2023)
    $(document).on('focus', '.select2.select2-container', function (e) {
        if (e.originalEvent && $(this).find(".select2-selection--single").length > 0) {
            $(this).siblings('select').select2('open');
        }
    });
    $("#Quantity2").TouchSpin({
        min: 1,
        max: 20,
        boostat: 5,
        maxboostedstep: 10
    });
    
    $(function() {
        $("#Companies").select2();
    });
    
    $(document).ready(function() {
        $('#btnPaymentDetailsMessage11').hide();
    });
</script>
<script>
    $("#Companies").on('change', function() {
        var companyId = $("#Companies").val();
        var previousCompanyId = $("#previousCompanyId").val();
        var previousTotalAmount = $("#previousTotalAmount").val();
        var previousQuantity = $("#previousQuantity").val();
        var previousGrandTotal = $("#previousGrandTotal").val();
        var previousAddedAmount = $("#previousAddedAmount").val();
        var previousAddedVat = $("#previousAddedVat").val();
        var previousAddedVatAmount = $("#previousAddedVatAmount").val();
        if (isNaN(parseFloat(previousAddedVat))) {
            previousAddedVat = 0;
        }
        if (isNaN(parseFloat(previousAddedVatAmount))) {
            previousAddedVatAmount = 0;
        }
        if (companyId != previousCompanyId) {
            $("#Amount2").attr("readonly", "readonly");
            $("#Vat2").attr("readonly", "readonly");
            $("#QuantityBlock").hide();
            $("#AmountBlock1").hide();
            $("#Quantity2").val(parseInt(previousQuantity));
            $("#TotalAmount2").val(parseFloat(previousTotalAmount).toFixed(2));
            $("#Amount2").val(parseFloat(previousAddedAmount).toFixed(2));
            $("#Vat2").val(parseFloat(previousAddedVat).toFixed(2));
            $("#VatAmount2").val(parseFloat(previousAddedVatAmount).toFixed(2));
            $("#GrandTotal2").val(parseFloat(previousGrandTotal).toFixed(2));
        }
        else{
            $("#Amount2").removeAttr("readonly");
            $("#Vat2").removeAttr("readonly");
            $("#QuantityBlock").show();
            $("#AmountBlock1").show();
            $("#Quantity2").val(parseInt(previousQuantity));
            $("#TotalAmount2").val(parseFloat(previousTotalAmount).toFixed(2));
            $("#GrandTotal2").val(parseFloat(previousGrandTotal).toFixed(2));
        }
    });
</script>
<script>
    $(function() {
        var today = new Date();
        $("#CreatedDate1").datepicker({
            format: "yyyy-mm-dd",
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
            endDate: "today",
            maxDate: today
        }).on('changeDate', function(ev) {
            $(this).datepicker('hide');
        });
    });
</script>
<script>
    $(document).ready(function() {
        $("#paymentModeBlock1").hide();
        $("#paymentMode1").removeAttr("required");
    });
</script>
<script>
    $("#Amount2").on("keyup", function() {
        var amount = $("#Amount2").val();
        var quantity = $("#Quantity2").val();
        var vatPercentage = $("#Vat2").val();
        var totalAmount = 0, vatAmount = 0, grandTotal = 0;
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $("#VatAmount2").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        $("#TotalAmount2").val(parseFloat(totalAmount).toFixed(2));
        $("#GrandTotal2").val(parseFloat(grandTotal).toFixed(2));

    });
    $("#Quantity2").on("change", function() {
        var amount = $("#Amount2").val();
        var quantity = $("#Quantity2").val();
        var vatPercentage = $("#Vat2").val();
        var totalAmount = 0, vatAmount = 0, grandTotal = 0;
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $("#VatAmount2").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $("#TotalAmount2").val(parseFloat(totalAmount).toFixed(2));
        $("#GrandTotal2").val(parseFloat(grandTotal).toFixed(2));
    });
    $("#Vat2").on("keyup", function() {
        var amount = $("#Amount2").val();
        var totalAmount = $("#TotalAmount2").val();
        var vatPercentage = $("#Vat2").val();
        var vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercentage)) / 100;
        if (isNaN(vatAmount)) {
            vatAmount = 0;
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        var totalAmount = $("#TotalAmount2").val();
        var grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
         if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $("#VatAmount2").val(parseFloat(vatAmount).toFixed(2));
        $("#GrandTotal2").val(parseFloat(grandTotal).toFixed(2));
    });

    $("#Amount2").on("focus", function () {
        var amount = $("#Amount2").val();
        var quantity = $("#Quantity2").val();
        var vatPercentage = $("#Vat2").val();
        var totalAmount = 0, vatAmount = 0, grandTotal = 0;
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $("#VatAmount2").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        $("#TotalAmount2").val(parseFloat(totalAmount).toFixed(2));
        $("#GrandTotal2").val(parseFloat(grandTotal).toFixed(2));

    });
    $("#Quantity2").on("focus", function () {
        var amount = $("#Amount2").val();
        var quantity = $("#Quantity2").val();
        var vatPercentage = $("#Vat2").val();
        var totalAmount = 0, vatAmount = 0, grandTotal = 0;
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $("#VatAmount2").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $("#TotalAmount2").val(parseFloat(totalAmount).toFixed(2));
        $("#GrandTotal2").val(parseFloat(grandTotal).toFixed(2));
    });
    $("#Vat2").on("focus", function () {
        var amount = $("#Amount2").val();
        var totalAmount = $("#TotalAmount2").val();
        var vatPercentage = $("#Vat2").val();
        var vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercentage)) / 100;
        if (isNaN(vatAmount)) {
            vatAmount = 0;
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        var totalAmount = $("#TotalAmount2").val();
        var grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $("#VatAmount2").val(parseFloat(vatAmount).toFixed(2));
        $("#GrandTotal2").val(parseFloat(grandTotal).toFixed(2));
    });
</script>
<script>
    $("#btnSaveDetails").on('click', function() {
        var currentDate = $("#CreatedDate1").val();
        var selectedType = $("#types").val();
        var companyId = $("#Companies").val();
        var paymentMode = $("#paymentMode1").val();
        var txtDescription = $("#txtDescription12").val();
        var vat = $("#Vat2").val();
        var amountdata = $("#Amount2").val();
        if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(currentDate)) {
            alert("Please Enter Valid Date Format for Company Starting Date.");
            var today = new Date();
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
            var yyyy = today.getFullYear();

            today = yyyy + '-' + mm + '-' + dd;
            $('#CreatedDate1').datepicker('setDate', today);
            $("#CreatedDate1").focus();
            return false;
        }
        else {
            if (selectedType != "") {
                if (selectedType == "Credit") {
                    var amount = $("#Amount2").val();
                    var quantity = $("#Quantity2").val();
                    var totalAmount = ((parseFloat(amount) * parseInt(quantity)));
                    $("#TotalAmount2").val(parseFloat(totalAmount).toFixed(2));

                    if (isNaN(parseFloat(amountdata))) {
                        amountdata = 0;
                    }
                    if (isNaN(parseFloat(amountdata)) || (isNaN(parseFloat(vat))&& vat!="")) {
                        if (isNaN(parseFloat(amountdata))) {
                            alert("Please Provide Valid Amount.");
                             $("#Amount2").val(parseFloat(amountdata).toFixed(2));
                            return false;
                        }
                        else if (isNaN(parseFloat(vat))) {
                            alert("Please Provide Valid Vat.");
                            $("#Vat2").val(0);
                            $("#VatAmount2").val(0);
                            $("#GrandTotal2").val(parseFloat(totalAmount).toFixed(2));
                            return false;
                        }
                    }
                    else if (companyId != "" && paymentMode != "" && txtDescription != "" && amountdata != "" && amountdata!="0" && amountdata!="0.0") {
                        $("#Amount2").val(parseFloat(amountdata).toFixed(2));
                        $("#Vat2").val(parseFloat(vat).toFixed(2));
                        $("#btnSaveDetails").removeAttr("type");
                        $("#btnSaveDetails").attr("type", "submit");
                        $("#btnSaveDetails").hide();
                        $("#btnPaymentDetailsMessage11").show();
                    }
                    else {
                        if (txtDescription == "") {
                            const swalWithBootstrapButtons = Swal.mixin({
                                customClass: {
                                    confirmButton: 'ms-3 btn btn-success',
                                    cancelButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            })
                            swalWithBootstrapButtons.fire(
                                'Error',
                                "Please Provide Description for which you are adding Top-up Balance.",
                                'error'
                            )
                        }
                        else if (paymentMode == "") {
                            const swalWithBootstrapButtons = Swal.mixin({
                                customClass: {
                                    confirmButton: 'ms-3 btn btn-success',
                                    cancelButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            })
                            swalWithBootstrapButtons.fire(
                                'Error',
                                "Please Select Payment Mode.",
                                'error'
                            )
                        }
                        else if (companyId == "") {
                            const swalWithBootstrapButtons = Swal.mixin({
                                customClass: {
                                    confirmButton: 'ms-3 btn btn-success',
                                    cancelButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            })
                            swalWithBootstrapButtons.fire(
                                'Error',
                                "Please Select Company For which You want to Add Expense.",
                                'error'
                            )
                        }
                        else if (amountdata == "" || amountdata=="0"|| amountdata=="0.0") {
                            const swalWithBootstrapButtons = Swal.mixin({
                                customClass: {
                                    confirmButton: 'ms-3 btn btn-success',
                                    cancelButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            })
                            swalWithBootstrapButtons.fire(
                                'Error',
                                "Please Provide Amount for Top-up Balance.",
                                'error'
                            )
                        }
                    }
                }
                else {
                    var amount = $("#Amount2").val();
                    var quantity = $("#Quantity2").val();
                    var totalAmount = ((parseFloat(amount) * parseInt(quantity)));
                    $("#TotalAmount2").val(parseFloat(totalAmount).toFixed(2));

                    var vatPercentage = $("#Vat2").val();
                    var vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercentage)) / 100;
                    $("#VatAmount2").val(parseFloat(vatAmount).toFixed(2));

                    var grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
                    $("#GrandTotal2").val(parseFloat(grandTotal).toFixed(2));

                    if (isNaN(parseFloat(amountdata)) || isNaN(parseFloat(vat))) {
                        if (isNaN(parseFloat(amountdata))) {
                            alert("Please Provide Valid Amount.");
                             $("#Amount2").val(parseFloat(totalAmount).toFixed(2));
                            return false;
                        }
                        else if (isNaN(parseFloat(vat))) {
                            alert("Please Provide Valid Vat.");
                            $("#Vat2").val(0);
                            $("#VatAmount2").val(0);
                            $("#GrandTotal2").val(parseFloat(totalAmount).toFixed(2));
                            return false;
                        }
                    }
                    else if (companyId != "" && txtDescription != "" && amountdata != "" && amountdata!="0"&& amountdata!="0.0") {
                        
                        if (isNaN(parseFloat(amountdata))) {
                            amountdata = 0;
                        }
                        
                        $("#Amount2").val(parseFloat(amountdata).toFixed(2));
                        $("#Vat2").val(parseFloat(vat).toFixed(2));
                        $("#btnSaveDetails").removeAttr("type");
                        $("#btnSaveDetails").attr("type", "submit");
                        $("#btnSaveDetails").hide();
                        $("#btnPaymentDetailsMessage11").show();
                    }
                    else {
                        if (txtDescription == "") {
                            const swalWithBootstrapButtons = Swal.mixin({
                                customClass: {
                                    confirmButton: 'ms-3 btn btn-success',
                                    cancelButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            })
                            swalWithBootstrapButtons.fire(
                                'Error',
                                "Please Provide Description for which you are adding Top-up Balance.",
                                'error'
                            )
                        }
                        else if (companyId == "") {
                            const swalWithBootstrapButtons = Swal.mixin({
                                customClass: {
                                    confirmButton: 'ms-3 btn btn-success',
                                    cancelButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            })
                            swalWithBootstrapButtons.fire(
                                'Error',
                                "Please Select Company For which You want to Add Expense.",
                                'error'
                            )
                        }
                        else if (amountdata == "" || amountdata=="0"|| amountdata=="0.0") {
                            const swalWithBootstrapButtons = Swal.mixin({
                                customClass: {
                                    confirmButton: 'ms-3 btn btn-success',
                                    cancelButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            })
                            swalWithBootstrapButtons.fire(
                                'Error',
                                "Please Provide Amount for Top-up Balance.",
                                'error'
                            )
                        }
                    }
                }
            }
            else {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    "Please Select Type of Expense.",
                    'error'
                )
            }
        }

    });
</script>
<script>
    function ExpenseTypeChange() {
        var selectedType = $("#types").val();
        if (selectedType == "Credit") {
            $("#CompanyBlock").show();
            $("#vatBlock").hide();
            $("#paymentModeBlock1").show();
            $("#paymentMode1").attr("required", "required");
            $("#vatAmountBlock").hide();
            $("#grandTotalBlock").hide();
            $("#receiptBlock").hide();
        }
        else {
            $("#CompanyBlock").show();
            $("#vatBlock").show();
            $("#paymentModeBlock1").hide();
            $("#paymentMode1").removeAttr("required");
            $("#vatAmountBlock").show();
            $("#grandTotalBlock").show();
            $("#receiptBlock").show();
        }
    }
</script>
#pragma checksum "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_AccountManagement_GetHistory), @"mvc.1.0.view", @"/Areas/Admin/Views/AccountManagement/GetHistory.cshtml")]
namespace AspNetCore
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN

#nullable disable
    ;
#nullable restore
#line 2 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.Models

#nullable disable
    ;
#nullable restore
#line 3 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.Data

#nullable disable
    ;
#nullable restore
#line 4 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.IRepository

#nullable disable
    ;
#nullable restore
#line 5 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.Repository

#line default
#line hidden
#nullable disable
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc3", @"/Areas/Admin/Views/AccountManagement/GetHistory.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"605a41b4408e5d1ff247f7264e35f4305eb9eeecf14a77cb4f30041778bbf31f", @"/Areas/Admin/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Areas_Admin_Views_AccountManagement_GetHistory : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DIBN.Areas.Admin.Models.ConfirmationModel>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", "hidden", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("message"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Transaction Id", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Created On", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Company", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Type", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Grand Total", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "asc", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "desc", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Description", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Amount", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Quantity", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Total Amount", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Vat(%)", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Vat Amount", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-responsive/js/dataTables.responsive.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-responsive-bs4/js/responsive.bootstrap4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/sweetalert2/sweetalert2.all.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/sweetalert2/sweetalert2.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
  
    ViewData["Title"] = "GetHistory";

#line default
#line hidden
#nullable disable

            WriteLiteral("<style>\r\n    .btn-white {\r\n        background: #fff !important;\r\n        color: #243c7c !important;\r\n    }\r\n</style>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc310595", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.
#nullable restore
#line 11 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                              message

#line default
#line hidden
#nullable disable
            );
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            WriteLiteral(@"<div id=""loader"">
    <div class=""spinner-1"">
        <div class=""center-div-1"">
            <div class=""loader-circle-75"">
            </div>
        </div>
    </div>
</div>

<input type=""hidden"" name=""Module"" value=""AccountManagement"" id=""Module"" />
<input type=""hidden"" name=""IndexValue"" id=""IndexValue"" />
<div class=""row"" id=""View1"">
    <div class=""card"">
        <div class=""card-body"">
            <div class=""col-lg-12"">
                <div class=""col-lg-2 float-start"">
                    <div class=""form-group"">
                        <label class=""control-label"">From Date : </label>  <span style=""font-weight:bold;"">(eg. 2022-01-31)</span>
                        <input name=""FromDate"" class=""form-control"" id=""FromDate"" placeholder=""yyyy-mm-dd"" readonly />
                    </div>
                </div>
                <div class=""col-lg-2 float-start"">
                    <div class=""form-group ms-2"">
                        <label class=""control-label"">To Date : </label> <");
            WriteLiteral(@"span style=""font-weight:bold;"">(eg. 2022-01-31)</span>
                        <input name=""ToDate"" class=""form-control"" id=""ToDate"" placeholder=""yyyy-mm-dd"" readonly />
                    </div>
                </div>
                <div class=""col-lg-8 float-end mt-3"">
                    <button class=""btn btn-theme pull-right ms-2"" style=""float:right;margin-bottom:15px;"" onclick=""SendPdfFile();"">Export Pdf</button>
                    <button class=""btn btn-theme pull-right"" style=""float:right;margin-bottom:15px;"" onclick=""SendExcelFile();"">Export Excel</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class=""row View"">
    <div class=""col-12"">
        <div class=""card"">
            <div class=""card-header"">
                <div class=""col-md-12 float-end"">
                    <button class=""btn btn-theme float-end"" onclick=""ClearFilterToDatatable();"">Clear All</button>
                </div>
                <div class=""col-md-12"">
           ");
            WriteLiteral(@"         <div class=""col-md-6 float-start"">
                        <div class=""col-lg-4 float-start"">
                            <div class=""form-group"">
                                <label class=""control-label"">Sort By : </label>
                                <select class=""form-select"" id=""sortingBy"">
                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc315007", async() => {
                WriteLiteral("Transaction Id");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc316235", async() => {
                WriteLiteral("Created On");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc317459", async() => {
                WriteLiteral("Company");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc318680", async() => {
                WriteLiteral("Type");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc319898", async() => {
                WriteLiteral("Grand Total");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                </select>
                            </div>
                        </div>
                        <div class=""col-lg-4 float-start"">
                            <div class=""form-group ms-2"">
                                <label class=""control-label"">Sorting Order : </label>
                                <select class=""form-select"" id=""sortingDirection"">
                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc321533", async() => {
                WriteLiteral("Low to High");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc322758", async() => {
                WriteLiteral("High to Low");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                </select>
                            </div>
                        </div>
                        <div class=""col-lg-4 float-start"" style=""margin-top:28px !important;"">
                            <button class=""btn btn-theme float-start ms-2 me-2"" onclick=""ApplyFilterToDatatable();"">Apply Filter</button>
                        </div>
                    </div>
                    <div class=""col-md-6 float-start"">
                        <div class=""col-lg-4 float-start"">
                            <div class=""form-group"">
                                <label class=""control-label"">Search By : </label>
                                <select class=""form-select"" id=""searchByValue"">
                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc324742", async() => {
                WriteLiteral("Transaction Id");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc325970", async() => {
                WriteLiteral("Created On");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc327194", async() => {
                WriteLiteral("Company");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc328415", async() => {
                WriteLiteral("Description");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc329640", async() => {
                WriteLiteral("Type");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc330858", async() => {
                WriteLiteral("Amount");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_10.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc332080", async() => {
                WriteLiteral("Quantity");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_11.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc333304", async() => {
                WriteLiteral("Total Amount");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc334532", async() => {
                WriteLiteral("Vat(%)");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_13.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc335754", async() => {
                WriteLiteral("Vat Amount");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_14.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc336980", async() => {
                WriteLiteral("Grand Total");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                </select>
                            </div>
                        </div>
                        <div class=""col-lg-4 float-start"">
                            <div class=""form-group ms-2"">
                                <label class=""control-label"">Search By : </label>
                                <input id=""searchedValue"" name=""searchedValue"" class=""form-control"" />
                            </div>
                        </div>
                        <div class=""col-lg-4 float-start"" style=""margin-top:28px !important;"">
                            <button class=""btn btn-theme float-start ms-2 me-2"" onclick=""ApplyFilterToDatatable();"">Search</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""card-body"">
                <h4 class=""card-title text-center"">Account History</h4>
                <hr style=""height:1px;"" class=""text-theme"" />
                <div class=""tab");
            WriteLiteral(@"le-rep-plugin"">
                    <div class=""table-responsive mb-0"" data-pattern=""priority-columns"">
                        <table id=""datatable"" class=""table table-bordered table-striped dt-responsive nowrap"" style=""border-collapse: collapse; border-spacing: 0; width: 100%;"">
                            <thead>
                                <tr>
                                    <th>
                                        Transaction Id
                                    </th>
                                    <th>
                                        Created On
                                    </th>
                                    <th>
                                        Company
                                    </th>
                                    <th>
                                        Description
                                    </th>
                                    <th>
                                        Type
                          ");
            WriteLiteral(@"          </th>
                                    <th>
                                        Amount
                                    </th>
                                    <th>
                                        Quantity
                                    </th>
                                    <th>
                                        Total Amount
                                    </th>
                                    <th>
                                        Vat(%)
                                    </th>
                                    <th>
                                        Vat Amount
                                    </th>
                                    <th>
                                        Grand Total
                                    </th>
                                    <th>
                                        Download Receipt
                                    </th>
                                    <th>

     ");
            WriteLiteral(@"                               </th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id=""EditExpense"" class=""modal"" role=""dialog"" data-bs-keyboard=""false"" data-bs-backdrop=""static""> ");
            WriteLiteral(@"
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"">Edit</h5>
                <button type=""button"" class=""close btn btn-theme"" id=""EditExpenseModalClose"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
            </div>
        </div>
    </div>
</div>
<div id=""UpdatePortalBalanceAmount"" class=""modal"" data-bs-keyboard=""false"" data-bs-backdrop=""static"" role=""dialog""> ");
            WriteLiteral(@"
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"">Portal Balance</h5>
                <button type=""button"" class=""btn btn-theme"" id=""UpdatePortalBalanceAmountClose"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
            </div>
        </div>
    </div>
</div>
<div class=""modal fade"" id=""sendPdfFileModal"" role=""dialog"" data-bs-keyboard=""false"" data-bs-backdrop=""static"" style=""z-index:10000 !important;"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h4 class=""modal-title"" id=""sendPdfFileModal"" style=""font-weight:600;"">Send Pdf Report File</h4>
                <button class=""model-close btn-theme p-2 pt-1 pb-1"" data-dismiss=""modal"" aria-lable=""Close"" type=""button"" id=""close");
            WriteLiteral(@"Modal"" style=""border-radius:4px 4px;"" onclick=""window.location.reload();"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                <div class=""col-md-12 mt-1"" id=""emailSelection"">
                    <div class=""form-group"">
                        <label class=""option-text"">Email : </label>
                        <br />
                        <input type=""email"" id=""SendPdfEmailAddress"" class=""form-control"" placeholder=""Email Address""");
            BeginWriteAttribute("value", " value=\"", 11338, "\"", 11365, 1);
            WriteAttributeValue("", 11346, 
#nullable restore
#line 219 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                                                                                                              Model.emailAddress

#line default
#line hidden
#nullable disable
            , 11346, 19, false);
            EndWriteAttribute();
            WriteLiteral(@" required />
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button class=""btn btn-theme"" type=""button"" onclick=""SendPdfFile()"">Send</button>
            </div>
        </div>
    </div>
</div>
<div class=""modal fade"" id=""sendExcelFileModal"" role=""dialog"" data-bs-keyboard=""false"" data-bs-backdrop=""static"" style=""z-index:10000 !important;"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h4 class=""modal-title"" id=""sendExcelFileModal"" style=""font-weight:600;"">Send Excel Report File</h4>
                <button class=""model-close btn-theme p-2 pt-1 pb-1"" data-dismiss=""modal"" aria-lable=""Close"" type=""button"" id=""closeModal"" style=""border-radius:4px 4px;"" onclick=""window.location.reload();"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">");
            WriteLiteral(@"
                <div class=""col-md-12 mt-1"" id=""emailSelection"">
                    <div class=""form-group"">
                        <label class=""option-text"">Email : </label>
                        <br />
                        <input type=""email"" id=""SendExcelEmailAddress"" class=""form-control"" placeholder=""Email Address""");
            BeginWriteAttribute("value", " value=\"", 12724, "\"", 12751, 1);
            WriteAttributeValue("", 12732, 
#nullable restore
#line 243 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                                                                                                                Model.emailAddress

#line default
#line hidden
#nullable disable
            , 12732, 19, false);
            EndWriteAttribute();
            WriteLiteral(@" required />
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button class=""btn btn-theme"" type=""button"" onclick=""SendExcelFile()"">Send</button>
            </div>
        </div>
    </div>
</div>
<!-- Responsive examples -->
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc347069", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc348134", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<!-- Sweet Alerts-->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc349227", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "0135b3a8d49b58edea07d4928587ae94b4d046701735a8af9822ea6f0259dbc350292", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script>\r\n    function DownloadDocuments() {\r\n        var url = \"");
            Write(
#nullable restore
#line 262 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                    Url.Action("DownloadedDocuments", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
        window.location.href = url;
    };

    function ExportAsPdf() {
        var fromDate = $(""#FromDate"").val();
        var toDate = $(""#ToDate"").val();
        if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(fromDate) || !/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(toDate)) {
            alert(""Please Enter Valid Date Format for From and To Date."");
            if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(fromDate)) {
                $(""#FromDate"").datepicker(""setDate"", 0);
                $(""#FromDate"").focus();
            }
            else if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(toDate)) {
                $(""#ToDate"").datepicker(""setDate"", 0);
                $(""#ToDate"").focus();
            }
            return false;
        }
        else{
            $mymodal = $(""#sendPdfFileModal"");
            $mymodal.find(""div.modal-body"");
            $mymodal.modal(""show"");
        }
    };

    function SendPdfFile() {
        var fromDate = $(""#FromDate"").val();
        var toDate = $(""#ToDate"").val(");
            WriteLiteral(@");
        // var emailAddress = $(""#SendPdfEmailAddress"").val();
        // var today = new Date();
        // var dd = String(today.getDate() + 1).padStart(2, '0');
        // var mm = String(today.getMonth() + 1).padStart(2, '0');
        // var yyyy = today.getFullYear();

        // const validateEmail = (email) => {
        //     return email.match(
        //         /^(([^<>()[\]\\.,;:\s");
            WriteLiteral("@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s");
            WriteLiteral("@\\\"]+)*)|(\\\".+\\\"))");
            WriteLiteral(@"@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
        //     );
        // };

        // today = yyyy + '-' + mm + '-' + dd;
        // if (validateEmail(emailAddress)) {
        //     if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(fromDate) || !/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(toDate)) {
        //         alert(""Please Enter Valid Date Format for From and To Date."");
        //         if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(fromDate)) {
        //             $(""#FromDate"").datepicker(""setDate"", 0);
        //             $(""#FromDate"").focus();
        //         }
        //         else if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(toDate)) {
        //             $(""#ToDate"").datepicker(""setDate"", 0);
        //             $(""#ToDate"").focus();
        //         }
        //         return false;
        //     }
        //     else {
        //         $.ajax({
        //             url: '");
            Write(
#nullable restore
#line 319 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                              Url.Action("SavePDFDownloadDocumentList", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"',
        //             type: 'POST',
        //             data: { 'fromDate': fromDate, 'toDate': toDate, ""emailAddress"":emailAddress },
        //             success: function (result) {
        //                 var fileName = result;
        //                 if (result != """") {
        //                     $mymodal = $(""#sendPdfFileModal"");
        //                     $mymodal.find(""div.modal-body"");
        //                     $mymodal.modal(""hide"");

        //                     const swalWithBootstrapButtons = Swal.mixin({
        //                         customClass: {
        //                             confirmButton: 'ms-3 btn btn-success',
        //                             cancelButton: 'btn btn-danger'
        //                         },
        //                         buttonsStyling: false
        //                     })

        //                     swalWithBootstrapButtons.fire({
        //                         title: 'Success.',
     ");
            WriteLiteral(@"   //                         html: ""<b>We are generating your PDF file for selected Range and will send it on your email address within 5-10 min.</b>"",
        //                         icon: 'success'
        //                     }).then((result) => {
        //                         $('#FromDate').val("""");
        //                         $('#ToDate').val("""");

        //                         $.ajax({
        //                             url: '");
            Write(
#nullable restore
#line 346 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                              Url.Action("ExportPdfEmail", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"',
        //                             type: 'POST',
        //                             data: { 'FromDate': fromDate, 'ToDate': toDate, ""emailAddress"": emailAddress, ""fileName"": fileName }
        //                         });
        //                     });
        //                 }
        //             }
        //         });
        //     }
        // }
        // else {
        //     alert(""Please provide valid Email address."");
        //     return false;
        // }
        var url = """);
            Write(
#nullable restore
#line 360 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                    Url.Action("ExportAsPdf","AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
        url = url + ""?FromDate="" + fromDate + ""&ToDate="" + toDate;
        window.open(url,""_blank"");
    }

    function ExportAsExcel() {
        var fromDate = $(""#FromDate"").val();
        var toDate = $(""#ToDate"").val();
        var today = new Date();
        var dd = String(today.getDate() + 1).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
        var yyyy = today.getFullYear();

        today = yyyy + '-' + mm + '-' + dd;

        if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(fromDate) || !/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(toDate)) {
            alert(""Please Enter Valid Date Format for From and To Date."");
            if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(fromDate)) {
                $(""#FromDate"").datepicker(""setDate"", 0);
                $(""#FromDate"").focus();
            }
            else if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(toDate)) {
                $(""#ToDate"").datepicker(""setDate"", 0);
                $(""#ToDate"").focus();");
            WriteLiteral(@"
            }
            return false;
        }
        else {
            $mymodal = $(""#sendExcelFileModal"");
            $mymodal.find(""div.modal-body"");
            $mymodal.modal(""show"");
        }
    };

    function SendExcelFile() {
        var fromDate = $(""#FromDate"").val();
        var toDate = $(""#ToDate"").val();
        // var emailAddress = $(""#SendExcelEmailAddress"").val();
        // var today = new Date();
        // var dd = String(today.getDate() + 1).padStart(2, '0');
        // var mm = String(today.getMonth() + 1).padStart(2, '0');
        // var yyyy = today.getFullYear();

        // const validateEmail = (email) => {
        //     return email.match(
        //         /^(([^<>()[\]\\.,;:\s");
            WriteLiteral("@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s");
            WriteLiteral("@\\\"]+)*)|(\\\".+\\\"))");
            WriteLiteral(@"@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
        //     );
        // };

        // today = yyyy + '-' + mm + '-' + dd;
        // if (validateEmail(emailAddress)) {
        //     if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(fromDate) || !/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(toDate)) {
        //         alert(""Please Enter Valid Date Format for From and To Date."");
        //         if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(fromDate)) {
        //             $(""#FromDate"").datepicker(""setDate"", 0);
        //             $(""#FromDate"").focus();
        //         }
        //         else if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(toDate)) {
        //             $(""#ToDate"").datepicker(""setDate"", 0);
        //             $(""#ToDate"").focus();
        //         }
        //         return false;
        //     }
        //     else {
        //         $.ajax({
        //             url: '");
            Write(
#nullable restore
#line 425 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                              Url.Action("SaveExcelDownloadDocumentList", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"',
        //             type: 'POST',
        //             data: { 'fromDate': fromDate, 'toDate': toDate, ""emailAddress"": emailAddress },
        //             success: function (result) {
        //                 var fileName = result;
        //                 if (result != """") {
        //                     $mymodal = $(""#sendExcelFileModal"");
        //                     $mymodal.find(""div.modal-body"");
        //                     $mymodal.modal(""hide"");

        //                     const swalWithBootstrapButtons = Swal.mixin({
        //                         customClass: {
        //                             confirmButton: 'ms-3 btn btn-success',
        //                             cancelButton: 'btn btn-danger'
        //                         },
        //                         buttonsStyling: false
        //                     })

        //                     swalWithBootstrapButtons.fire({
        //                         title: 'Success.',
  ");
            WriteLiteral(@"      //                         html: ""<b>We are generating your Excel file for selected Range and will send it on your email address within 5-10 min.</b>"",
        //                         icon: 'success'
        //                     }).then((result) => {
        //                         $('#FromDate').val("""");
        //                         $('#ToDate').val("""");

        //                         $.ajax({
        //                             url: '");
            Write(
#nullable restore
#line 452 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                              Url.Action("ExportAsExcelEmail", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"',
        //                             type: 'POST',
        //                             data: { 'FromDate': fromDate, 'ToDate': toDate, ""emailAddress"": emailAddress, ""fileName"": fileName }
        //                         });
        //                     });
        //                 }
        //             }
        //         });
        //     }
        // }
        // else {
        //     alert(""Please provide valid Email address."");
        //     return false;
        // }
        var url = """);
            Write(
#nullable restore
#line 466 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                    Url.Action("ExportAsExcel", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
        url = url + ""?FromDate="" + fromDate + ""&ToDate="" + toDate;
        window.open(url, ""_blank"");
    }

    $(document).ready(function () {
        $(""#loader"").hide();
        var message = $(""#message"").val();
        if(message != null && message != """"){
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                },
                buttonsStyling: false
            })

            swalWithBootstrapButtons.fire({
                title: 'Error.',
                html: message,
                icon: 'error'
            }).then((result) => {
                var url = """);
            Write(
#nullable restore
#line 488 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                            Url.Action("GetHistory","AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                window.location.href = url;
            });
        }
    });
</script>
<script>
    $(function () {
        $(""#FromDate"").datepicker({
            format: 'yyyy-mm-dd',
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate() + 1);
            $('#ToDate').datepicker('setStartDate', minDate);
        });

        $(""#ToDate"").datepicker({
            format: 'yyyy-mm-dd',
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate() - 1);
            $('#FromDate').datepicker('setEndDate', minDate);
        });
    });
</script>
<script>
  ");
            WriteLiteral(@"  $(""#EditExpenseModalClose"").on('click', function () {
        window.location.reload();
    });

    $(""#UpdatePortalBalanceAmountClose"").on(""click"", function () {
        window.location.reload();
    });
</script>
<script>
    function UpdateExpenses(Id,transactionId) {
        var Module = $(""#Module"").val();
        
        $.ajax({
            url: """);
            Write(
#nullable restore
#line 535 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                   Url.Action("GetExpenseModification","AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
            method: ""GET"",
            data: { ""Id"": Id ,""TransactionId"":transactionId},
            success: function (response) {
                if (response != """" && response != null) {
                    const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                            confirmButton: 'ms-3 btn btn-success',
                            cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
                    })

                    swalWithBootstrapButtons.fire({
                        title: 'Error.',
                        html: response,
                        icon: 'error'
                    }).then((result) => {
                        window.location.reload();
                    });
                }
                else {
                    $.ajax({
                        url: """);
            Write(
#nullable restore
#line 558 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                               Url.Action("UpdateExpenses","AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Id"": Id, ""name"": Module, ""ActionName"": ""GetHistory"", ""Cnt"": ""AccountManagement"" },
                        success: function (response) {
                            $mymodal = $(""#EditExpense"");
                            $mymodal.find(""div.modal-body"").html(response);
                            $mymodal.modal(""show"");
                        }
                    });
                }
            }
        });
    }
</script>
<script>
    function RemoveExpenses(Id, Amount, companyId) {
        event.preventDefault();
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: 'ms-3 btn btn-success',
                cancelButton: 'btn btn-danger'
            },
            buttonsStyling: false
        })

        swalWithBootstrapButtons.fire({
            title: 'Are you sure?',
            text: ""You won't be able to revert this!"",
            icon: ");
            WriteLiteral(@"'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
            reverseButtons: true,
            showConfirmButton: true,
        }).then((result) => {
            if (result.isConfirmed) {
                $(""#loader"").show();
                $.ajax({
                    url: """);
            Write(
#nullable restore
#line 596 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                           Url.Action("Delete", "PortalBalanceExpense")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Id"": Id, ""CompanyId"": companyId, ""Amount"": Amount },
                    success: function (response) {
                        $(""#loader"").hide();
                        if (response.startsWith(""Selected Expense Deleted Successfully."")) {
                            swalWithBootstrapButtons.fire({
                                title: 'Deleted.',
                                text: ""Selected Expense Deleted Successfully..!!"",
                                icon: 'success'
                            }).then((result) => {
                                window.location.reload();
                            });
                        }
                        else{
                            swalWithBootstrapButtons.fire({
                                title: 'Error.',
                                html: response,
                                icon: 'error'
                            }).then((result) => {
    ");
            WriteLiteral(@"                            window.location.reload();
                            });
                        }
                    }
                });
            }
            else if (
                result.dismiss === Swal.DismissReason.cancel
            ) {
                $(""#loader"").hide();
                swalWithBootstrapButtons.fire(
                    'Cancelled',
                    'Cancled by User..!! :)',
                    'error'
                )
            }
        });
    };

    function UpdatePayment(Id, companyId,transactionId) {
        var module = $(""#Module"").val();
        $.ajax({
            url: """);
            Write(
#nullable restore
#line 638 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                   Url.Action("GetTransactionModification","AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
            method: ""GET"",
            data: { ""Id"": Id, ""CompanyId"": companyId, ""TransactionId"": transactionId },
            success: function (response) {
                if (response != """" && response != null) {
                    const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                            confirmButton: 'ms-3 btn btn-success',
                            cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
                    })

                    swalWithBootstrapButtons.fire({
                        title: 'Error.',
                        html: response,
                        icon: 'error'
                    }).then((result) => {
                        window.location.reload();
                    });
                }
                else {
                    $.ajax({
                        url: """);
            Write(
#nullable restore
#line 661 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                               Url.Action("GetPaymentDetails","PortalBalanceExpense")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Id"": Id, ""CompanyId"": companyId, ""ActionName"": ""GetHistory"", ""Cnt"": ""AccountManagement"" },
                        success: function (response) {
                            $mymodal = $(""#UpdatePortalBalanceAmount"");
                            $mymodal.find(""div.modal-body"").html(response);
                            $mymodal.modal(""show"");
                        }
                    });
                }
            }
        });
    };
</script>
<script>
    function RemovePayment(Id, companyId, Amount) {
        event.preventDefault();
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: 'ms-3 btn btn-success',
                cancelButton: 'btn btn-danger'
            },
            buttonsStyling: false
        })

        swalWithBootstrapButtons.fire({
            title: 'Are you sure?',
            text: ""You won't be able to revert this!");
            WriteLiteral(@""",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
            reverseButtons: true,
            showConfirmButton: true,
        }).then((result) => {
            if (result.isConfirmed) {
                $(""#loader"").show();
                $.ajax({
                    url: """);
            Write(
#nullable restore
#line 699 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                           Url.Action("DeletePaymentDetails", "PortalBalanceExpense")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Id"": Id, ""CompanyId"": companyId, ""Amount"": Amount },
                    success: function (response) {
                        $(""#loader"").hide();
                        if (response.startsWith(""Selected Payment Transaction Deleted Successfully."")) {
                            swalWithBootstrapButtons.fire({
                                title: 'Deleted.',
                                text: ""Selected Payment Transaction Deleted Successfully..!!"",
                                icon: 'success'
                            }).then((result) => {
                                window.location.reload();
                            });
                        }
                        else{
                            swalWithBootstrapButtons.fire({
                                title: 'Error.',
                                html: response,
                                icon: 'error'
                            }).");
            WriteLiteral(@"then((result) => {
                                window.location.reload();
                            });
                        }
                    }
                });
            }
            else if (
                result.dismiss === Swal.DismissReason.cancel
            ) {
                $(""#loader"").hide();
                swalWithBootstrapButtons.fire(
                    'Cancelled',
                    'Cancled by User..!! :)',
                    'error'
                )
            }
        });
    }
</script>
<script>

    $(document).ready(function () {
        var indexValue = $(""#IndexValue"").val();
        if (indexValue == """") {
            indexValue = 0;
        }
        var cnt = 0;
        var pageNumber = 0;
        var flag = false;
        var url = """);
            Write(
#nullable restore
#line 748 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                    Url.Action("GetDataTableData","AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
        url = url + ""?page="";

        var table = $(""#datatable"").DataTable({
            ""processing"": true,
            ""serverSide"": true,
            ""filter"": true,
            ""ajax"": {
                ""type"": ""post"",
                ""datatype"": ""json"",
                ""data"": function () {
                    var info = $('#datatable').DataTable().page.info();
                    $('#datatable').DataTable().ajax.url(
                        url + (info.page + 1)
                    );
                }
            },
            ""responsive"": true,
            ""deferRender"": true,
            ""columns"": [
                { ""data"": ""transactionId"", ""name"": ""Transaction Id"" },
                { ""data"": ""date"", ""name"": ""Created On"" },
                { ""data"": ""companyName"", ""name"": ""Company"" },
                {
                    ""data"": function (data, full, meta) {
                        var desc = data.description;
                        if (data.description.length > ");
            WriteLiteral(@"40) {
                            desc = desc.substring(0, 40);
                            desc = desc + ""...."";
                            return '<span title=""' + data.description + '"" class=""text-wrap"">' + data.description + '</span>';
                        }
                        else {
                            return '<span title=""' + data.description + '"" class=""text-wrap"">' + data.description + '</span>';
                        }
                        
                    },
                    ""name"": ""Description""
                },
                { ""data"": ""transactionType"", ""name"": ""Type"" },
                { ""data"": ""amount"", ""name"": ""Amount"" },
                { ""data"": ""quantity"", ""name"": ""Quantity"" },
                {
                    ""data"": ""totalAmount"",
                    ""name"": ""Total Amount""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.transactionType == ""Credit"") {
");
            WriteLiteral(@"                            return '<span>----</span>';
                        }
                        else {
                            return '<span>' + data.vat + '</span>';
                        }
                    },
                    ""name"": ""Vat(%)""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.transactionType == ""Credit"") {
                            return '<span>----</span>';
                        }
                        else {
                            return '<span>' + data.vatAmount + '</span>';
                        }
                    },
                    ""name"": ""Vat Amount""
                },
                {
                    ""data"": ""grandTotal"",
                    ""name"": ""Grand Total""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.expenseReceiptId != 0 && data.transactionType =");
            WriteLiteral("= \"Debit\") {\r\n                            var url = \"");
            Write(
#nullable restore
#line 822 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                        Url.Action("DownloadExpenseReceipt","PortalBalanceExpense")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                            return '<form action=""' + url + '"" method=""get""> <input type=""hidden"" value= ""' + data.expenseReceiptId + '"" name=""ReceiptId"" /><input type=""submit"" value=""Download"" name= ""Download Receipt"" class=""btn btn-theme"" /></form>';
                        }
                        else if (data.expenseReceiptId != 0 && data.transactionType == ""Credit"") {
                            var url = """);
            Write(
#nullable restore
#line 826 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                        Url.Action("DownloadPaymentReceipt","CompanyAccount")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                            return '<form action=""' + url + '"" method=""get"" target=""_blank""> <input type=""hidden"" value= ""' + data.expenseReceiptId + '"" name=""Id"" /><input type=""submit"" value=""Download"" name= ""Download Receipt"" class=""btn btn-theme"" /></form>';
                        }
                        else {
                            return '<span>----</span>';
                        }
                    },
                    ""name"": ""Download Receipt""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.transactionType == ""Credit"") {
                            var editButton = '<span class=""btn btn-theme Update"" onclick=""UpdatePayment(' + data.id + ',' + data.companyId + "",'"" + data.transactionId + ""'"" + ')""><i class=""fas fa-edit""></i></span>';
                            var deleteButton = '<span class=""btn btn-theme ms-2 Delete"" onclick=""RemovePayment(' + data.id + ',' + data.companyId + ',' + data.gra");
            WriteLiteral(@"ndTotal + ')""><i class=""fas fa-trash""></i></span>';
                            return editButton + deleteButton;
                        }
                        else if (data.transactionType == ""Debit"") {
                            var editButton = '<span class=""btn btn-theme Update"" onclick=""UpdateExpenses(' + data.id + "",'"" + data.transactionId + ""'"" + ')""><i class=""fas fa-edit""></i></span>';
                            var deleteButton = '<span class=""btn btn-theme ms-2 Delete"" onclick=""RemoveExpenses(' + data.id + ',' + data.grandTotal + ',' + data.companyId + ')""><i class=""fas fa-trash""></i></span>';
                            return editButton + deleteButton;
                        }
                    },
                    ""name"": """"
                },
            ],
            ""initComplete"": function (settings, json) {
                $(""#loader"").show();
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();
         ");
            WriteLiteral(@"       var accountManagementView = sessionStorage.getItem(""AccountManagement_View"");
                var accountManagementUpdate = sessionStorage.getItem(""AccountManagement_Update"");
                var accountManagementDelete = sessionStorage.getItem(""AccountManagement_Delete"");

                if(accountManagementView != """" && accountManagementView != ""null"" && accountManagementView != null && accountManagementView !=""undefined""){
                    $("".Details"").show();
                }
                
                if (accountManagementUpdate != """" && accountManagementUpdate != ""null"" && accountManagementUpdate != null && accountManagementUpdate != ""undefined"") {
                    $("".Update"").show();
                }

                if (accountManagementDelete != """" && accountManagementDelete != ""null"" && accountManagementDelete != null && accountManagementDelete != ""undefined"") {
                    $("".Delete"").show();
                }

                if ((accountManagementV");
            WriteLiteral(@"iew == """" || accountManagementView == ""null"" || accountManagementView == null || accountManagementView == ""undefined"") &&
                    (accountManagementUpdate == """" || accountManagementUpdate == ""null"" || accountManagementUpdate == null || accountManagementUpdate == ""undefined"") && 
                    (accountManagementDelete == """" || accountManagementDelete == ""null"" || accountManagementDelete == null || accountManagementDelete == ""undefined"")) 
                {
                    var module = $(""#Module"").val();
                    $.ajax({
                        url: """);
            Write(
#nullable restore
#line 878 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                               Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral("\",\r\n                        method: \"GET\",\r\n                        data: { \"Module\": \"AccountManagement\" },\r\n                        success: function (RoleResponse) {\r\n                            $.ajax({\r\n                                url: \"");
            Write(
#nullable restore
#line 883 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                       Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                method: ""GET"",
                                data: { ""Module"": ""AccountManagement"" },
                                success: function (UserResponse) {
                                    if (UserResponse.length > 0) {
                                        for (let i = 0; i < UserResponse.length; i++) {
                                            $(""#"" + UserResponse[i]).show();
                                            if (UserResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (UserResponse[i] == ""Update"") {
                                                $(""."" + UserResponse[i]).show();
                                            }
                                            if (UserResponse[i] == ""Delete"") {
                                                $("".Delete"").show();
                                        ");
            WriteLiteral(@"    }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                    else if (RoleResponse.length > 0) {
                                        for (let i = 0; i < RoleResponse.length; i++) {
                                            $(""#"" + RoleResponse[i]).show();
                                            if (RoleResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (RoleResponse[i] == ""Update"") {
                                                $(""."" + RoleResponse[i]).show();
                                            }
                                            if (RoleResponse[i] == ""Delete"") {
");
            WriteLiteral(@"                                                $("".Delete"").show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                }
                            })
                        }
                    });
                }
                
                $(""#loader"").hide();
            },
            ""drawCallback"": function (settings) {
                $(""#loader"").show();
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();
                var accountManagementView = sessionStorage.getItem(""AccountManagement_View"");
                var accountManagementUpdate = sessionStorage.getItem(""AccountManagement_Update"");
       ");
            WriteLiteral(@"         var accountManagementDelete = sessionStorage.getItem(""AccountManagement_Delete"");

                if (accountManagementView != """" && accountManagementView != ""null"" && accountManagementView != null && accountManagementView != ""undefined"") {
                    $("".Details"").show();
                }

                if (accountManagementUpdate != """" && accountManagementUpdate != ""null"" && accountManagementUpdate != null && accountManagementUpdate != ""undefined"") {
                    $("".Update"").show();
                }

                if (accountManagementDelete != """" && accountManagementDelete != ""null"" && accountManagementDelete != null && accountManagementDelete != ""undefined"") {
                    $("".Delete"").show();
                }

                if ((accountManagementView == """" || accountManagementView == ""null"" || accountManagementView == null || accountManagementView == ""undefined"") &&
                    (accountManagementUpdate == """" || accountManagementUpdate == """);
            WriteLiteral(@"null"" || accountManagementUpdate == null || accountManagementUpdate == ""undefined"") &&
                    (accountManagementDelete == """" || accountManagementDelete == ""null"" || accountManagementDelete == null || accountManagementDelete == ""undefined"")) {
                    var module = $(""#Module"").val();
                    $.ajax({
                        url: """);
            Write(
#nullable restore
#line 955 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                               Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral("\",\r\n                        method: \"GET\",\r\n                        data: { \"Module\": \"AccountManagement\" },\r\n                        success: function (RoleResponse) {\r\n                            $.ajax({\r\n                                url: \"");
            Write(
#nullable restore
#line 960 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                       Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                method: ""GET"",
                                data: { ""Module"": ""AccountManagement"" },
                                success: function (UserResponse) {
                                    if (UserResponse.length > 0) {
                                        for (let i = 0; i < UserResponse.length; i++) {
                                            $(""#"" + UserResponse[i]).show();
                                            if (UserResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (UserResponse[i] == ""Update"") {
                                                $(""."" + UserResponse[i]).show();
                                            }
                                            if (UserResponse[i] == ""Delete"") {
                                                $("".Delete"").show();
                                        ");
            WriteLiteral(@"    }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                    else if (RoleResponse.length > 0) {
                                        for (let i = 0; i < RoleResponse.length; i++) {
                                            $(""#"" + RoleResponse[i]).show();
                                            if (RoleResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (RoleResponse[i] == ""Update"") {
                                                $(""."" + RoleResponse[i]).show();
                                            }
                                            if (RoleResponse[i] == ""Delete"") {
");
            WriteLiteral(@"                                                $("".Delete"").show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                }
                            })
                        }
                    });
                }

                $(""#loader"").hide();
            },
            ""language"": {
                'processing': '<div class=""spinner-2""><div class=""center-div-2""><div class=""loader-circle-1""></div></div></div>'
            },
            paging: true,
            pagingType: 'simple_numbers',
            ""bInfo"": true,
            ordering: false,
            ""aLengthMenu"": [20, 30, 50],
            //""aLengthMenu"": [[10, 20, 30, -1], [10, 20, 30, ""All""]],
       ");
            WriteLiteral(@"     searching: false,
            dom: ""<'row'<'col-sm-3'l><'col-sm-3'f><'col-sm-6'p>>"" +
                ""<'row'<'col-sm-12'tr>>"" +
                ""<'row'<'col-sm-5'i><'col-sm-7'p>>"",
        })

        $('#datatable tbody').on('click', 'td.dtr-control', function () {
            var tr = $(this).closest('tr');
            var row = table.row(tr);
            if (!tr.hasClass(""shown"")) {
                row.child.show();
                tr.addClass('shown');
                $(""#loader"").show();
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();
                var accountManagementView = sessionStorage.getItem(""AccountManagement_View"");
                var accountManagementUpdate = sessionStorage.getItem(""AccountManagement_Update"");
                var accountManagementDelete = sessionStorage.getItem(""AccountManagement_Delete"");

                if (accountManagementView != """" && accountManagementView != ""null"" && accountMana");
            WriteLiteral(@"gementView != null && accountManagementView != ""undefined"") {
                    $("".Details"").show();
                }

                if (accountManagementUpdate != """" && accountManagementUpdate != ""null"" && accountManagementUpdate != null && accountManagementUpdate != ""undefined"") {
                    $("".Update"").show();
                }

                if (accountManagementDelete != """" && accountManagementDelete != ""null"" && accountManagementDelete != null && accountManagementDelete != ""undefined"") {
                    $("".Delete"").show();
                }

                if ((accountManagementView == """" || accountManagementView == ""null"" || accountManagementView == null || accountManagementView == ""undefined"") &&
                    (accountManagementUpdate == """" || accountManagementUpdate == ""null"" || accountManagementUpdate == null || accountManagementUpdate == ""undefined"") &&
                    (accountManagementDelete == """" || accountManagementDelete == ""null"" || accountManag");
            WriteLiteral("ementDelete == null || accountManagementDelete == \"undefined\")) {\r\n                    var module = $(\"#Module\").val();\r\n                    $.ajax({\r\n                        url: \"");
            Write(
#nullable restore
#line 1052 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                               Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral("\",\r\n                        method: \"GET\",\r\n                        data: { \"Module\": \"AccountManagement\" },\r\n                        success: function (RoleResponse) {\r\n                            $.ajax({\r\n                                url: \"");
            Write(
#nullable restore
#line 1057 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                       Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                method: ""GET"",
                                data: { ""Module"": ""AccountManagement"" },
                                success: function (UserResponse) {
                                    if (UserResponse.length > 0) {
                                        for (let i = 0; i < UserResponse.length; i++) {
                                            $(""#"" + UserResponse[i]).show();
                                            if (UserResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (UserResponse[i] == ""Update"") {
                                                $(""."" + UserResponse[i]).show();
                                            }
                                            if (UserResponse[i] == ""Delete"") {
                                                $("".Delete"").show();
                                        ");
            WriteLiteral(@"    }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                    else if (RoleResponse.length > 0) {
                                        for (let i = 0; i < RoleResponse.length; i++) {
                                            $(""#"" + RoleResponse[i]).show();
                                            if (RoleResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (RoleResponse[i] == ""Update"") {
                                                $(""."" + RoleResponse[i]).show();
                                            }
                                            if (RoleResponse[i] == ""Delete"") {
");
            WriteLiteral(@"                                                $("".Delete"").show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                }
                            })
                        }
                    });
                }

                $(""#loader"").hide();
            }
            else {
                row.child.hide();
                tr.removeClass('shown');
            }
        });
    });

</script>
<script>
    function ApplyFilterToDatatable() {
        var sortingBy = $(""#sortingBy"").val();
        var sortingOrder = $(""#sortingDirection"").val();

        var searchedValue = $(""#searchedValue"").val();
        var searchByValue = $(""#searchByValue"").val();

  ");
            WriteLiteral("      var url = \"");
            Write(
#nullable restore
#line 1119 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                    Url.Action("GetFilterwiseDataTable","AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
        url = url + ""?sortColumn="" + sortingBy + ""&sortColumnDirection="" + sortingOrder;
        if (searchByValue != """" && searchedValue != """") {
            url = url + ""&searchBy="" + searchByValue + ""&searchedValue="" + searchedValue;
        }

        if ($.fn.dataTable.isDataTable('#datatable')) {
            $('#datatable').DataTable().destroy();
            $('#datatable').empty();

            var table = $(""#datatable"").DataTable({
                ""processing"": true,
                ""serverSide"": true,
                ""filter"": true,
                ""ajax"": {
                    ""type"": ""post"",
                    ""datatype"": ""json"",
                    ""data"": function () {
                        $('#datatable').DataTable().ajax.url(
                            url
                        );
                    }
                },
                ""responsive"": true,
                ""deferRender"": true,
                ""columns"": [
                    { ""data"": ""transac");
            WriteLiteral(@"tionId"", sTitle: ""Transaction Id"" },
                    { ""data"": ""date"", sTitle: ""Created On"" },
                    { ""data"": ""companyName"", sTitle: ""Company"" },
                    {
                        ""data"": function (data, full, meta) {
                            var desc = data.description;
                            if (data.description.length > 40) {
                                desc = desc.substring(0, 40);
                                desc = desc + ""...."";
                                return '<span title=""' + data.description + '"" class=""text-wrap"">' + data.description + '</span>';
                            }
                            else {
                                return '<span title=""' + data.description + '"" class=""text-wrap"">' + data.description + '</span>';
                            }

                        },
                        sTitle: ""Description""
                    },
                    { ""data"": ""transactionType"", sTitle: ""Type"" },");
            WriteLiteral(@"
                    { ""data"": ""amount"", sTitle: ""Amount"" },
                    { ""data"": ""quantity"", sTitle: ""Quantity"" },
                    {
                        ""data"": function (data, full, meta) {
                            return '<span>' + data.totalAmount + '</span>';
                        },
                        sTitle: ""Total Amount""
                    },
                    {
                        ""data"": function (data, full, meta) {
                            if (data.transactionType == ""Credit"") {
                                return '<span>----</span>';
                            }
                            else {
                                return '<span>' + data.vat + '</span>';
                            }
                        },
                        sTitle: ""Vat(%)""
                    },
                    {
                        ""data"": function (data, full, meta) {
                            if (data.transactionType == ""Credit"") ");
            WriteLiteral(@"{
                                return '<span>----</span>';
                            }
                            else {
                                return '<span>' + data.vatAmount + '</span>';
                            }
                        },
                        sTitle: ""Vat Amount""
                    },
                    {
                        ""data"": function (data, full, meta) {
                            return '<span>' + data.grandTotal + '</span>';
                        },
                        sTitle: ""Grand Total""
                    },
                    {
                        ""data"": function (data, full, meta) {
                            if (data.expenseReceiptId != 0 && data.transactionType == ""Debit"") {
                                var url = """);
            Write(
#nullable restore
#line 1203 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                            Url.Action("DownloadExpenseReceipt","PortalBalanceExpense")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                                return '<form action=""' + url + '"" method=""get""> <input type=""hidden"" value= ""' + data.expenseReceiptId + '"" name=""ReceiptId"" /><input type=""submit"" value=""Download"" name= ""Download Receipt"" class=""btn btn-theme"" /></form>';
                            }
                            else if (data.expenseReceiptId != 0 && data.transactionType == ""Credit"") {
                                var url = """);
            Write(
#nullable restore
#line 1207 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                            Url.Action("DownloadPaymentReceipt","CompanyAccount")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                                return '<form action=""' + url + '"" method=""get"" target=""_blank""> <input type=""hidden"" value= ""' + data.expenseReceiptId + '"" name=""Id"" /><input type=""submit"" value=""Download"" name= ""Download Receipt"" class=""btn btn-theme"" /></form>';
                            }
                            else {
                                return '<span>----</span>';
                            }
                        },
                        sTitle: ""Download Receipt""
                    },
                    {
                        ""data"": function (data, full, meta) {
                            if (data.transactionType == ""Credit"") {
                                var editButton = '<span class=""btn btn-theme Update"" onclick=""UpdatePayment(' + data.id + ',' + data.companyId + "",'"" + data.transactionId + ""'"" + ')""><i class=""fas fa-edit""></i></span>';
                                var deleteButton = '<span class=""btn btn-theme ms-2 Delete"" onclick=""RemovePayment");
            WriteLiteral(@"(' + data.id + ',' + data.companyId + ',' + data.grandTotal + ')""><i class=""fas fa-trash""></i></span>';
                                return editButton + deleteButton;
                            }
                            else if (data.transactionType == ""Debit"") {
                                var editButton = '<span class=""btn btn-theme Update"" onclick=""UpdateExpenses(' + data.id + "",'"" + data.transactionId + ""'"" + ')""><i class=""fas fa-edit""></i></span>';
                                var deleteButton = '<span class=""btn btn-theme ms-2 Delete"" onclick=""RemoveExpenses(' + data.id + ',' + data.grandTotal + ',' + data.companyId + ')""><i class=""fas fa-trash""></i></span>';
                                return editButton + deleteButton;
                            }
                        },
                        sTitle: """"
                    },
                ],
                ""initComplete"": function (settings, json) {
                    $(""#loader"").show();
                    ");
            WriteLiteral(@"$("".Update"").hide();
                    $("".Delete"").hide();
                    $("".Details"").hide();
                    var accountManagementView = sessionStorage.getItem(""AccountManagement_View"");
                    var accountManagementUpdate = sessionStorage.getItem(""AccountManagement_Update"");
                    var accountManagementDelete = sessionStorage.getItem(""AccountManagement_Delete"");

                    if (accountManagementView != """" && accountManagementView != ""null"" && accountManagementView != null && accountManagementView != ""undefined"") {
                        $("".Details"").show();
                    }

                    if (accountManagementUpdate != """" && accountManagementUpdate != ""null"" && accountManagementUpdate != null && accountManagementUpdate != ""undefined"") {
                        $("".Update"").show();
                    }

                    if (accountManagementDelete != """" && accountManagementDelete != ""null"" && accountManagementDelete != null && ac");
            WriteLiteral(@"countManagementDelete != ""undefined"") {
                        $("".Delete"").show();
                    }

                    if ((accountManagementView == """" || accountManagementView == ""null"" || accountManagementView == null || accountManagementView == ""undefined"") &&
                        (accountManagementUpdate == """" || accountManagementUpdate == ""null"" || accountManagementUpdate == null || accountManagementUpdate == ""undefined"") &&
                        (accountManagementDelete == """" || accountManagementDelete == ""null"" || accountManagementDelete == null || accountManagementDelete == ""undefined"")) {
                        var module = $(""#Module"").val();
                        $.ajax({
                            url: """);
            Write(
#nullable restore
#line 1258 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                   Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                            method: ""GET"",
                            data: { ""Module"": ""AccountManagement"" },
                            success: function (RoleResponse) {
                                $.ajax({
                                    url: """);
            Write(
#nullable restore
#line 1263 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                           Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                    method: ""GET"",
                                    data: { ""Module"": ""AccountManagement"" },
                                    success: function (UserResponse) {
                                        if (UserResponse.length > 0) {
                                            for (let i = 0; i < UserResponse.length; i++) {
                                                $(""#"" + UserResponse[i]).show();
                                                if (UserResponse[i] == ""View"") {
                                                    $("".Details"").show();
                                                }
                                                if (UserResponse[i] == ""Update"") {
                                                    $(""."" + UserResponse[i]).show();
                                                }
                                                if (UserResponse[i] == ""Delete"") {
                                                    $("".De");
            WriteLiteral(@"lete"").show();
                                                }
                                            }
                                            $($.fn.dataTable.tables(true)).DataTable()
                                                .columns.adjust();
                                            $(""#loader"").hide();
                                        }
                                        else if (RoleResponse.length > 0) {
                                            for (let i = 0; i < RoleResponse.length; i++) {
                                                $(""#"" + RoleResponse[i]).show();
                                                if (RoleResponse[i] == ""View"") {
                                                    $("".Details"").show();
                                                }
                                                if (RoleResponse[i] == ""Update"") {
                                                    $(""."" + RoleResponse[i]).show();
               ");
            WriteLiteral(@"                                 }
                                                if (RoleResponse[i] == ""Delete"") {
                                                    $("".Delete"").show();
                                                }
                                            }
                                            $($.fn.dataTable.tables(true)).DataTable()
                                                .columns.adjust();
                                            $(""#loader"").hide();
                                        }
                                    }
                                })
                            }
                        });
                    }

                    $(""#loader"").hide();
                },
                ""drawCallback"": function (settings, json) {
                    $(""#loader"").show();
                    $("".Update"").hide();
                    $("".Delete"").hide();
                    $("".Details"").hide();
               ");
            WriteLiteral(@"     var accountManagementView = sessionStorage.getItem(""AccountManagement_View"");
                    var accountManagementUpdate = sessionStorage.getItem(""AccountManagement_Update"");
                    var accountManagementDelete = sessionStorage.getItem(""AccountManagement_Delete"");

                    if (accountManagementView != """" && accountManagementView != ""null"" && accountManagementView != null && accountManagementView != ""undefined"") {
                        $("".Details"").show();
                    }

                    if (accountManagementUpdate != """" && accountManagementUpdate != ""null"" && accountManagementUpdate != null && accountManagementUpdate != ""undefined"") {
                        $("".Update"").show();
                    }

                    if (accountManagementDelete != """" && accountManagementDelete != ""null"" && accountManagementDelete != null && accountManagementDelete != ""undefined"") {
                        $("".Delete"").show();
                    }

          ");
            WriteLiteral(@"          if ((accountManagementView == """" || accountManagementView == ""null"" || accountManagementView == null || accountManagementView == ""undefined"") &&
                        (accountManagementUpdate == """" || accountManagementUpdate == ""null"" || accountManagementUpdate == null || accountManagementUpdate == ""undefined"") &&
                        (accountManagementDelete == """" || accountManagementDelete == ""null"" || accountManagementDelete == null || accountManagementDelete == ""undefined"")) {
                        var module = $(""#Module"").val();
                        $.ajax({
                            url: """);
            Write(
#nullable restore
#line 1335 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                   Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                            method: ""GET"",
                            data: { ""Module"": ""AccountManagement"" },
                            success: function (RoleResponse) {
                                $.ajax({
                                    url: """);
            Write(
#nullable restore
#line 1340 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                           Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                    method: ""GET"",
                                    data: { ""Module"": ""AccountManagement"" },
                                    success: function (UserResponse) {
                                        if (UserResponse.length > 0) {
                                            for (let i = 0; i < UserResponse.length; i++) {
                                                $(""#"" + UserResponse[i]).show();
                                                if (UserResponse[i] == ""View"") {
                                                    $("".Details"").show();
                                                }
                                                if (UserResponse[i] == ""Update"") {
                                                    $(""."" + UserResponse[i]).show();
                                                }
                                                if (UserResponse[i] == ""Delete"") {
                                                    $("".De");
            WriteLiteral(@"lete"").show();
                                                }
                                            }
                                            $($.fn.dataTable.tables(true)).DataTable()
                                                .columns.adjust();
                                            $(""#loader"").hide();
                                        }
                                        else if (RoleResponse.length > 0) {
                                            for (let i = 0; i < RoleResponse.length; i++) {
                                                $(""#"" + RoleResponse[i]).show();
                                                if (RoleResponse[i] == ""View"") {
                                                    $("".Details"").show();
                                                }
                                                if (RoleResponse[i] == ""Update"") {
                                                    $(""."" + RoleResponse[i]).show();
               ");
            WriteLiteral(@"                                 }
                                                if (RoleResponse[i] == ""Delete"") {
                                                    $("".Delete"").show();
                                                }
                                            }
                                            $($.fn.dataTable.tables(true)).DataTable()
                                                .columns.adjust();
                                            $(""#loader"").hide();
                                        }
                                    }
                                })
                            }
                        });
                    }

                    $(""#loader"").hide();
                },
                ""language"": {
                    'processing': '<div class=""spinner-2""><div class=""center-div-2""><div class=""loader-circle-1""></div></div></div>'
                },
                paging: true,
                pagingType: '");
            WriteLiteral(@"simple_numbers',
                ""bInfo"": true,
                ordering: false,
                ""aLengthMenu"": [20, 30, 50],
                searching: false,
                dom: ""<'row'<'col-sm-3'l><'col-sm-3'f><'col-sm-6'p>>"" +
                    ""<'row'<'col-sm-12'tr>>"" +
                    ""<'row'<'col-sm-5'i><'col-sm-7'p>>"",
            });

            $('#datatable tbody').on('click', 'td.dtr-control', function () {
                var tr = $(this).closest('tr');
                var row = table.row(tr);
                if (!tr.hasClass(""shown"")) {
                    row.child.show();
                    tr.addClass('shown');
                    $(""#loader"").show();
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();
                var accountManagementView = sessionStorage.getItem(""AccountManagement_View"");
                var accountManagementUpdate = sessionStorage.getItem(""AccountManagement_Update"");
            ");
            WriteLiteral(@"    var accountManagementDelete = sessionStorage.getItem(""AccountManagement_Delete"");

                if(accountManagementView != """" && accountManagementView != ""null"" && accountManagementView != null && accountManagementView !=""undefined""){
                    $("".Details"").show();
                }
                
                if (accountManagementUpdate != """" && accountManagementUpdate != ""null"" && accountManagementUpdate != null && accountManagementUpdate != ""undefined"") {
                    $("".Update"").show();
                }

                if (accountManagementDelete != """" && accountManagementDelete != ""null"" && accountManagementDelete != null && accountManagementDelete != ""undefined"") {
                    $("".Delete"").show();
                }

                if ((accountManagementView == """" || accountManagementView == ""null"" || accountManagementView == null || accountManagementView == ""undefined"") &&
                    (accountManagementUpdate == """" || accountManagementUpd");
            WriteLiteral(@"ate == ""null"" || accountManagementUpdate == null || accountManagementUpdate == ""undefined"") && 
                    (accountManagementDelete == """" || accountManagementDelete == ""null"" || accountManagementDelete == null || accountManagementDelete == ""undefined"")) 
                {
                    var module = $(""#Module"").val();
                    $.ajax({
                        url: """);
            Write(
#nullable restore
#line 1432 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                               Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral("\",\r\n                        method: \"GET\",\r\n                        data: { \"Module\": \"AccountManagement\" },\r\n                        success: function (RoleResponse) {\r\n                            $.ajax({\r\n                                url: \"");
            Write(
#nullable restore
#line 1437 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                                       Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                method: ""GET"",
                                data: { ""Module"": ""AccountManagement"" },
                                success: function (UserResponse) {
                                    if (UserResponse.length > 0) {
                                        for (let i = 0; i < UserResponse.length; i++) {
                                            $(""#"" + UserResponse[i]).show();
                                            if (UserResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (UserResponse[i] == ""Update"") {
                                                $(""."" + UserResponse[i]).show();
                                            }
                                            if (UserResponse[i] == ""Delete"") {
                                                $("".Delete"").show();
                                        ");
            WriteLiteral(@"    }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                    else if (RoleResponse.length > 0) {
                                        for (let i = 0; i < RoleResponse.length; i++) {
                                            $(""#"" + RoleResponse[i]).show();
                                            if (RoleResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (RoleResponse[i] == ""Update"") {
                                                $(""."" + RoleResponse[i]).show();
                                            }
                                            if (RoleResponse[i] == ""Delete"") {
");
            WriteLiteral(@"                                                $("".Delete"").show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                }
                            })
                        }
                    });
                }
                
                $(""#loader"").hide();
                }
                else {
                    row.child.hide();
                    tr.removeClass('shown');
                }
            });
        }

    };

    function ClearFilterToDatatable() {
        window.location.reload();
    }
</script>
<script>
    $(""#searchByValue"").on('change', function () {
        var selectedValue = $(""#searchByValue"").val();
        if (selectedVa");
            WriteLiteral(@"lue == ""Created On"") {
            $(""#searchedValue"").val("""");
            $(""#searchedValue"").datepicker({
                format: 'dd-mm-yyyy',
                changeMonth: true,
                changeYear: true,
                autoclose: true,
                todayHighlight: true,
            })

            $(""#searchedValue"").attr(""readonly"", ""readonly"");
        }
        else {
            $(""#searchedValue"").datepicker(""destroy"");
            $(""#searchedValue"").removeAttr(""readonly"");
            $(""#searchedValue"").val("""");
        }
    });
</script>
<script>
    $(function () {
        $(""#Insert"").hide();
        $(""#View"").hide();
        $("".Update"").hide();
        $("".Delete"").hide();
        $("".Details"").hide();
    });

    $(function () {
        $(""#loader"").show();
        sessionStorage.removeItem(""AccountManagement_View"");
        sessionStorage.removeItem(""AccountManagement_Update"");
        sessionStorage.removeItem(""AccountManagement_Delete"");

 ");
            WriteLiteral("       $.ajax({\r\n            url: \"");
            Write(
#nullable restore
#line 1534 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                   Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral("\",\r\n            method: \"GET\",\r\n            data: { \"Module\": \"AccountManagement\" },\r\n            success: function (RoleResponse) {\r\n                $(\"#loader\").show();\r\n                $.ajax({\r\n                    url: \"");
            Write(
#nullable restore
#line 1540 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\GetHistory.cshtml"
                           Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Module"": ""AccountManagement"" },
                    success: function (UserResponse) {
                        $(""#loader"").show();
                        if (UserResponse.length > 0) {
                            for (let i = 0; i < UserResponse.length; i++) {
                                $(""#"" + UserResponse[i]).show();
                                if (UserResponse[i] == ""View"") {
                                    sessionStorage.setItem(""AccountManagement_View"", ""View"");
                                    $("".Details"").show();
                                }
                                if (UserResponse[i] == ""Update"") {
                                    sessionStorage.setItem(""AccountManagement_Update"", ""Update"");
                                    $(""."" + UserResponse[i]).show();
                                }
                                if (UserResponse[i] == ""Delete"") {
                          ");
            WriteLiteral(@"          sessionStorage.setItem(""AccountManagement_Delete"", ""Delete"");
                                    $(""."" + UserResponse[i]).show();
                                }
                            }
                            $(""#loader"").hide();
                        }
                        else if (RoleResponse.length > 0) {
                            for (let i = 0; i < RoleResponse.length; i++) {
                                $(""#"" + RoleResponse[i]).show();
                                if (RoleResponse[i] == ""View"") {
                                    sessionStorage.setItem(""AccountManagement_View"", ""View"");
                                    $("".Details"").show();
                                }
                                if (RoleResponse[i] == ""Update"") {
                                    sessionStorage.setItem(""AccountManagement_Update"", ""Update"");
                                    $(""."" + RoleResponse[i]).show();
                                }
       ");
            WriteLiteral(@"                         if (RoleResponse[i] == ""Delete"") {
                                    sessionStorage.setItem(""AccountManagement_Delete"", ""Delete"");
                                    $(""."" + RoleResponse[i]).show();
                                }
                            }
                            $(""#loader"").hide();

                        } else {
                            alert(""You don't have any permission for this module."");
                            $(""#loader"").hide();
                        }
                    }
                })
            }
        });
        $(""#loader"").hide();
    });
</script>
<script>
    $(window).resize(function () {
        var allRows = $('#datatable tbody tr');
        allRows.each(function () {
            var tr = $(this).closest('tr');
            var row = $($.fn.dataTable.tables(true)).DataTable().row(tr);
            if (tr.hasClass(""shown"")) {
                row.child.hide();
                tr.removeClass(");
            WriteLiteral("\'shown\');\r\n                tr.removeClass(\'parent\');\r\n            }\r\n        });\r\n    });\r\n</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DIBN.Areas.Admin.Models.ConfirmationModel> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591

#pragma checksum "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a8383"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_AccountManagement_GetHistory), @"mvc.1.0.view", @"/Views/AccountManagement/GetHistory.cshtml")]
namespace AspNetCore
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Devotion Business\DIBN\DIBN\Views\_ViewImports.cshtml"
using DIBN;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Devotion Business\DIBN\DIBN\Views\_ViewImports.cshtml"
using DIBN.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a8383", @"/Views/AccountManagement/GetHistory.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"7d5ddeb28e6b11bd8a350250841d25befde6ee969eb2ffe12afe4b0408fac805", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_AccountManagement_GetHistory : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DIBN.Models.ConfirmationModel>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", "hidden", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("message"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Transaction Id", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Created On", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Company", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Type", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Grand Total", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "asc", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "desc", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Description", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Amount", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Quantity", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Total Amount", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Vat(%)", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Vat Amount", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-responsive/js/dataTables.responsive.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-responsive-bs4/js/responsive.bootstrap4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/sweetalert2/sweetalert2.all.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/sweetalert2/sweetalert2.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
  
    ViewData["Title"] = "GetHistory";

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a83839835", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
#nullable restore
#line 5 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.message);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<div id=\"loader\">\r\n    <div class=\"spinner-1\">\r\n        <div class=\"center-div-1\">\r\n");
            WriteLiteral("            <div class=\"loader-circle-75\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-lg-12\">\r\n        <a");
            BeginWriteAttribute("href", " href=\"", 569, "\"", 646, 1);
#nullable restore
#line 19 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
WriteAttributeValue("", 576, Url.Action("Index","AccountManagement",new{name="AccountManagement"}), 576, 70, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" class=""btn btn-blue float-end"" style=""margin-bottom:15px;"">Back to List</a>
    </div>
</div>
<input type=""hidden"" name=""Module"" value=""AccountManagement"" id=""Module"" />
<input type=""hidden"" name=""IndexValue"" id=""IndexValue"" />
<div class=""row Details"">
    <div class=""col-12"">
        <div class=""card"">
            <div class=""card-header"">
");
            WriteLiteral(@"                <div class=""col-md-12 float-end"">
                    <button class=""btn btn-blue float-end"" onclick=""ClearFilterToDatatable();"">Clear All</button>
                </div>
                <div class=""col-md-12"">
                    <div class=""col-md-6 float-start"">
                        <div class=""col-lg-4 float-start"">
                            <div class=""form-group"">
                                <label class=""control-label"">Sort By : </label>
                                <select class=""form-select"" id=""sortingBy"">
                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838313315", async() => {
                WriteLiteral("Transaction Id");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838314543", async() => {
                WriteLiteral("Created On");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838315767", async() => {
                WriteLiteral("Company");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838316988", async() => {
                WriteLiteral("Type");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838318206", async() => {
                WriteLiteral("Grand Total");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                </select>
                            </div>
                        </div>
                        <div class=""col-lg-4 float-start"">
                            <div class=""form-group ms-2"">
                                <label class=""control-label"">Sorting Order : </label>
                                <select class=""form-select"" id=""sortingDirection"">
                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838319841", async() => {
                WriteLiteral("Low to High");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838321066", async() => {
                WriteLiteral("High to Low");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                </select>
                            </div>
                        </div>
                        <div class=""col-lg-4 float-start"" style=""margin-top:28px !important;"">
                            <button class=""btn btn-blue float-start ms-2 me-2"" onclick=""ApplyFilterToDatatable();"">Apply Filter</button>
                        </div>
                    </div>
                    <div class=""col-md-6 float-start"">
                        <div class=""col-lg-4 float-start"">
                            <div class=""form-group"">
                                <label class=""control-label"">Search By : </label>
                                <select class=""form-select"" id=""searchByValue"">
                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838323049", async() => {
                WriteLiteral("Transaction Id");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838324277", async() => {
                WriteLiteral("Created On");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838325501", async() => {
                WriteLiteral("Company");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838326722", async() => {
                WriteLiteral("Description");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838327947", async() => {
                WriteLiteral("Type");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838329165", async() => {
                WriteLiteral("Amount");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_10.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838330387", async() => {
                WriteLiteral("Quantity");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_11.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838331611", async() => {
                WriteLiteral("Total Amount");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838332839", async() => {
                WriteLiteral("Vat(%)");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_13.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838334061", async() => {
                WriteLiteral("Vat Amount");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_14.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838335287", async() => {
                WriteLiteral("Grand Total");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                </select>
                            </div>
                        </div>
                        <div class=""col-lg-4 float-start"">
                            <div class=""form-group ms-2"">
                                <label class=""control-label"">Search By : </label>
                                <input id=""searchedValue"" name=""searchedValue"" class=""form-control"" />
                            </div>
                        </div>
                        <div class=""col-lg-4 float-start"" style=""margin-top:28px !important;"">
                            <button class=""btn btn-blue float-start ms-2 me-2"" onclick=""ApplyFilterToDatatable();"">Search</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""card-body"">
                <h4 class=""card-title text-center"">Account History</h4>
                <hr style=""height:1px;"" class=""text-blue"" />
                <div class=""table");
            WriteLiteral(@"-rep-plugin"">
                    <div class=""table-responsive mb-0"" data-pattern=""priority-columns"">
                        <table id=""datatable"" class=""table table-bordered table-striped dt-responsive nowrap"" style=""border-collapse: collapse; border-spacing: 0; width: 100%;"">
                            <thead>
                                <tr>
                                    <th>
                                        Transaction Id
                                    </th>
                                    <th>
                                        Created On
                                    </th>
                                    <th>
                                        Company
                                    </th>
                                    <th>
                                        Description
                                    </th>
                                    <th>
                                        Type
                            ");
            WriteLiteral(@"        </th>
                                    <th>
                                        Amount
                                    </th>
                                    <th>
                                        Quantity
                                    </th>
                                    <th>
                                        Total Amount
                                    </th>
                                    <th>
                                        Vat(%)
                                    </th>
                                    <th>
                                        Vat Amount
                                    </th>
                                    <th>
                                        Grand Total
                                    </th>
                                    <th>
                                        Download Receipt
                                    </th>
                                    <th>

       ");
            WriteLiteral(@"                             </th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id=""EditExpense"" class=""modal"" data-bs-keyboard=""false"" data-bs-backdrop=""static"" role=""dialog"">
");
            WriteLiteral(@"    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"">Edit</h5>
                <button type=""button"" class=""close btn btn-blue"" id=""EditExpenseModalClose"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
            </div>
        </div>
    </div>
</div>
<div id=""UpdatePortalBalanceAmount"" class=""modal"" data-bs-keyboard=""false"" data-bs-backdrop=""static"" role=""dialog"">
");
            WriteLiteral(@"    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"">Portal Balance</h5>
                <button type=""button"" class=""btn btn-blue"" id=""UpdatePortalBalanceAmountClose"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
            </div>
        </div>
    </div>
</div>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838341354", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838342419", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<!-- Sweet Alerts-->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838343512", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "297e3f1b125092b5930e9b6abc023e2d84dc5418c39e3eb0117172597d5a838344577", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<script>
    $(""#EditExpenseModalClose"").on('click', function () {
        window.location.reload();
    });

    $(""#UpdatePortalBalanceAmountClose"").on(""click"", function () {
        window.location.reload();
    });
    $(document).ready(function () {
        $(""#loader"").hide();
        var message = $(""#message"").val();
        if (message != null && message != """") {
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                },
                buttonsStyling: false
            })

            swalWithBootstrapButtons.fire({
                title: 'Error.',
                text: message,
                icon: 'error'
            }).then((result) => {
                var url = """);
#nullable restore
#line 210 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                      Write(Url.Action("GetHistory","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
                window.location.href = url;
            });
        }
    });
</script>
<script>
    function UpdateExpenses(Id,transactionId) {
        $(""#loader"").show();
        var Module = $(""#Module"").val();
        $.ajax({
            url: """);
#nullable restore
#line 221 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
             Write(Url.Action("GetExpenseModification","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            method: ""GET"",
            data: { ""Id"": Id , ""TransactionId"": transactionId},
            success: function (response) {
                if (response != """" && response != null) {
                    const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                            confirmButton: 'ms-3 btn btn-success',
                            cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
                    })

                    swalWithBootstrapButtons.fire({
                        title: 'Error.',
                        html: response,
                        icon: 'error'
                    }).then((result) => {
                        window.location.reload();
                    });
                }
                else {
                    $.ajax({
                        url: """);
#nullable restore
#line 244 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                         Write(Url.Action("UpdateExpenses","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Id"": Id, ""name"": Module, ""ActionName"": ""GetHistory"", ""Cnt"": ""AccountManagement"" },
                        success: function (response) {
                            $(""#loader"").hide();
                            $mymodal = $(""#EditExpense"");
                            $mymodal.find(""div.modal-body"").html(response);
                            $mymodal.modal(""show"");
                        }
                    });
                }
            }
        });
    }
</script>
<script>
    function RemoveExpenses(Id, Amount, companyId) {
        event.preventDefault();
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: 'ms-3 btn btn-success',
                cancelButton: 'btn btn-danger'
            },
            buttonsStyling: false
        })

        swalWithBootstrapButtons.fire({
            title: 'Are you sure?',
            text: ""You w");
            WriteLiteral(@"on't be able to revert this!"",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
            reverseButtons: true,
            showConfirmButton: true,
        }).then((result) => {
            if (result.isConfirmed) {
                $(""#loader"").show();
                $.ajax({
                    url: """);
#nullable restore
#line 283 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                     Write(Url.Action("Delete", "AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Id"": Id, ""CompanyId"": companyId, ""Amount"": Amount },
                    success: function (response) {
                        $(""#loader"").hide();
                        if (response.startsWith(""Selected Expense Deleted Successfully."")) {
                            swalWithBootstrapButtons.fire({
                                title: 'Deleted.',
                                text: ""Selected Expense Deleted Successfully..!!"",
                                icon: 'success'
                            }).then((result) => {
                                window.location.reload();
                            });
                        }
                        else {
                            swalWithBootstrapButtons.fire({
                                title: 'Error.',
                                html: response,
                                icon: 'error'
                            }).then((result) => {
   ");
            WriteLiteral(@"                             window.location.reload();
                            });
                        }
                    }
                });
            }
            else if (
                result.dismiss === Swal.DismissReason.cancel
            ) {
                $(""#loader"").hide();
                swalWithBootstrapButtons.fire(
                    'Cancelled',
                    'Cancled by User..!! :)',
                    'error'
                )
            }
        });
    };

    function UpdatePayment(Id, companyId,transactionId) {
        $(""#loader"").show();
        var module = $(""#Module"").val();
        $.ajax({
            url: """);
#nullable restore
#line 326 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
             Write(Url.Action("GetTransactionModification","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            method: ""GET"",
            data: { ""Id"": Id, ""CompanyId"": companyId, ""TransactionId"": transactionId },
            success: function (response) {
                if (response != """" && response != null) {
                    const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                            confirmButton: 'ms-3 btn btn-success',
                            cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
                    })

                    swalWithBootstrapButtons.fire({
                        title: 'Error.',
                        html: response,
                        icon: 'error'
                    }).then((result) => {
                        window.location.reload();
                    });
                }
                else {
                    $.ajax({
                        url: """);
#nullable restore
#line 349 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                         Write(Url.Action("GetPaymentDetails","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Id"": Id, ""CompanyId"": companyId, ""ActionName"": ""GetHistory"", ""Cnt"": ""AccountManagement"" },
                        success: function (response) {
                            $(""#loader"").hide();
                            $mymodal = $(""#UpdatePortalBalanceAmount"");
                            $mymodal.find(""div.modal-body"").html(response);
                            $mymodal.modal(""show"");
                        }
                    });
                 }
            }
        });
    };
</script>
<script>
    function RemovePayment(Id, companyId, Amount) {
        event.preventDefault();
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: 'ms-3 btn btn-success',
                cancelButton: 'btn btn-danger'
            },
            buttonsStyling: false
        })

        swalWithBootstrapButtons.fire({
            title: 'Are you sure?',
 ");
            WriteLiteral(@"           text: ""You won't be able to revert this!"",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
            reverseButtons: true,
            showConfirmButton: true,
        }).then((result) => {
            if (result.isConfirmed) {
                $(""#loader"").show();
                $.ajax({
                    url: """);
#nullable restore
#line 388 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                     Write(Url.Action("DeletePaymentDetails", "AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Id"": Id, ""CompanyId"": companyId, ""Amount"": Amount },
                    success: function (response) {
                        $(""#loader"").hide();
                        if (response.startsWith(""Selected Payment Transaction Deleted Successfully."")) {
                            swalWithBootstrapButtons.fire({
                                title: 'Deleted.',
                                text: ""Selected Payment Transaction Deleted Successfully..!!"",
                                icon: 'success'
                            }).then((result) => {
                                window.location.reload();
                            });
                        }
                        else {
                            swalWithBootstrapButtons.fire({
                                title: 'Error.',
                                html: response,
                                icon: 'error'
                            })");
            WriteLiteral(@".then((result) => {
                                window.location.reload();
                            });
                        }
                    }
                });
            }
            else if (
                result.dismiss === Swal.DismissReason.cancel
            ) {
                $(""#loader"").hide();
                swalWithBootstrapButtons.fire(
                    'Cancelled',
                    'Cancled by User..!! :)',
                    'error'
                )
            }
        });
    }
</script>

<script>
    $(document).ready(function () {
        var url = """);
#nullable restore
#line 430 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
              Write(Url.Action("GetDataTableData","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        url = url + ""?page="";

        var table = $(""#datatable"").DataTable({
            ""processing"": true,
            ""serverSide"": true,
            ""filter"": false,
            ""ajax"": {
                ""type"": ""post"",
                ""datatype"": ""json"",
                ""data"": function () {
                    var info = $('#datatable').DataTable().page.info();
                    $('#datatable').DataTable().ajax.url(
                        url + (info.page + 1)
                    );
                }
            },
            ""responsive"": true,
            ""deferRender"": true,
            ""columns"": [
                { ""data"": ""transactionId"", ""name"": ""Transaction Id"" },
                { ""data"": ""createdOnUtc"", ""name"": ""Created On"" },
                { ""data"": ""companyName"", ""name"": ""Company"" },
                {
                    ""data"": function (data, full, meta) {

                        if (data.transactionType == ""Credit"") {
                            var ");
            WriteLiteral(@"desc = data.description;
                            if (data.description.length > 40) {
                                desc = desc.substring(0, 40);
                                desc = desc + ""...."";
                                return '<span title=""' + data.description + '"" >' + desc + '</span>';
                            }
                            else {
                                return '<span title=""' + data.description + '"" >' + desc + '</span>';
                            }
                        } else {
                            var desc = data.expensesTitle;
                            if (data.expensesTitle.length > 40) {
                                desc = desc.substring(0, 40);
                                desc = desc + ""...."";
                                return '<span title=""' + data.expensesTitle + '"" >' + desc + '</span>';
                            }
                            else {
                                return '<span title=""' + dat");
            WriteLiteral(@"a.expensesTitle + '"" >' + desc + '</span>';
                            }
                        }
                    },
                    ""name"": ""Description""
                },
                { ""data"": ""transactionType"", ""name"": ""Type"" },
                { ""data"": ""expensesAmount"", ""name"": ""Amount"" },
                { ""data"": ""quantity"", ""name"": ""Quantity"" },
                {
                    ""data"": function (data, full, meta) {
                        if (data.transactionType == ""Credit"") {
                            return '<span>' + data.paymentCredit + '</span>';
                        }
                        else {
                            return '<span>' + data.totalAmount + '</span>';
                        }
                    },
                    ""name"": ""Total Amount""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.transactionType == ""Credit"") {
                            ");
            WriteLiteral(@"return '<span>----</span>';
                        }
                        else {
                            return '<span>' + data.vat + '</span>';
                        }
                    },
                    ""name"": ""Vat(%)""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.transactionType == ""Credit"") {
                            return '<span>----</span>';
                        }
                        else {
                            return '<span>' + data.vatAmount + '</span>';
                        }
                    },
                    ""name"": ""Vat Amount""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.transactionType == ""Credit"") {
                            return '<span>' + data.paymentCredit + '</span>';
                        }
                        else {
                            re");
            WriteLiteral(@"turn '<span>' + data.grandTotal + '</span>';
                        }
                    },
                    ""name"": ""Grand Total""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.expenseReceiptId != 0 && data.transactionType == ""Debit"") {
                            var url = """);
#nullable restore
#line 530 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                                  Write(Url.Action("DownloadExpenseReceipt","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
                            return '<form action=""' + url + '"" method=""get""> <input type=""hidden"" value= ""' + data.expenseReceiptId + '"" name=""ReceiptId"" /><input type=""submit"" value=""Download"" name= ""Download Receipt"" class=""btn btn-blue"" /></form>';
                        }
                        else if (data.expenseReceiptId != 0 && data.transactionType == ""Credit"") {
                            var url = """);
#nullable restore
#line 534 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                                  Write(Url.Action("DownloadPaymentReceipt","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
                            return '<form action=""' + url + '"" method=""get"" target=""_blank""> <input type=""hidden"" value= ""' + data.expenseReceiptId + '"" name=""Id"" /><input type=""submit"" value=""Download"" name= ""Download Receipt"" class=""btn btn-blue"" /></form>';
                        }
                        else {
                            return '<span>----</span>';
                        }
                    },
                    ""name"": ""Download Receipt""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.transactionType == ""Credit"") {
                            var editButton = '<span class=""btn btn-blue Update"" onclick=""UpdatePayment(' + data.paymentTransactionId + ',' + data.companyId + "",'"" + data.transactionId + ""'"" + ')""><i class=""fas fa-edit""></i></span>';
                            var deleteButton = '<span class=""btn btn-blue ms-2 Delete"" onclick=""RemovePayment(' + data.paymentTransactionId + ',' ");
            WriteLiteral(@"+ data.companyId + ',' + data.paymentCredit + ')""><i class=""fas fa-trash""></i></span>';
                            return editButton + deleteButton;
                        }
                        else if (data.transactionType == ""Debit"") {
                            var editButton = '<span class=""btn btn-blue Update"" onclick=""UpdateExpenses(' + data.id + "",'"" + data.transactionId + ""'"" + ')""><i class=""fas fa-edit""></i></span>';
                            var deleteButton = '<span class=""btn btn-blue ms-2 Delete"" onclick=""RemoveExpenses(' + data.id + ',' + data.grandTotal + ',' + data.companyId + ')""><i class=""fas fa-trash""></i></span>';
                            return editButton + deleteButton;
                        }
                    },
                    ""name"": """"
                },
            ],
            ""initComplete"": function (settings, json) {
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();
             ");
            WriteLiteral("   var module = $(\"#Module\").val();\r\n                $.ajax({\r\n                    url: \"");
#nullable restore
#line 565 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                     Write(Url.Action("GetRolePermissionsName", "UserPermission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Module"": ""AccountManagement"" },
                    success: function (RoleResponse) {
                        $(""#loader"").show();
                        $.ajax({
                            url: """);
#nullable restore
#line 571 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                             Write(Url.Action("GetUserPermissionsName", "UserPermission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                            method: ""GET"",
                            data: { ""Module"": ""AccountManagement"" },
                            success: function (UserResponse) {
                                $(""#loader"").show();
                                if (UserResponse.length > 0) {
                                    for (let i = 0; i < UserResponse.length; i++) {
                                        $(""#"" + UserResponse[i]).show();
                                        if (UserResponse[i] == ""View"") {
                                            $("".Details"").show();
                                        }
                                        if (UserResponse[i] == ""Update"") {
                                            $(""."" + UserResponse[i]).show();
                                        }
                                        if (UserResponse[i] == ""Delete"") {
                                            $("".Delete"").show();
                                        }");
            WriteLiteral(@"
                                    }
                                    $($.fn.dataTable.tables(true)).DataTable()
                                        .columns.adjust();
                                    $(""#loader"").hide();
                                }
                                else if (RoleResponse.length > 0) {
                                    for (let i = 0; i < RoleResponse.length; i++) {
                                        $(""#"" + RoleResponse[i]).show();
                                        if (RoleResponse[i] == ""View"") {
                                            $("".Details"").show();
                                        }
                                        if (RoleResponse[i] == ""Update"") {
                                            $(""."" + RoleResponse[i]).show();
                                        }
                                        if (RoleResponse[i] == ""Delete"") {
                                            $("".Delete"").show();
");
            WriteLiteral(@"                                        }
                                    }
                                    $($.fn.dataTable.tables(true)).DataTable()
                                        .columns.adjust();
                                    $(""#loader"").hide();
                                }
                            }
                        })
                    }
                });
                $(""#loader"").hide();
            },
            ""drawCallback"": function (settings, json) {
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();
                var module = $(""#Module"").val();
                $.ajax({
                    url: """);
#nullable restore
#line 622 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                     Write(Url.Action("GetRolePermissionsName", "UserPermission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Module"": ""AccountManagement"" },
                    success: function (RoleResponse) {
                        $(""#loader"").show();
                        $.ajax({
                            url: """);
#nullable restore
#line 628 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                             Write(Url.Action("GetUserPermissionsName", "UserPermission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                            method: ""GET"",
                            data: { ""Module"": ""AccountManagement"" },
                            success: function (UserResponse) {
                                $(""#loader"").show();
                                if (UserResponse.length > 0) {
                                    for (let i = 0; i < UserResponse.length; i++) {
                                        $(""#"" + UserResponse[i]).show();
                                        if (UserResponse[i] == ""View"") {
                                            $("".Details"").show();
                                        }
                                        if (UserResponse[i] == ""Update"") {
                                            $(""."" + UserResponse[i]).show();
                                        }
                                        if (UserResponse[i] == ""Delete"") {
                                            $("".Delete"").show();
                                        }");
            WriteLiteral(@"
                                    }
                                    $($.fn.dataTable.tables(true)).DataTable()
                                        .columns.adjust();
                                    $(""#loader"").hide();
                                }
                                else if (RoleResponse.length > 0) {
                                    for (let i = 0; i < RoleResponse.length; i++) {
                                        $(""#"" + RoleResponse[i]).show();
                                        if (RoleResponse[i] == ""View"") {
                                            $("".Details"").show();
                                        }
                                        if (RoleResponse[i] == ""Update"") {
                                            $(""."" + RoleResponse[i]).show();
                                        }
                                        if (RoleResponse[i] == ""Delete"") {
                                            $("".Delete"").show();
");
            WriteLiteral(@"                                        }
                                    }
                                    $($.fn.dataTable.tables(true)).DataTable()
                                        .columns.adjust();
                                    $(""#loader"").hide();
                                }
                            }
                        })
                    }
                });
                $(""#loader"").hide();
            },
            ""language"": {
                'processing': '<div class=""spinner-2""><div class=""center-div-2""><div class=""loader-circle-1""></div></div></div>'
            },
            paging: true,
            pagingType: 'simple_numbers',
            ""bInfo"": true,
            ordering: false,
            ""aLengthMenu"": [20, 30, 50],
            //""aLengthMenu"": [[10, 20, 30, -1], [10, 20, 30, ""All""]],
            searching: false,
            dom: ""<'row'<'col-sm-3'l><'col-sm-3'f><'col-sm-6'p>>"" +
                ""<'row'<'col-sm-12'tr>");
            WriteLiteral(@">"" +
                ""<'row'<'col-sm-5'i><'col-sm-7'p>>"",
        })

        $('#datatable tbody').on('click', 'td.dtr-control', function () {
            var tr = $(this).closest('tr');
            var row = table.row(tr);
            if (!tr.hasClass(""shown"")) {
                $(""#loader"").show();
                row.child.show();
                tr.addClass('shown');
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();
                var module = $(""#Module"").val();
                $.ajax({
                    url: """);
#nullable restore
#line 700 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                     Write(Url.Action("GetRolePermissionsName", "UserPermission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Module"": ""AccountManagement"" },
                    success: function (RoleResponse) {
                        $(""#loader"").show();
                        $.ajax({
                            url: """);
#nullable restore
#line 706 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                             Write(Url.Action("GetUserPermissionsName", "UserPermission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                            method: ""GET"",
                            data: { ""Module"": ""AccountManagement"" },
                            success: function (UserResponse) {
                                $(""#loader"").show();
                                if (UserResponse.length > 0) {
                                    for (let i = 0; i < UserResponse.length; i++) {
                                        $(""#"" + UserResponse[i]).show();
                                        if (UserResponse[i] == ""View"") {
                                            $("".Details"").show();
                                        }
                                        if (UserResponse[i] == ""Update"") {
                                            $(""."" + UserResponse[i]).show();
                                        }
                                        if (UserResponse[i] == ""Delete"") {
                                            $("".Delete"").show();
                                        }");
            WriteLiteral(@"
                                    }
                                    $(""#loader"").hide();
                                }
                                else if (RoleResponse.length > 0) {
                                    for (let i = 0; i < RoleResponse.length; i++) {
                                        $(""#"" + RoleResponse[i]).show();
                                        if (RoleResponse[i] == ""View"") {
                                            $("".Details"").show();
                                        }
                                        if (RoleResponse[i] == ""Update"") {
                                            $(""."" + RoleResponse[i]).show();
                                        }
                                        if (RoleResponse[i] == ""Delete"") {
                                            $("".Delete"").show();
                                        }
                                    }
                                    $(""#loader"").hide();
");
            WriteLiteral(@"                                }
                            }
                        })
                    }
                });
                $(""#loader"").hide();
            }
            else {
                row.child.hide();
                tr.removeClass('shown');
            }
        });
    });
</script>
<script>
    function ApplyFilterToDatatable() {
        var sortingBy = $(""#sortingBy"").val();
        var sortingOrder = $(""#sortingDirection"").val();

        var searchedValue = $(""#searchedValue"").val();
        var searchByValue = $(""#searchByValue"").val();

        var url = """);
#nullable restore
#line 762 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
              Write(Url.Action("GetFilterwiseDataTable","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        url = url + ""?sortColumn="" + sortingBy + ""&sortColumnDirection="" + sortingOrder;
        if (searchByValue != """" && searchedValue != """") {
            url = url + ""&searchBy="" + searchByValue + ""&searchedValue="" + searchedValue;
        }
        if ($.fn.dataTable.isDataTable('#datatable')) {
            $('#datatable').DataTable().destroy();
            $('#datatable').empty();

            var table = $(""#datatable"").DataTable({
                ""processing"": true,
                ""serverSide"": true,
                ""filter"": false,
                ""ajax"": {
                    ""type"": ""post"",
                    ""datatype"": ""json"",
                    ""data"": function () {
                        $('#datatable').DataTable().ajax.url(
                            url
                        );
                    }
                },
                ""responsive"": true,
                ""deferRender"": true,
                ""columns"": [
                    { ""data"": ""transact");
            WriteLiteral(@"ionId"", sTitle: ""Transaction Id"" },
                    { ""data"": ""createdOnUtc"", sTitle: ""Created On"" },
                    { ""data"": ""companyName"", sTitle: ""Company"" },
                    {
                        ""data"": function (data, full, meta) {

                            var desc = data.description;
                            if (data.description.length > 40) {
                                desc = desc.substring(0, 40);
                                desc = desc + ""...."";
                                return '<span title=""' + data.description + '"" >' + desc + '</span>';
                            }
                            else {
                                return '<span title=""' + data.description + '"" >' + desc + '</span>';
                            }
                        },
                        sTitle: ""Description""
                    },
                    { ""data"": ""transactionType"", sTitle: ""Type"" },
                    { ""data"": ""expensesAmount"", s");
            WriteLiteral(@"Title: ""Amount"" },
                    { ""data"": ""quantity"", sTitle: ""Quantity"" },
                    {
                        ""data"": function (data, full, meta) {
                            if (data.transactionType == ""Credit"") {
                                return '<span>' + data.paymentCredit + '</span>';
                            }
                            else {
                                return '<span>' + data.totalAmount + '</span>';
                            }
                        },
                        sTitle: ""Total Amount""
                    },
                    {
                        ""data"": function (data, full, meta) {
                            if (data.transactionType == ""Credit"") {
                                return '<span>----</span>';
                            }
                            else {
                                return '<span>' + data.vat + '</span>';
                            }
                        },
       ");
            WriteLiteral(@"                 sTitle: ""Vat(%)""
                    },
                    {
                        ""data"": function (data, full, meta) {
                            if (data.transactionType == ""Credit"") {
                                return '<span>----</span>';
                            }
                            else {
                                return '<span>' + data.vatAmount + '</span>';
                            }
                        },
                        sTitle: ""Vat Amount""
                    },
                    {
                        ""data"": function (data, full, meta) {
                            if (data.transactionType == ""Credit"") {
                                return '<span>' + data.paymentCredit + '</span>';
                            }
                            else {
                                return '<span>' + data.grandTotal + '</span>';
                            }
                        },
                        sTitle");
            WriteLiteral(@": ""Grand Total""
                    },
                    {
                        ""data"": function (data, full, meta) {
                            if (data.expenseReceiptId != 0 && data.transactionType == ""Debit"") {
                                var url = """);
#nullable restore
#line 855 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                                      Write(Url.Action("DownloadExpenseReceipt","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
                                return '<form action=""' + url + '"" method=""get""> <input type=""hidden"" value= ""' + data.expenseReceiptId + '"" name=""ReceiptId"" /><input type=""submit"" value=""Download"" name= ""Download Receipt"" class=""btn btn-blue"" /></form>';
                            }
                            else if (data.expenseReceiptId != 0 && data.transactionType == ""Credit"") {
                                var url = """);
#nullable restore
#line 859 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                                      Write(Url.Action("DownloadPaymentReceipt","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
                                return '<form action=""' + url + '"" method=""get"" target=""_blank""> <input type=""hidden"" value= ""' + data.expenseReceiptId + '"" name=""Id"" /><input type=""submit"" value=""Download"" name= ""Download Receipt"" class=""btn btn-blue"" /></form>';
                            }
                            else {
                                return '<span>----</span>';
                            }
                        },
                        sTitle: ""Download Receipt""
                    },
                    {
                        ""data"": function (data, full, meta) {
                            if (data.transactionType == ""Credit"") {
                                var editButton = '<span class=""btn btn-blue Update"" onclick=""UpdatePayment(' + data.paymentTransactionId + ',' + data.companyId + "",'"" + data.transactionId + ""'"" + ')""><i class=""fas fa-edit""></i></span>';
                                var deleteButton = '<span class=""btn btn-blue ms-2 Delete"" onclick");
            WriteLiteral(@"=""RemovePayment(' + data.paymentTransactionId + ',' + data.companyId + ',' + data.paymentCredit + ')""><i class=""fas fa-trash""></i></span>';
                                return editButton + deleteButton;
                            }
                            else if (data.transactionType == ""Debit"") {
                                var editButton = '<span class=""btn btn-blue Update"" onclick=""UpdateExpenses(' + data.id + "",'"" + data.transactionId + ""'"" + ')""><i class=""fas fa-edit""></i></span>';
                                var deleteButton = '<span class=""btn btn-blue ms-2 Delete"" onclick=""RemoveExpenses(' + data.id + ',' + data.grandTotal + ',' + data.companyId + ')""><i class=""fas fa-trash""></i></span>';
                                return editButton + deleteButton;
                            }
                        },
                        sTitle: """"
                    },
                ],
                ""initComplete"": function (settings, json) {
                    $("".Upda");
            WriteLiteral("te\").hide();\r\n                    $(\".Delete\").hide();\r\n                    $(\".Details\").hide();\r\n                    var module = $(\"#Module\").val();\r\n                    $.ajax({\r\n                        url: \"");
#nullable restore
#line 890 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                         Write(Url.Action("GetRolePermissionsName", "UserPermission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Module"": ""AccountManagement"" },
                        success: function (RoleResponse) {
                            $(""#loader"").show();
                            $.ajax({
                                url: """);
#nullable restore
#line 896 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                                 Write(Url.Action("GetUserPermissionsName", "UserPermission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                                method: ""GET"",
                                data: { ""Module"": ""AccountManagement"" },
                                success: function (UserResponse) {
                                    $(""#loader"").show();
                                    if (UserResponse.length > 0) {
                                        for (let i = 0; i < UserResponse.length; i++) {
                                            $(""#"" + UserResponse[i]).show();
                                            if (UserResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (UserResponse[i] == ""Update"") {
                                                $(""."" + UserResponse[i]).show();
                                            }
                                            if (UserResponse[i] == ""Delete"") {
                                                $("".");
            WriteLiteral(@"Delete"").show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                    else if (RoleResponse.length > 0) {
                                        for (let i = 0; i < RoleResponse.length; i++) {
                                            $(""#"" + RoleResponse[i]).show();
                                            if (RoleResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (RoleResponse[i] == ""Update"") {
                                                $(""."" + RoleResponse[i]).show();
                                            }
                      ");
            WriteLiteral(@"                      if (RoleResponse[i] == ""Delete"") {
                                                $("".Delete"").show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                }
                            })
                        }
                    });
                    $(""#loader"").hide();
                },
                ""drawCallback"": function (settings, json) {
                    $("".Update"").hide();
                    $("".Delete"").hide();
                    $("".Details"").hide();
                    var module = $(""#Module"").val();
                    $.ajax({
                        url: """);
#nullable restore
#line 947 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                         Write(Url.Action("GetRolePermissionsName", "UserPermission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Module"": ""AccountManagement"" },
                        success: function (RoleResponse) {
                            $(""#loader"").show();
                            $.ajax({
                                url: """);
#nullable restore
#line 953 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                                 Write(Url.Action("GetUserPermissionsName", "UserPermission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                                method: ""GET"",
                                data: { ""Module"": ""AccountManagement"" },
                                success: function (UserResponse) {
                                    $(""#loader"").show();
                                    if (UserResponse.length > 0) {
                                        for (let i = 0; i < UserResponse.length; i++) {
                                            $(""#"" + UserResponse[i]).show();
                                            if (UserResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (UserResponse[i] == ""Update"") {
                                                $(""."" + UserResponse[i]).show();
                                            }
                                            if (UserResponse[i] == ""Delete"") {
                                                $("".");
            WriteLiteral(@"Delete"").show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                    else if (RoleResponse.length > 0) {
                                        for (let i = 0; i < RoleResponse.length; i++) {
                                            $(""#"" + RoleResponse[i]).show();
                                            if (RoleResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (RoleResponse[i] == ""Update"") {
                                                $(""."" + RoleResponse[i]).show();
                                            }
                      ");
            WriteLiteral(@"                      if (RoleResponse[i] == ""Delete"") {
                                                $("".Delete"").show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                }
                            })
                        }
                    });
                    $(""#loader"").hide();
                },
                ""language"": {
                    'processing': '<div class=""spinner-2""><div class=""center-div-2""><div class=""loader-circle-1""></div></div></div>'
                },
                paging: true,
                pagingType: 'simple_numbers',
                ""bInfo"": true,
                ordering: false,
                ""aLengthMenu"": [20,30,50],
   ");
            WriteLiteral(@"             searching: false,
                dom: ""<'row'<'col-sm-3'l><'col-sm-3'f><'col-sm-6'p>>"" +
                    ""<'row'<'col-sm-12'tr>>"" +
                    ""<'row'<'col-sm-5'i><'col-sm-7'p>>"",
            });

            $('#datatable tbody').on('click', 'td.dtr-control', function () {
                var tr = $(this).closest('tr');
                var row = table.row(tr);
                if (!tr.hasClass(""shown"")) {
                    $(""#loader"").show();
                    row.child.show();
                    tr.addClass('shown');
                    $("".Update"").hide();
                    $("".Delete"").hide();
                    $("".Details"").hide();
                    var module = $(""#Module"").val();
                    $.ajax({
                        url: """);
#nullable restore
#line 1024 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                         Write(Url.Action("GetRolePermissionsName", "UserPermission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Module"": ""AccountManagement"" },
                        success: function (RoleResponse) {
                            $(""#loader"").show();
                            $.ajax({
                                url: """);
#nullable restore
#line 1030 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                                 Write(Url.Action("GetUserPermissionsName", "UserPermission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                                method: ""GET"",
                                data: { ""Module"": ""AccountManagement"" },
                                success: function (UserResponse) {
                                    $(""#loader"").show();
                                    if (UserResponse.length > 0) {
                                        for (let i = 0; i < UserResponse.length; i++) {
                                            $(""#"" + UserResponse[i]).show();
                                            if (UserResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (UserResponse[i] == ""Update"") {
                                                $(""."" + UserResponse[i]).show();
                                            }
                                            if (UserResponse[i] == ""Delete"") {
                                                $("".");
            WriteLiteral(@"Delete"").show();
                                            }
                                        }
                                        $(""#loader"").hide();
                                    }
                                    else if (RoleResponse.length > 0) {
                                        for (let i = 0; i < RoleResponse.length; i++) {
                                            $(""#"" + RoleResponse[i]).show();
                                            if (RoleResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (RoleResponse[i] == ""Update"") {
                                                $(""."" + RoleResponse[i]).show();
                                            }
                                            if (RoleResponse[i] == ""Delete"") {
                                                $("".Delete"").show();
                    ");
            WriteLiteral(@"                        }
                                        }
                                        $(""#loader"").hide();
                                    }
                                }
                            })
                        }
                    });
                    $(""#loader"").hide();
                }
                else {
                    row.child.hide();
                    tr.removeClass('shown');
                }
            });
        }

    };

    function ClearFilterToDatatable() {
        window.location.reload();
    }
</script>
<script>
    $(""#searchByValue"").on('change', function () {
        var selectedValue = $(""#searchByValue"").val();
        if (selectedValue == ""Created On"") {
            $(""#searchedValue"").val("""");
            $(""#searchedValue"").datepicker({
                format: 'dd-mm-yyyy',
                changeMonth: true,
                changeYear: true,
                autoclose: true,
               ");
            WriteLiteral(@" todayHighlight: true,
            })
            $(""#searchedValue"").attr(""readonly"", ""readonly"");
        }
        else {
            $(""#searchedValue"").datepicker(""destroy"");
            $(""#searchedValue"").removeAttr(""readonly"");
            $(""#searchedValue"").val("""");
        }
    });
</script>
<script>
    $(function () {
        $(""#Insert"").hide();
        $("".View"").hide();
        $(""#View1"").hide();
        $("".Update"").hide();
        $("".Delete"").hide();
        $("".Details"").hide();
    });
</script>
<script>
    $(function () {
        var module = $(""#Module"").val();
        $(""#loader"").show();
        $.ajax({
            url: """);
#nullable restore
#line 1120 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
             Write(Url.Action("GetRolePermissionsName", "UserPermission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            method: ""GET"",
            data: { ""Module"": ""AccountManagement"" },
            async: false,
            contentType: ""application/json; charset=utf-8"",
            dataType: ""json"",
            success: function (RoleResponse) {

                $.ajax({
                    url: """);
#nullable restore
#line 1129 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                     Write(Url.Action("GetUserPermissionsName", "UserPermission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Module"": ""AccountManagement"" },
                    async: false,
                    contentType: ""application/json; charset=utf-8"",
                    dataType: ""json"",
                    success: function (UserResponse) {

                        if (UserResponse.length > 0) {
                            for (let i = 0; i < UserResponse.length; i++) {
                                if (UserResponse[i] == ""PermissionCount"") {
                                    alert(""You don't have any permission for this module."");
                                    var url = """);
#nullable restore
#line 1141 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                                          Write(Url.Action("Index","Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
                                    url = url + ""?name=HomePage"";
                                    window.location.href = url;
                                } else {
                                    $(""#"" + UserResponse[i]).show();
                                    if (UserResponse[i] == ""View"") {
                                        $("".Details"").show();
                                        $(""#View1"").show();
                                    }
                                    if (UserResponse[i] == ""Update"") {
                                        $(""."" + UserResponse[i]).show();
                                    }
                                    if (UserResponse[i] == ""Delete"") {
                                        $(""."" + UserResponse[i]).show();
                                    }
                                }

                            }
                            $(""#loader"").hide();
                        } else if (RoleResponse.length ");
            WriteLiteral(@"> 0) {
                            for (let i = 0; i < RoleResponse.length; i++) {
                                if (RoleResponse[i] == ""PermissionCount"") {
                                    alert(""You don't have any permission for this module."");
                                    var url = """);
#nullable restore
#line 1164 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\GetHistory.cshtml"
                                          Write(Url.Action("Index","Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
                                    url = url + ""?name=HomePage"";
                                    window.location.href = url;
                                }
                                else {
                                    $(""#"" + RoleResponse[i]).show();
                                    if (RoleResponse[i] == ""View"") {
                                        $("".Details"").show();
                                        $(""#View1"").show();
                                    }
                                    if (RoleResponse[i] == ""Update"") {
                                        $(""."" + RoleResponse[i]).show();
                                    }
                                    if (RoleResponse[i] == ""Delete"") {
                                        $(""."" + RoleResponse[i]).show();
                                    }
                                }

                            }
                            $(""#loader"").hide();

                    ");
            WriteLiteral(@"    } else {
                            alert(""You don't have any permission for this module."");
                            $(""#loader"").hide();
                        }
                    }
                })
            }
        });
    });
</script>
<script>
    $(window).resize(function () {
        var allRows = $('#datatable tbody tr');
        allRows.each(function () {
            var tr = $(this).closest('tr');
            var row = $($.fn.dataTable.tables(true)).DataTable().row(tr);
            if (tr.hasClass(""shown"")) {
                row.child.hide();
                tr.removeClass('shown');
                tr.removeClass('parent');
            }
        });
    });
</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DIBN.Models.ConfirmationModel> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591

#pragma checksum "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\Index.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_AccountManagement_Index), @"mvc.1.0.view", @"/Views/AccountManagement/Index.cshtml")]
namespace AspNetCore
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Devotion Business\DIBN\DIBN\Views\_ViewImports.cshtml"
using DIBN

#nullable disable
    ;
#nullable restore
#line 2 "D:\Devotion Business\DIBN\DIBN\Views\_ViewImports.cshtml"
using DIBN.Models

#line default
#line hidden
#nullable disable
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c", @"/Views/AccountManagement/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"7d5ddeb28e6b11bd8a350250841d25befde6ee969eb2ffe12afe4b0408fac805", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_AccountManagement_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DIBN.Models.AccountManagementModel>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "-1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Credit", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Debit", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net/js/jquery.dataTables.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-bs4/js/dataTables.bootstrap4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-responsive/js/dataTables.responsive.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-responsive-bs4/js/responsive.bootstrap4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/sweetalert2/sweetalert2.all.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/sweetalert2/sweetalert2.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/select2/select2.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/select2/select2.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/bootstrap.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
#nullable disable

            WriteLiteral(@"<style>
    .datepicker{ z-index:99999 !important; }

    .ui-autocomplete {
        max-height: 200px;
        max-width: 300px;
        overflow-y: auto;
        overflow-x: hidden;
    }

    .select2-selection--single {
        height: 100% !important;
    }

    .select2-selection__rendered {
        word-wrap: break-word !important;
        width: 150px !important;
        text-overflow: inherit !important;
        white-space: normal !important;
    }

    .select2-results__option[aria-selected] {
        border-bottom: 1px dotted #000;
    }
</style>
<div id=""loader"">
    <div class=""spinner-1"">
        <div class=""center-div-1"">
            <div class=""loader-circle-75"">
            </div>
        </div>
    </div>
</div>
<div class=""row Details"">
    <div class=""col-lg-12"">
        <a class=""btn btn-theme mb-3 float-end""");
            BeginWriteAttribute("href", " href=\"", 961, "\"", 1013, 1);
            WriteAttributeValue("", 968, 
#nullable restore
#line 40 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\Index.cshtml"
                                                       Url.Action("GetHistory","AccountManagement")

#line default
#line hidden
#nullable disable
            , 968, 45, false);
            EndWriteAttribute();
            WriteLiteral(@">History</a>
    </div>
</div>
<div class=""row"" id=""Insert""> 
    <div class=""col-12"">
        <div class=""card"">
            <div class=""card-body"">
                <div class=""col-12 float-start"">
                    <h4 class=""card-title text-center"">Account Management</h4>
                    <hr style=""height:1px;"" class=""text-theme""/>
                    <div class=""table-rep-plugin"">
                        <div class=""table-responsive mb-0"" data-pattern=""priority-columns"">
                            <table id=""tblAddExpenses"" class=""table table-bordered table-striped"" style=""border-collapse: collapse; border-spacing: 0; width: 100%;"">
                                <thead>
                                    <tr>
                                        <th>
                                            Company
                                        </th>
                                        <th>
                                            Date
                                  ");
            WriteLiteral(@"      </th>
                                        <th>
                                            Description
                                        </th>
                                        <th>
                                            Type
                                        </th>
                                        <th>
                                            Amount
                                        </th>
                                        <th>
                                            Quantity
                                        </th>
                                        <th>
                                            Total Amount
                                        </th>
                                        <th>
                                            Vat 
                                        </th>
                                        <th>
                                            Vat Amount
                              ");
            WriteLiteral(@"          </th>
                                        <th>
                                            Grand Total
                                        </th>
                                        <th>

                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                                <tfoot id=""tableFooter"">
                                    <tr>
                                        <td>
                                            ");
            Write(
#nullable restore
#line 95 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\Index.cshtml"
                                             Html.DropDownListFor(w => w.CompanyId, Model.Companies, new { @class = "form-control form-select single-line",@id="Companies" })

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"
                                        </td>
                                        <td><input type=""text"" id=""txtDate"" class=""form-control"" required readonly/></td>
                                        <td><textarea rows=""3"" cols=""30"" id=""txtTask"" class=""form-control"" required></textarea></td>
                                        <td>
                                            <select class=""form-control form-select single-line"" id=""txtType"" onchange=""CheckType(this)"">
                                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c14536", async() => {
                WriteLiteral(" Select Type ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c15775", async() => {
                WriteLiteral(" Credit ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c17009", async() => {
                WriteLiteral(" Debit ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                            </select>
                                        </td>
                                        <td><input type=""text"" id=""txtAmount"" class=""form-control"" onkeyup=""ValidAlphabet(this)"" onkeypress=""ValidTextLength(this)"" maxlength=""10"" required /></td>
                                        <td>
                                            <div style=""width: 110px;"" class=""product-cart-touchspin"">
                                                <input data-toggle=""touchspin"" type=""text"" value=""01"" id=""txtQuantity"" required readonly/>
                                            </div>
                                        </td>
                                        <td><input type=""text"" id=""txtTotalAmount"" class=""form-control"" value=""0"" required readonly/></td>
                                        <td><input type=""text"" id=""txtVat"" step="".01"" class=""form-control"" onkeyup=""ValidAlphabet(this)"" onkeypress=""ValidTextLength(this)"" maxlength=""4"" value=""0");
            WriteLiteral(@""" required /></td>
                                        <td><input type=""text"" id=""txtVatAmount"" class=""form-control"" value=""0"" required readonly/></td>
                                        <td><input type=""text"" id=""txtGrandAmount"" class=""form-control"" value=""0"" required readonly/></td>
                                        <td><input type=""button"" id=""btnAdd"" class=""btn btn-theme"" value=""Add"" /></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        <input type=""button"" id=""btnSave"" class=""btn btn-theme"" value=""Save all"" />
                        <span id=""btnPaymentDetailsMessage"" class=""text-danger"">Please Wait While We Are Saving Portal Balance Details.</span>
                        <input type=""hidden"" id=""Module""");
            BeginWriteAttribute("value", " value=\"", 6467, "\"", 6488, 1);
            WriteAttributeValue("", 6475, 
#nullable restore
#line 123 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\Index.cshtml"
                                                                 Model.Module

#line default
#line hidden
#nullable disable
            , 6475, 13, false);
            EndWriteAttribute();
            WriteLiteral(" name=\"Module\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c20800", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- Required datatable js -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c21898", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c22962", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<!-- Responsive examples -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c24062", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c25126", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<!-- Bootrstrap touchspin -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c26227", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c27366", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<!-- Sweet Alerts-->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c28459", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c29524", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<!-- Select 2-->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c30605", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c31745", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "af93ecbec599f46bb453cc93f00cd2f612d1923e52ee8a3f7d0ef7855441193c32814", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script>
    $(function () {
        $(""#Insert"").hide();
        $("".View"").hide();
        $(""#View1"").hide();
        $("".Update"").hide();
        $("".Delete"").hide();
        $("".Details"").hide();
    });
</script>
<script>
    $(function () {
        var module = $(""#Module"").val();
        $(""#loader"").show();
        $.ajax({
            url: """);
            Write(
#nullable restore
#line 167 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\Index.cshtml"
                   Url.Action("GetRolePermissionsName", "UserPermission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
            method: ""GET"",
            data: { ""Module"": ""AccountManagement"" },
            async: false,
            contentType: ""application/json; charset=utf-8"",
            dataType: ""json"",
            success: function (RoleResponse) {

                $.ajax({
                    url: """);
            Write(
#nullable restore
#line 176 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\Index.cshtml"
                           Url.Action("GetUserPermissionsName", "UserPermission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Module"": ""AccountManagement"" },
                    async: false,
                    contentType: ""application/json; charset=utf-8"",
                    dataType: ""json"",
                    success: function (UserResponse) {

                        if (UserResponse.length > 0) {
                            for (let i = 0; i < UserResponse.length; i++) {
                                if (UserResponse[i] == ""PermissionCount"") {
                                    alert(""You don't have any permission for this module."");
                                    var url = """);
            Write(
#nullable restore
#line 188 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\Index.cshtml"
                                                Url.Action("Index","Home")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                                    url = url + ""?name=HomePage"";
                                    window.location.href = url;
                                } else {
                                    $(""#"" + UserResponse[i]).show();
                                    if (UserResponse[i] == ""View"") {
                                        $("".Details"").show();
                                        $(""#View1"").show();
                                    }
                                    if (UserResponse[i] == ""Update"") {
                                        $(""."" + UserResponse[i]).show();
                                    }
                                    if (UserResponse[i] == ""Delete"") {
                                        $(""."" + UserResponse[i]).show();
                                    }
                                }

                            }
                            $(""#loader"").hide();
                        } else if (RoleResponse.length ");
            WriteLiteral(@"> 0) {
                            for (let i = 0; i < RoleResponse.length; i++) {
                                if (RoleResponse[i] == ""PermissionCount"") {
                                    alert(""You don't have any permission for this module."");
                                    var url = """);
            Write(
#nullable restore
#line 211 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\Index.cshtml"
                                                Url.Action("Index","Home")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                                    url = url + ""?name=HomePage"";
                                    window.location.href = url;
                                }
                                else {
                                    $(""#"" + RoleResponse[i]).show();
                                    if (RoleResponse[i] == ""View"") {
                                        $("".Details"").show();
                                        $(""#View1"").show();
                                    }
                                    if (RoleResponse[i] == ""Update"") {
                                        $(""."" + RoleResponse[i]).show();
                                    }
                                    if (RoleResponse[i] == ""Delete"") {
                                        $(""."" + RoleResponse[i]).show();
                                    }
                                }

                            }
                            $(""#loader"").hide();

                    ");
            WriteLiteral(@"    } else {
                            alert(""You don't have any permission for this module."");
                            $(""#loader"").hide();
                        }
                    }
                })
            }
        });
    });
</script>
<script>
    function ValidAlphabet(data) {
        var code = (event.which) ? event.which : event.keyCode;  
        if (!(code>= 48 && code <=57) || !(code >=96 && code <=105) || code == 54 || code == 189 || code == 219 || code==57) {
            if (code != 32 && code != 190) {
                var digits = $(data).val();
                var lastValue = digits.substring(digits.length - 1);
                digits = digits.replace(/[^(\.\s)[^0-9-]/g, '');
                if (lastValue == ""^"" || lastValue == ""-"" || lastValue == ""("" || lastValue == "")"" || lastValue == ""["") {
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(0, lastIndex);
                    digits = cur");
            WriteLiteral(@"rentText;
                    digits = digits.replace(lastValue, '');
                }
                else if (digits.includes(""-"") || digits.includes(""^"") || digits.includes(""("")|| digits.includes("")"")|| digits.includes(""["")) {
                    if (digits.includes(""-"")) {
                        var lastIndex = digits.lastIndexOf(""-"");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes(""^"")) {
                        var lastIndex = digits.lastIndexOf(""^"");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes(""("")) {
                        var lastIndex = digits.lastIndexOf(""("");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        dig");
            WriteLiteral(@"its = currentText;
                    }
                    else if (digits.includes("")"")) {
                        var lastIndex = digits.lastIndexOf("")"");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes(""["")) {
                        var lastIndex = digits.lastIndexOf(""["");
                        var currentText = digits.substring(lastIndex+1, digits.length);
                        digits = currentText;
                    }
                }
                else if (digits.replace(/[^.]/g, """").length > 1) {
                    lastValue = digits.substring(digits.length - 1);
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(lastIndex, digits.length);
                    if (currentText.replace(/[^.]/g, """").length > 1) {
                        var currentDigits1 = di");
            WriteLiteral(@"gits.slice(0, lastIndex+1);
                        digits = currentDigits1;
                    }
                    else {
                        var currentDigits = digits.slice(0,lastIndex);
                        digits = currentDigits;
                    }

                }
                $(data).val(digits);
            }
            else if (digits.replace(/[^.]/g, """").length > 1) {
                lastValue = digits.substring(digits.length - 1);
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(lastIndex, digits.length);
                    if (currentText.replace(/[^.]/g, """").length > 1) {
                        var currentDigits1 = digits.slice(0, lastIndex+1);
                        digits = currentDigits1;
                    }
                    else {
                        var currentDigits = digits.slice(0,lastIndex);
                        digits = currentDigits;
                    }

    ");
            WriteLiteral(@"            $(data).val(digits);
            }
        }
    } 
     function ValidTextLength(data) {
        
        var digits = $(data).val();
         var currentDigits = digits.split(""."");
        if (digits.includes(""."") == true) {
            if (currentDigits[1].length >= 2) {
                event.preventDefault();
            }
        }
    }
</script>
<script>
    ////// Open Selection dropdown on focus                                     -- Yashasvi TBC (09-02-2023)
    $(document).on('focus', '.select2.select2-container', function (e) {
        if (e.originalEvent && $(this).find("".select2-selection--single"").length > 0) {
            $(this).siblings('select').select2('open');
        }
    });
    $(""#txtQuantity"").TouchSpin({
        min: 1,
        max: 20,
        boostat: 5,
        maxboostedstep: 10
    });
    $(function(){
        $(""#Companies"").select2();
    });
    $(document).ready(function () {
        $(""#loader"").hide();
    });
    $(function");
            WriteLiteral(@" () {
        var today = new Date();
        $(""#txtDate"").datepicker({
            format: 'yyyy-mm-dd',
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
            language: ""tr"",
            endDate: ""today"",
            maxDate: today
        }).on('changeDate', function (ev) {
            $(this).datepicker('hide');
        });
    });

    $(document).ready(function() {
        $(""#btnPaymentDetailsMessage"").hide();
    });
</script>
<script>
    $(""#txtAmount"").on(""keyup"",function(){
        $(""#txtTotalAmount"").val(0);
        var amount = $(""#txtAmount"").val();
        var quantity = $(""#txtQuantity"").val();
        var totalAmount = 0,grandTotal=0,vatPercentage=0;
        totalAmount = $(""#txtTotalAmount"").val();
        grandTotal =  $(""#txtGrandAmount"").val();
        vatPercentage = $(""#txtVat"").val();
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        if(parseI");
            WriteLiteral(@"nt(vatPercentage)!=0){
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if(isNaN(vatAmount)){
                vatAmount = 0;
            }
            $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        }
        else{
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        if(isNaN(grandTotal)){
            grandTotal = 0;
        }
        $(""#txtTotalAmount"").val(parseInt(totalAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });
    $(""#txtQuantity"").on(""change"",function(){
        $(""#txtTotalAmount"").val(0);
        var amount = $(""#txtAmount"").val();
        var quantity = $(""#txtQuantity"").val();
   ");
            WriteLiteral(@"     var totalAmount = 0,grandTotal=0,vatPercentage=0;
        totalAmount = $(""#txtTotalAmount"").val();
        grandTotal =  $(""#txtGrandAmount"").val();
        vatPercentage = $(""#txtVat"").val();
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        if(parseInt(vatPercentage)!=0){
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if(isNaN(vatAmount)){
                vatAmount = 0;
            }
            $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        }
        else{
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        if(isNaN(grandTotal)){
            grandTotal = 0;
        }
        $(""#txtTotalAmount"").val(par");
            WriteLiteral(@"seInt(totalAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });
    $(""#txtVat"").on(""keyup"",function(){
        var totalAmount = $(""#txtTotalAmount"").val();
        var amount = $(""#txtAmount"").val();
        var vatPercentage = $(""#txtVat"").val();
        var vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercentage))/100;
        if(isNaN(vatAmount)){
            vatAmount = 0;
        }
        var totalAmount = $(""#txtTotalAmount"").val();
        var grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        if(isNaN(grandTotal)){
            grandTotal = 0;
        }
        $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });

    $(""#txtAmount"").on(""focus"", function () {
        $(""#txtTotalAmount"").val(0);
        var amount = $(""#txtAmount"").val();
        var qu");
            WriteLiteral(@"antity = $(""#txtQuantity"").val();
        var totalAmount = 0, grandTotal = 0, vatPercentage = 0;
        totalAmount = $(""#txtTotalAmount"").val();
        grandTotal = $(""#txtGrandAmount"").val();
        vatPercentage = $(""#txtVat"").val();
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTot");
            WriteLiteral(@"al = 0;
        }
        $(""#txtTotalAmount"").val(parseInt(totalAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });
    $(""#txtQuantity"").on(""focus"", function () {
        $(""#txtTotalAmount"").val(0);
        var amount = $(""#txtAmount"").val();
        var quantity = $(""#txtQuantity"").val();
        var totalAmount = 0, grandTotal = 0, vatPercentage = 0;
        totalAmount = $(""#txtTotalAmount"").val();
        grandTotal = $(""#txtGrandAmount"").val();
        vatPercentage = $(""#txtVat"").val();
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $(""#txtVatAmount"").val(par");
            WriteLiteral(@"seFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $(""#txtTotalAmount"").val(parseInt(totalAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });
    $(""#txtVat"").on(""focus"", function () {
        var totalAmount = $(""#txtTotalAmount"").val();
        var amount = $(""#txtAmount"").val();
        var vatPercentage = $(""#txtVat"").val();
        var vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercentage)) / 100;
        if (isNaN(vatAmount)) {
            vatAmount = 0;
        }
        var totalAmount = $(""#txtTotalAmount"").val();
        var grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
        if (isNaN(totalAmount)) {
            totalAmount = ");
            WriteLiteral(@"0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });
</script>
<script>

    var UploadedReceiptFile = new Array();
    $(""body"").on(""click"",""#btnAdd"",function(){
        $(""#loader"").show();
        var amount = $(""#txtAmount"").val();
        var quantity = $(""#txtQuantity"").val();
        var totalAmount = parseInt(amount) * parseInt(quantity);
        if(isNaN(totalAmount)){
            totalAmount = 0;
        }
        $(""#txtTotalAmount"").val(totalAmount);
        var vatPercetange = $(""#txtVat"").val();
        var vatAmount = $(""#txtVatAmount"").val();
        vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercetange)) / 100;
        $(""#txtVatAmount"").val(vatAmount);
        var grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
        $(""#txtGrandAmount"").val(grandTotal);
        
    ");
            WriteLiteral(@"    var Task = $(""#txtTask"").val();
        var Amount = $(""#txtAmount"").val();
        var Quantity = $(""#txtQuantity"").val();
        var TotalAmount = $(""#txtTotalAmount"").val();
        var CompanyId = $(""#Companies"").val();
        var Type = $(""#txtType"").val();
        var date = $(""#txtDate"").val();
        var Vat = $(""#txtVat"").val();
        var VatAmount = $(""#txtVatAmount"").val();
        var GrandAmount = $(""#txtGrandAmount"").val();
        var name = $(""#Module"").val();
        if(Amount==""""||Amount==""0""||Amount==""0.0"" || Quantity == """"|| TotalAmount=="""" || Task == """" || CompanyId==""0""||Type==""-1"" || !/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)){
             if(CompanyId==""0""){
                $(""#loader"").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: fals");
            WriteLiteral(@"e
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Select Company for which you are adding Expense."",
                    'error'
                )
            }
            else if(Task==""""){
                $(""#loader"").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Name for which you are adding Expense."",
                    'error'
                )
            }else if(Amount==""""||Amount==""0""||Amount==""0.0""){
                $(""#loader"").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
        ");
            WriteLiteral(@"            confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Amount of Expense."",
                    'error'
                )
            }else if(Quantity==""""){
                $(""#loader"").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Quantity."",
                    'error'
                )
            }
            else if(TotalAmount == """"){
                $(""#loader"").hide();
       ");
            WriteLiteral(@"         const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Total Amount of This Expense"",
                    'error'
                )
            }
            else if(Type == ""-1""){
                $(""#loader"").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Select Expense Type(Credit/Debit)."",
        ");
            WriteLiteral(@"            'error'
                )
            }
            else if(!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)){
                $(""#loader"").hide();
                alert(""Please Enter Valid Date Format for Date."");
                var today = new Date();
                var dd = String(today.getDate()).padStart(2, '0');
                var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
                var yyyy = today.getFullYear();

                today = yyyy + '-' + mm + '-' + dd;
                $('#txtDate').datepicker('setDate', today);
                $(""#txtDate"").focus();
            }

        }
        else if (isNaN(parseFloat(Amount)) || isNaN(parseFloat(Vat)) ) {
            if (isNaN(parseFloat(Amount))) {
                $(""#loader"").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
");
            WriteLiteral(@"                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Valid Amount."",
                    'error'
                ).then((result) => {
                    $(""#txtAmount"").val(0);
                });
            }
            else if (isNaN(parseFloat(Vat))) {
                $(""#loader"").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Valid  Vat."",
                    'error'
                ).then((result) => {
                    $(""#txtVat"").val(0);
                });
            }
");
            WriteLiteral(@"        }
        else{  
            $(""#loader"").show();
            
            if (UploadedReceiptFile.length < 20) {
                UploadedReceiptFile.push(
                    {
                        ""Task"": Task,
                        ""Amount"": parseFloat(Amount).toFixed(2).toString(),
                        ""Quantity"": Quantity,
                        ""TotalAmount"": TotalAmount,
                        ""CompanyId"": CompanyId,
                        ""Vat"": parseFloat(Vat).toFixed(2).toString(),
                        ""VatAmount"": VatAmount,
                        ""Date"": date,
                        ""Type"": Type,
                        ""PaymentMode"": ""Cash"",
                        ""GrandTotal"": GrandAmount
                    }
                );

                var txtTask = $(""#txtTask"");
                var txtAmount = $(""#txtAmount"");
                var txtQuantity = $(""#txtQuantity"");
                var txtTotalAmount = $(""#txtTotalAmount"");
             ");
            WriteLiteral(@"   var txtFormFile = $(""#txtFormFile"");
                var Companies = $(""#Companies"");
                var txtType = $(""#txtType"");
                var txtDate = $(""#txtDate"");
                var txtVat = $(""#txtVat"");
                var txtVatAmount = $(""#txtVatAmount"");

                var txtGrandAmount = $(""#txtGrandAmount"");

                var tbody = $(""#tblAddExpenses > TBODY"")[0];

                var row = tbody.insertRow(-1);

                var cell = $(row.insertCell(-1));
                cell.html($(""#Companies :selected"").text());

                var cell = $(row.insertCell(-1));
                cell.html(txtDate.val());

                var cell = $(row.insertCell(-1));
                cell.html(txtTask.val());

                var cell = $(row.insertCell(-1));
                cell.html($(""#txtType :selected"").text());

                cell = $(row.insertCell(-1));
                cell.html(parseFloat(txtAmount.val()).toFixed(2));

                cell = $(r");
            WriteLiteral(@"ow.insertCell(-1));
                cell.html(txtQuantity.val());

                cell = $(row.insertCell(-1));
                cell.html(txtTotalAmount.val());

                cell = $(row.insertCell(-1));
                cell.html(parseFloat(txtVat.val()).toFixed(2));

                cell = $(row.insertCell(-1));
                cell.html(txtVatAmount.val());

                cell = $(row.insertCell(-1));
                cell.html(txtGrandAmount.val());

                cell = $(row.insertCell(-1));
                var btnRemove = $(""<input />"");
                btnRemove.attr(""type"", ""button"");
                btnRemove.attr(""class"", ""btn btn-theme"");
                btnRemove.attr(""onclick"", ""Remove(this);"");
                btnRemove.val(""Remove"");
                cell.append(btnRemove);

                txtTask.val("""");
                txtAmount.val("""");
                txtQuantity.val(""1"");
                txtTotalAmount.val("""");
                txtVat.val(""0"");
         ");
            WriteLiteral(@"       txtVatAmount.val(""0"");
                txtDate.val("""");
                $(""#txtDate"").datepicker('setDate', null);
                txtTotalAmount.val("""");
                txtGrandAmount.val(""0"");
                $(""#Companies"").select2('val', '0');
                if (parseInt(UploadedReceiptFile.length) < 20) {
                    $(""#Companies"").focus();
                    $(""#Companies"").select2('open');
                }
                $(""#txtType"").val(""-1"");
                $(""#txtVat"").removeAttr(""readonly"");
                if (parseInt(UploadedReceiptFile.length) == 20) {
                    const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                            confirmButton: 'ms-3 btn btn-success',
                            cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
                    })
                    swalWithBootstrapButtons.fire({
                        tit");
            WriteLiteral(@"le: 'Maximum limit is about to exceeds , Do you want to Save all entries?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes!',
                        cancelButtonText: 'No, cancel!',
                        reverseButtons: true,
                        showConfirmButton: true,
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $(""#loader"").show();
                            if (parseInt(UploadedReceiptFile.length) > 0) {
                                $('#btnSave').hide();
                                $(""#btnPaymentDetailsMessage"").show();
                                var data = JSON.stringify(UploadedReceiptFile);
                                $.ajax({
                                    contentType: 'application/json; charset=utf-8',
                                    dataType: 'json',
                                    ty");
            WriteLiteral("pe: \'POST\',\r\n                                    url: \"");
            Write(
#nullable restore
#line 827 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\Index.cshtml"
                                           Url.Action("AddCompanyExpenses", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                    data: data,
                                    success: function (result) {
                                        $(""#loader"").hide();
                                        const swalWithBootstrapButtons = Swal.mixin({
                                            customClass: {
                                                confirmButton: 'ms-3 btn btn-success',
                                                cancelButton: 'btn btn-danger'
                                            },
                                            buttonsStyling: false
                                        })
                                        swalWithBootstrapButtons.fire({
                                            title: 'Success.',
                                            text: ""Company Expense(s) Added Successfully.!!"",
                                            icon: 'success'
                                        }).then((result) => {
             ");
            WriteLiteral(@"                               $('#btnSave').show();
                                            window.location.reload();
                                        });
                                    }
                                })
                            }
                        }
                        else {
                            $(""#loader"").hide();
                            $('tfoot#tableFooter > tr').hide();
                            $('#btnSave').before(""<p class='text-danger fw-bold fs-6 pt-1 pb-1 text-center'>* Maximum limit exceeded , please click on save all button. *</p>"");
                        }
                    });
                    
                }
                $(""#loader"").hide();
            }
            else {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
           ");
            WriteLiteral(@"         },
                    buttonsStyling: false
                })

                swalWithBootstrapButtons.fire({
                    title: 'Error.',
                    text: ""Please first save all this entries before adding other entries."",
                    icon: 'error'
                }).then((result) => {
                    var txtTask = $(""#txtTask"");
                    var txtAmount = $(""#txtAmount"");
                    var txtQuantity = $(""#txtQuantity"");
                    var txtTotalAmount = $(""#txtTotalAmount"");
                    var txtFormFile = $(""#txtFormFile"");
                    var Companies = $(""#Companies"");
                    var txtType = $(""#txtType"");
                    var txtDate = $(""#txtDate"");
                    var txtVat = $(""#txtVat"");
                    var txtVatAmount = $(""#txtVatAmount"");

                    var txtGrandAmount = $(""#txtGrandAmount"");

                    txtTask.val("""");
                    txtAmount.val("""");");
            WriteLiteral(@"
                    txtQuantity.val(""1"");
                    txtTotalAmount.val("""");
                    txtVat.val(""0"");
                    txtVatAmount.val(""0"");
                    txtDate.val("""");
                    $(""#txtDate"").datepicker('setDate', null);
                    txtTotalAmount.val("""");
                    txtGrandAmount.val(""0"");
                    $(""#Companies"").select2('val', '0');
                    $(""#Companies"").focus();
                    $(""#Companies"").select2('open');
                    $(""#txtType"").val(""-1"");
                    $(""#txtVat"").removeAttr(""readonly"");

                    $(""#tblAddExpenses TBODY"").focus();
                });
            }
        }
        $(""#loader"").hide();
    });


    $(""body"").on(""click"",""#btnSave"",function(){
        $(""#loader"").show();
        if (parseInt(UploadedReceiptFile.length) > 0) {
            if ($(""#Companies"").val() != ""0"" || $(""#txtTask"").val() != """" || $(""#txtDate"").val() != """"
         ");
            WriteLiteral(@"       || ($(""#txtAmount"").val() != """" && $(""#txtAmount"").val() != ""0"" && $(""#txtAmount"").val() != ""0.0"")
                || ($(""#txtTotalAmount"").val() != """" && $(""#txtTotalAmount"").val() != ""0"" && $(""#txtTotalAmount"").val() != ""0.0"")
                || ($(""#txtGrandAmount"").val() != """" && $(""#txtGrandAmount"").val() != ""0"" && $(""#txtGrandAmount"").val() != ""0.0"")
                || ($(""#txtVatAmount"").val() != """" && ($(""#txtVat"").val() != """" && $(""#txtVat"").val() != ""0"" && $(""#txtVat"").val() != ""0.0""))
            ) {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })

                swalWithBootstrapButtons.fire({
                    title: 'One entry is Left. Do you want to Continue ?',
                    text: ""You won't be able to revert this!"",");
            WriteLiteral(@"
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes!',
                    cancelButtonText: 'No, cancel!',
                    reverseButtons: true,
                    showConfirmButton: true,
                }).then((result) => {
                    if (result.isConfirmed) {
                        $(""#loader"").show();
                        if (parseInt(UploadedReceiptFile.length) > 0) {
                            $('#btnSave').hide();
                            $(""#btnPaymentDetailsMessage"").show();
                            var data = JSON.stringify(UploadedReceiptFile);
                            $.ajax({
                                contentType: 'application/json; charset=utf-8',
                                dataType: 'json',
                                type: 'POST',
                                url: """);
            Write(
#nullable restore
#line 948 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\Index.cshtml"
                                       Url.Action("AddCompanyExpenses","AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                data: data,
                                success: function(result) {
                                    $(""#loader"").hide();
                                    const swalWithBootstrapButtons = Swal.mixin({
                                        customClass: {
                                            confirmButton: 'ms-3 btn btn-success',
                                            cancelButton: 'btn btn-danger'
                                        },
                                        buttonsStyling: false
                                    })
                                    swalWithBootstrapButtons.fire({
                                        title: 'Success.',
                                        text: ""Company Expense(s) Added Successfully.!!"",
                                        icon: 'success'
                                    }).then((result) => {
                                        $('#btnSave').show();
           ");
            WriteLiteral(@"                             window.location.reload();
                                    });
                                }
                            })
                        }
                        else {
                            $(""#loader"").hide();
                            const swalWithBootstrapButtons = Swal.mixin({
                                customClass: {
                                    confirmButton: 'ms-3 btn btn-success',
                                    cancelButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            })
                            swalWithBootstrapButtons.fire({
                                title: 'Error.',
                                text: ""Please Add Expenses/Credits for Company(s)"",
                                icon: 'error'
                            }).then((result) => {
                                $(""#tblAddExpenses TBODY"").focus();");
            WriteLiteral(@"
                            });
                        }
                    }
                });
            }
            else{
                $(""#loader"").show();
                $('#btnSave').hide();
                $(""#btnPaymentDetailsMessage"").show();
                var data = JSON.stringify(UploadedReceiptFile);
                $.ajax({
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    type: 'POST',
                    url: """);
            Write(
#nullable restore
#line 999 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\Index.cshtml"
                           Url.Action("AddCompanyExpenses","AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                    data: data,
                    success: function(result) {
                        $(""#loader"").hide();
                        const swalWithBootstrapButtons = Swal.mixin({
                            customClass: {
                                confirmButton: 'ms-3 btn btn-success',
                                cancelButton: 'btn btn-danger'
                            },
                            buttonsStyling: false
                        })
                        swalWithBootstrapButtons.fire({
                            title: 'Success.',
                            text: ""Company Expense(s) Added Successfully.!!"",
                            icon: 'success'
                        }).then((result) => {
                            $('#btnSave').show();
                            window.location.reload();
                        });
                    }
                })
            }
        }
        else {
            $(""#loader"").hide();
");
            WriteLiteral(@"            const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
                    })
            swalWithBootstrapButtons.fire({
                title: 'Error.',
                text: ""Please Add Expenses/Credits for Company(s)"",
                icon: 'error'
            }).then((result) => {
                $(""#tblAddExpenses TBODY"").focus();     
            });
        }
        $(""#loader"").hide();
    });

    function Remove(data){
        var row = $(data).closest(""TR"");
        var task = $(""TD"",row).eq(1).html();
        if(confirm(""Are you sure you want to delete this :""+task)){
            var table = $(""#tblAddExpenses"")[0];
            var remove = UploadedReceiptFile.splice(row[0].rowIndex-1,1);
            table.deleteRow(row[0].rowIndex);
        ");
            WriteLiteral("}\r\n    };\r\n\r\n</script>\r\n<script>\r\n\r\n$(document).ready(function () {  \r\n    $(\"#txtTask\").autocomplete({  \r\n        minLength: 0,\r\n        source: function(request,response) {  \r\n            $.ajax({  \r\n                url: \"");
            Write(
#nullable restore
#line 1060 "D:\Devotion Business\DIBN\DIBN\Views\AccountManagement\Index.cshtml"
                       Url.Action("GetTaskDetails","PortalBalanceExpense")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",  
                type: ""GET"",  
                dataType: ""json"",  
                data: { prefix: request.term },  
                success: function (data) {  
                    if (data.length > 0) {
                        
                        response($.map(data, function (item) {
                            return {
                                label: item,
                                val: item
                            };
                        }))
                    }
                }  
            })  
        },
        focus: function () {
            return false;
        },
    }); 
    $('#txtTask').on(""keydown"", function (event) {
        if (event.keyCode === $.ui.keyCode.TAB && $(this).data(""autocomplete"").menu.active) {
            event.preventDefault();
        }
    });
}); 
</script>
<script>
    function CheckType(type){
        
        if($(type).val()==""Credit""){
            $(""#txtVat"").attr(""readonly"",""readonly"");
            ");
            WriteLiteral("$(\"#txtVatAmount\").attr(\"readonly\",\"readonly\");\r\n        }\r\n        else if($(type).val()==\"Debit\"){\r\n            $(\"#txtVat\").removeAttr(\"readonly\");\r\n        }\r\n    }\r\n\r\n</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DIBN.Models.AccountManagementModel> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591

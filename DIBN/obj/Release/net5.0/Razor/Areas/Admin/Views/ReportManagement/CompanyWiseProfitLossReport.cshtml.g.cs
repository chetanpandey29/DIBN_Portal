#pragma checksum "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef5"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_ReportManagement_CompanyWiseProfitLossReport), @"mvc.1.0.view", @"/Areas/Admin/Views/ReportManagement/CompanyWiseProfitLossReport.cshtml")]
namespace AspNetCore
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN

#nullable disable
    ;
#nullable restore
#line 2 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.Models

#nullable disable
    ;
#nullable restore
#line 3 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.Data

#nullable disable
    ;
#nullable restore
#line 4 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.IRepository

#nullable disable
    ;
#nullable restore
#line 5 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.Repository

#line default
#line hidden
#nullable disable
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef5", @"/Areas/Admin/Views/ReportManagement/CompanyWiseProfitLossReport.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"605a41b4408e5d1ff247f7264e35f4305eb9eeecf14a77cb4f30041778bbf31f", @"/Areas/Admin/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Areas_Admin_Views_ReportManagement_CompanyWiseProfitLossReport : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/dibn_business_image/paper_2.jpg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("img-fluid text-center"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/dibn_business_image/seo-investment-business-data-analysis-optimization_18660-3125.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("img-fluid text-center mt-2"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "01", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "02", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "03", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "04", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "05", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "06", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "07", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "08", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "09", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "10", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "11", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "12", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-responsive/js/dataTables.responsive.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-responsive-bs4/js/responsive.bootstrap4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
  
    ViewData["Title"] = "Company(s)";

#line default
#line hidden
#nullable disable

            WriteLiteral(@"
<style>
    .addEffect {
        /*box-shadow: 3px 1px #243c7c;*/
        box-shadow: 3px 1px #243c7c;
    }

    .datepicker {
        z-index: 99999 !important;
    }
</style>
<div id=""loader"">
    <div class=""spinner-1"">
        <div class=""center-div-1"">
            <div class=""loader-circle-75"">
            </div>
        </div>
    </div>
</div>

<div class=""row Details"">
    <div class=""col-md-12"">
        <a class=""mb-2 float-end btn btn-theme"" id=""generateSelectedCompanyReport"" role=""button"" target=""_blank"">Generate Report(All Selected)</a>
    </div>
</div>

<div class=""row"" id=""View"">
    <div class=""col-md-12"">
        <div class=""card"">
            <div class=""card-header"">
                <h3 class=""text-center front-text-theme fw-bold"">Profit & Loss Report</h3>
                <h6 class=""text-center front-text-theme fw-bold"">Company(s)</h6>
            </div>
            <div class=""card-body"">
                <div class=""table-rep-plugin"">
                  ");
            WriteLiteral(@"  <div class=""table-responsive mb-0"" data-pattern=""priority-columns"">
                        <table id=""datatable"" class=""table table-bordered table-striped dt-responsive nowrap"" style=""border-collapse:collapse;border-spacing:0;width:100%;"">
                            <thead>
                                <tr>
                                    <th>
");
            WriteLiteral(@"                                    </th>
                                    <th>
                                        Company Account Number
                                    </th>
                                    <th>
                                        Company
                                    </th>
                                    <th>

                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<input type=""hidden"" name=""SelectedType"" id=""SelectedType"" />
<input type=""hidden"" name=""SelectedPdfExcelType"" id=""SelectedPdfExcelType"" />

<div class=""modal fade bd-example-modal-lg"" id=""multipleDownloadErrorModal"" role=""dialog"" data-bs-keyboard=""false"" data-bs-backdrop=""static");
            WriteLiteral(@""" style=""z-index:10000 !important;"">
    <div class=""modal-dialog modal-dialog-centered modal-lg"" role=""document"">
        <div class=""modal-content"">
           <div class=""modal-header bg-blue"" style=""justify-content:center !important;"">
               <h5 class=""text-white"">Step(s) to turn off a Pop-up blocker in your web browser.</h5>
           </div>
           <div class=""modal-body pt-0"">
               <div class=""col-md-12 mt-1"">
                    <h6><i class=""fas fa-caret-right""></i>  Turn off pop-ups blocker on a <b style=""font-size:18px !important;"">Mac</b> :</h6>
                    <p class=""text-left pl-3"">Just open your Safari browser, go to the drop-down menu, click Preferences and follow these steps:</p>
                    <ol>
                        <li>Select Websites</li>
                        <li>Click Pop-up Windows in the left navigation pane</li>
                        <li>Locate When visiting other websites in the lower right of the screen</li>
                ");
            WriteLiteral(@"        <li>Click the drop-down menu and select ""Allow"" from the following options.</li>
                    </ol>
               </div>
               <hr class=""border border-theme""/>
               <div class=""col-md-12 mt-1"">
                    <h6><i class=""fas fa-caret-right""></i>  Turn off pop-ups blocker on a <b style=""font-size:18px !important;"">Chrome</b> :</h6>
                    <p class=""text-left pl-3"">Just open your Chrome browser, open the browser menu by clicking the three dots in the upper right corner, and follow these steps :</p>
                    <ol>
                        <li>Click Settings > Privacy and security > Site settings</li>
                        <li>Scroll down to Pop-ups and redirects and click the arrow on the right to open the menu where you can set your preferences</li>
                        <li>To allow pop-ups on specific websites, scroll to Allowed to send pop-ups and use redirects, and click Add</li>
                        <li>Enter the website nam");
            WriteLiteral(@"e (first copy Portal URL without login and paste that URL into this box.) and save by clicking Add</li>
                    </ol>
               </div>
                <hr class=""border border-theme"" />
                <div class=""col-md-12 mt-1"">
                    <h6><i class=""fas fa-caret-right""></i>  Turn off pop-ups blocker on a <b style=""font-size:18px !important;"">Mozilla Firefox</b> :</h6>
                    <p class=""text-left pl-3"">Just open your Mozilla Firefox browser , open the browser menu by clicking the three dots in the upper right corner, and follow these steps :</p>
                    <ol>
                        <li>Settings > Privacy & Security > Permissions and uncheck Block pop-up windows.</li>
                    </ol>
                </div>
                <hr class=""border border-theme"" />
                <div class=""col-md-12 mt-1"">
                    <h6><i class=""fas fa-caret-right""></i>  Turn off pop-ups blocker on a <b style=""font-size:18px !important;"">Microso");
            WriteLiteral(@"ft Edge</b> :</h6>
                    <p class=""text-left pl-3"">Just open your Microsoft Edge browser, open the browser menu by clicking the three dots in the upper right corner, and follow these steps :</p>
                    <ol>
                        <li>Settings > Cookies and site permissions > Pop-ups and redirects and turn off the switch of Block.</li>
                    </ol>
                </div>
           </div>
           <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-theme"" data-dismiss=""modal"" id=""multipleDownloadErrorCloseModal"">Close</button>
            </div>
        </div>
    </div>
</div>

<div class=""modal fade bd-example-modal-lg"" id=""reportSelectionModal"" role=""dialog"" data-bs-keyboard=""false"" data-bs-backdrop=""static"">
    <div class=""modal-dialog modal-dialog-centered modal-lg"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"" style=""justify-content:center !important;"">
                <h");
            WriteLiteral(@"5 class=""text-center"" id=""reportSelectionModalTitle"">Profit & Loss Report</h5>
            </div>
            <h5 class=""text-center front-text-theme fw-bold mt-2 mb-0"" id=""showSelectedType""></h5>
            <div class=""modal-body pt-0"">
                <div class=""col-md-12 mt-4 mb-3"" id=""SelectPdfOrGraphType"">
                    <div class=""row text-center justify-content-center"">
                        <div class=""col-md-4 col-sm-6 p-1 mx-3 mt-1 float-left border rounded-3 bg-white border-theme"" style=""cursor:pointer;"" onclick=""SelectRangeType('Pdf or Excel');"" onmouseover=""addeffect1();"" onmouseout=""removeeffect1();"" id=""effect1"">
                            <p class=""front-text-theme text-center h5 text-truncate text-break mt-2"">Pdf or Excel</p>
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef518572", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </div>
                        <div class=""col-md-4 col-sm-6 p-1 mx-3 mt-1 float-left border rounded-3 bg-white border-theme"" style=""cursor:pointer;"" onclick=""SelectRangeType('Graph');"" onmouseover=""addeffect2();"" onmouseout=""removeeffect2();"" id=""effect2"">
                            <p class=""front-text-theme text-center h5 text-truncate text-break mt-2"">Graph</p>
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef520147", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </div>
                    </div>
                </div>
                <div class=""col-md-12 mt-4 mb-3"" id=""SelectedPdfOrExcelType"" hidden=""hidden"">
                    <div class=""row text-center justify-content-center"">
                        <div class=""col-md-2 col-sm-4 p-1 mx-3 mt-1 float-left"" id=""Weekly"">
                            <input type=""radio"" name=""SelectedPdfExcelOptionType"" class=""form-check-input"" value=""Weekly"" onclick=""GetPdfExcelSelectedType('Pdf');"" /><span class=""front-text-theme text-center h5 text-truncate text-break mt-2 ms-2"">PDF</span>
                        </div>
                        <div class=""col-md-2 col-sm-4 p-1 mx-3 mt-1 float-left"" id=""Monthly"">
                            <input type=""radio"" name=""SelectedPdfExcelOptionType"" class=""form-check-input"" value=""Monthly"" onclick=""GetPdfExcelSelectedType('Excel');"" /><span class=""front-text-theme text-center h5 text-truncate text-break mt-2 ms-2"">EXCEL</span>
                        <");
            WriteLiteral(@"/div>
                    </div>
                </div>
                <div class=""col-md-12 mt-4 mb-3"" id=""SelectedRangeType"" hidden=""hidden"">
                    <div class=""row text-center justify-content-center"">
                        <div class=""col-md-2 col-sm-4 p-1 mx-3 mt-1 float-left"" id=""Weekly"">
                            <input type=""radio"" name=""SelectedOptionType"" class=""form-check-input"" value=""Weekly"" onclick=""GetSelectedType('Weekly');"" /><span class=""front-text-theme text-center h5 text-truncate text-break mt-2 ms-2"">Weekly</span>
                        </div>
                        <div class=""col-md-2 col-sm-4 p-1 mx-3 mt-1 float-left"" id=""Monthly"">
                            <input type=""radio"" name=""SelectedOptionType"" class=""form-check-input"" value=""Monthly"" onclick=""GetSelectedType('Monthly');"" /><span class=""front-text-theme text-center h5 text-truncate text-break mt-2 ms-2"">Monthly</span>
                        </div>
                        <div class=""col-md-2 co");
            WriteLiteral(@"l-sm-4 p-1 mx-3 mt-1 float-left"" id=""Yearly"">
                            <input type=""radio"" name=""SelectedOptionType"" class=""form-check-input"" value=""Yearly"" onclick=""GetSelectedType('Yearly');"" /><span class=""front-text-theme text-center h5 text-truncate text-break mt-2 ms-2"">Yearly</span>
                        </div>
                        <div class=""col-md-2 col-sm-4 p-1 mx-3 mt-1 float-left"" id=""Custom"">
                            <input type=""radio"" name=""SelectedOptionType"" class=""form-check-input"" value=""Custom"" onclick=""GetSelectedType('Custom');"" checked=""checked"" /><span class=""front-text-theme text-center h5 text-truncate text-break mt-2 ms-2"">Custom</span>
                        </div>
                    </div>
                </div>

                <div id=""weeklySelection"" hidden=""hidden"">
                    <div class=""row text-center justify-content-center"">
                        <div class=""col-md-2 col-sm-4 p-1 mx-3 mt-2 float-left"">
                            <butt");
            WriteLiteral(@"on class=""btn btn-theme"" id=""weeklyReport"">
                                Generate Report
                            </button>
                        </div>
                    </div>
                </div>

                <div id=""monthSelection"" hidden=""hidden"">
                    <div class=""row text-center justify-content-center"">
                        <div class=""col-md-4 col-sm-6 p-1 mx-3 mt-1 float-left"">
                            <p class=""front-text-theme text-center h5 text-truncate text-break mt-2 ms-2"">Select Month :</p>
                            <select name=""selectMonth"" id=""selectMonth"" class=""form-control form-select"">
                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef525291", async() => {
                WriteLiteral("Select Month");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef526824", async() => {
                WriteLiteral("January");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef528041", async() => {
                WriteLiteral("February");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef529259", async() => {
                WriteLiteral("March");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef530474", async() => {
                WriteLiteral("April");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef531689", async() => {
                WriteLiteral("May");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef532902", async() => {
                WriteLiteral("June");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_10.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef534118", async() => {
                WriteLiteral("July");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_11.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef535334", async() => {
                WriteLiteral("August");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef536552", async() => {
                WriteLiteral("September");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_13.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef537773", async() => {
                WriteLiteral("October");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_14.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef538992", async() => {
                WriteLiteral("November");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_15.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef540212", async() => {
                WriteLiteral("December");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_16.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                            </select>
                        </div>
                        <div class=""col-md-4 col-sm-6 p-1 mx-3 mt-1 float-left"">
                            <p class=""front-text-theme text-center h5 text-truncate text-break mt-2 ms-2"">Select Year :</p>
                            <select name=""selectYear"" id=""selectYear"" class=""form-control form-select"">
                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef541824", async() => {
                WriteLiteral("Select Year");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                            </select>
                        </div>
                    </div>
                    <div class=""row text-center justify-content-center"">
                        <div class=""col-md-2 col-sm-4 p-1 mx-3 mt-2 float-left"">
                            <button class=""btn btn-theme"" id=""monthReport"">
                                Generate Report
                            </button>
                        </div>
                    </div>
                </div>

                <div id=""yearSelection"" hidden=""hidden"">
                    <div class=""row text-center justify-content-center"">
                        <div class=""col-md-4 col-sm-6 p-1 mx-3 mt-1 float-left"">
                            <p class=""front-text-theme text-center h5 text-truncate text-break mt-2 ms-2"">Select Year :</p>
                            <select name=""selectYear"" id=""selectedYear"" class=""form-control form-select"">
                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef544331", async() => {
                WriteLiteral("Select Year");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                            </select>
                        </div>
                    </div>
                    <div class=""row text-center justify-content-center"">
                        <div class=""col-md-2 col-sm-4 p-1 mx-3 mt-2 float-left"">
                            <button class=""btn btn-theme"" id=""yearReport"">
                                Generate Report
                            </button>
                        </div>
                    </div>
                </div>

                <div id=""customSelection"" hidden=""hidden"">
                    <div class=""row text-center justify-content-center"">
                        <div class=""col-md-4 col-sm-6 p-1 mx-3 mt-1 float-left"">
                            <p class=""front-text-theme text-center h5 text-truncate text-break mt-2 ms-2"">From Date :</p>
                            <input name=""FromDate"" class=""form-control"" id=""FromDate"" placeholder=""yyyy-mm-dd"" readonly />
                        </div>
                      ");
            WriteLiteral(@"  <div class=""col-md-4 col-sm-6 p-1 mx-3 mt-1 float-left"">
                            <p class=""front-text-theme text-center h5 text-truncate text-break mt-2 ms-2"">To Date :</p>
                            <input name=""ToDate"" class=""form-control"" id=""ToDate"" placeholder=""yyyy-mm-dd"" readonly />
                        </div>
                    </div>
                    <div class=""row text-center justify-content-center"">
                        <div class=""col-md-2 col-sm-4 p-1 mx-3 mt-2 float-left"">
                            <button class=""btn btn-theme"" id=""customReport"">
                                Generate Report
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-theme"" data-dismiss=""modal"" id=""reportSelectionCloseModal"">Close</button>
            </div>
        </div>
    </div>
</div>


");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef547955", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef549024", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba31bcb00ca3fae25c740a708af232e37cbe6268ba7625cdc5a215cede3cdef550089", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script>
    function addeffect1() {
        $(""#effect1"").addClass(""addEffect"");
    };

    function removeeffect1() {
        $(""#effect1"").removeClass(""addEffect"");
    };

    function addeffect2() {
        $(""#effect2"").addClass(""addEffect"");
    };

    function removeeffect2() {
        $(""#effect2"").removeClass(""addEffect"");
    };
</script>
<script>
    function GetSelectedType(getSelectedName) {
        if (getSelectedName == ""Weekly"") {
            $(""#monthSelection"").attr(""hidden"", ""hidden"");
            $(""#yearSelection"").attr(""hidden"", ""hidden"");
            $(""#weeklySelection"").removeAttr(""hidden"");
            $(""#customSelection"").attr(""hidden"", ""hidden"");
        }
        else if (getSelectedName == ""Monthly"") {
            $(""#monthSelection"").removeAttr(""hidden"");
            $(""#yearSelection"").attr(""hidden"", ""hidden"");
            $(""#weeklySelection"").attr(""hidden"", ""hidden"");
            $(""#customSelection"").attr(""hidden"", ""hidden"");
        }
  ");
            WriteLiteral(@"      else if (getSelectedName == ""Yearly"") {
            $(""#monthSelection"").attr(""hidden"", ""hidden"");
            $(""#yearSelection"").removeAttr(""hidden"");
            $(""#weeklySelection"").attr(""hidden"", ""hidden"");
            $(""#customSelection"").attr(""hidden"", ""hidden"");
        }
        else if (getSelectedName == ""Custom"") {
            $(""#monthSelection"").attr(""hidden"", ""hidden"");
            $(""#yearSelection"").attr(""hidden"", ""hidden"");
            $(""#customSelection"").removeAttr(""hidden"");
            $(""#weeklySelection"").attr(""hidden"", ""hidden"");
        }
    };

    function SelectRangeType(selectedType) {
        if (selectedType == ""Pdf or Excel"") {
            $(""#SelectedPdfOrExcelType"").removeAttr(""hidden"");
            $(""#SelectPdfOrGraphType"").attr(""hidden"", ""hidden"");
            $(""#SelectedType"").val(selectedType);
            $(""#showSelectedType"").text(selectedType);
        }
        else {
            $(""#SelectedType"").val(selectedType);
            $(");
            WriteLiteral(@"""#showSelectedType"").text(selectedType);
            $(""#SelectPdfOrGraphType"").attr(""hidden"", ""hidden"");
            $(""#showBackButtonBlock"").removeAttr(""hidden"");
            $(""#SelectedRangeType"").removeAttr(""hidden"");
            $(""#customSelection"").removeAttr(""hidden"");
        }
    };

    function GetPdfExcelSelectedType(selectedType) {
        $(""#SelectedPdfExcelType"").val(selectedType);
        $(""#showSelectedType"").text(selectedType);
        $(""#SelectedPdfOrExcelType"").attr(""hidden"", ""hidden"");
        $(""#showBackButtonBlock"").removeAttr(""hidden"");
        $(""#SelectedRangeType"").removeAttr(""hidden"");
        $(""#customSelection"").removeAttr(""hidden"");
    }

    $(""#backButtonReport"").on('click', function () {
        $(""#SelectPdfOrGraphType"").removeAttr(""hidden"");
        $(""#SelectedRangeType"").attr(""hidden"", ""hidden"");
        $(""#monthSelection"").attr(""hidden"", ""hidden"");
        $(""#yearSelection"").attr(""hidden"", ""hidden"");
        $(""#weeklySelection"").attr(""h");
            WriteLiteral(@"idden"", ""hidden"");
        $(""#customSelection"").attr(""hidden"", ""hidden"");
        $(""#showSelectedType"").text("""");
        $(""#showBackButtonBlock"").attr(""hidden"", ""hidden"");
    });

    $(""#backsButtonReport"").on('click', function () {
        var url = """);
            Write(
#nullable restore
#line 348 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                    Url.Action("CompanyWiseProfitLossReport","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
        window.location.href = url;
    });

    // Generate Year Select List from year 2020 to current year
    $(document).ready(function () {
        const d = new Date();
        let year = d.getFullYear();
        var yearRange = new Array();
        var previousYear = ""2020"";
        var indexRange = parseInt(year) - parseInt(previousYear);

        for (var index = 0; index <= indexRange; index++) {
            if (parseInt(year) == parseInt(previousYear)) {
                $(""#selectYear"").append('<option value=' + parseInt(previousYear) + ' selected=""selected"">' + parseInt(previousYear) + '</option>');
                $(""#selectedYear"").append('<option value=' + parseInt(previousYear) + ' selected=""selected"">' + parseInt(previousYear) + '</option>');
            }
            else {
                $(""#selectYear"").append('<option value=' + parseInt(previousYear) + '>' + parseInt(previousYear) + '</option>');
                $(""#selectedYear"").append('<option value=' + parseInt(");
            WriteLiteral(@"previousYear) + '>' + parseInt(previousYear) + '</option>');
            }
            previousYear = parseInt(previousYear) + 1;
        }
    });

    $(function () {
        $(""#FromDate"").datepicker({
            format: 'yyyy-mm-dd',
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate() + 1);
            $('#ToDate').datepicker('setStartDate', minDate);
        });

        $(""#ToDate"").datepicker({
            format: 'yyyy-mm-dd',
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate() - 1);
            $('#FromDate').datepicker('setEndDate', minDate)");
            WriteLiteral(@";
        });
    });

    $(function () {
        $(""#WeeklyFromDate"").datepicker({
            format: 'yyyy-mm-dd',
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            var maxDate = new Date(selected.date);
            minDate.setDate(minDate.getDate() + 6);
            $('#WeeklyToDate').datepicker('setEndDate', minDate);
            $('#WeeklyToDate').datepicker('setStartDate', maxDate);
        });

        $(""#WeeklyToDate"").datepicker({
            format: 'yyyy-mm-dd',
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            var maxDate = new Date(selected.date);
            var weeklyFromDate = $(""#WeeklyFromDate""");
            WriteLiteral(@").val();
            minDate.setDate(minDate.getDate() - 6);
            $('#WeeklyFromDate').datepicker('setStartDate', minDate);
            $('#WeeklyFromDate').datepicker('setEndDate', maxDate);
        });
    });
</script>
<script>
    $(""#customReport"").on('click', function () {
        var FromDate = $(""#FromDate"").val();
        var ToDate = $(""#ToDate"").val();
        var companyId = $(""#companyId"").val();
        var SelectedPdfExcelType = $(""#SelectedPdfExcelType"").val();
        var SelectedType = $(""#SelectedType"").val();
        var selected = new Array();

        var flag = true, firstFlag = true;
        var index = 0;
        var win;
        var currentHourTime = new Date().getHours();
        var currentMinTime = new Date().getMinutes();
        var currentTime = new Date();
        var nextTime = new Date();

        var retrievedObject = localStorage.getItem('profitLossReportSelectedCompany');
        
        if(retrievedObject != null && retrievedObject != ""[");
            WriteLiteral(@"]""){
            var removeExtra = retrievedObject.replace(""["","""");
            removeExtra = removeExtra.replace(""]"","""");
            var splitData = removeExtra.split("","");
            if(splitData.length > 0 && splitData != null){
                for(var ind=0;ind<splitData.length;ind++){
                    selected.push(parseInt(splitData[ind]));
                }
            }
        }

        if (selected.length != 0) {
            if (FromDate != null && FromDate != """" && FromDate != ""undefined"") {
                if (ToDate != null && ToDate != """" && ToDate != ""undefined"") {
                    if (ToDate < FromDate) {
                        alert(""Please select proper date, To Date should be greater than From Date."");
                        return false;
                    }
                    else {
                        localStorage.removeItem('profitLossReportSelectedCompany');
                        if (SelectedType == ""Pdf or Excel"") {
                            i");
            WriteLiteral(@"f (SelectedPdfExcelType == ""Pdf"") {
                                $(""#loader"").show();
                                $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                                for (; index < selected.length;) {
                                    pdfDownload(selected[index]);
                                }
                                $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                                $(""#loader"").hide();
                            }
                            else {
                                if (SelectedType == ""Pdf or Excel"") {
                                    if (SelectedPdfExcelType == ""Excel"") {
                                        $(""#loader"").show();
                                        $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                                        for (; index < selected.length;) {
                                            excelDownload(selected[ind");
            WriteLiteral(@"ex]);
                                        }
                                        $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                                        $(""#loader"").hide();
                                    }
                                }
                            }
                        }
                        else {
                            $(""#loader"").show();
                            $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                            for (var i = 0; i < selected.length; i++) {
                                var url = """);
            Write(
#nullable restore
#line 497 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                                            Url.Action("ProfitLossCompanyCustomReportGraph","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                                url = url + ""?fromDate="" + FromDate + ""&toDate="" + ToDate + ""&companyId="" + selected[i];
                                win = window.open();
                                if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                                    //alert(""Please disable your pop-up blocker to use this feature."");
                                    //setTimeout(() => {
                                    //    window.location.reload();
                                    //},3000);
                                    $mymodal = $(""#multipleDownloadErrorModal"");
                                    $mymodal.find(""div.modal-body"");
                                    $mymodal.modal(""show"");
                                } 
                                else{
                                    win.location.href = url;
                                }
   ");
            WriteLiteral(@"                         }
                            $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                            $(""#loader"").hide();
                        }

                        window.location.reload();
                    }
                }
                else {
                    alert(""Please select till which date you want to generate report.!"");
                    return false;
                }
            }
            else {
                alert(""Please select from which date you want to generate report.!"");
                return false;
            }
        }
        else {
            alert(""Please select company(s), for which you want to generate report.!"");
            return false;
        }

        function pdfDownload(company) {
            var url = """);
            Write(
#nullable restore
#line 536 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                        Url.Action("ProfitLossMultipleCompanyCustomReportPdf","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
            if (flag) {
                var windowText = ""window "" + company.toString();
                url = url + ""?fromDate="" + FromDate + ""&toDate="" + ToDate + ""&companyId="" + company;
                win = window.open();
                
                if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                    //alert(""Please disable your pop-up blocker to use this feature."");
                    //setTimeout(() => {
                    //    window.location.reload();
                    //},3000);
                     $mymodal = $(""#multipleDownloadErrorModal"");
                    $mymodal.find(""div.modal-body"");
                    $mymodal.modal(""show"");
                } 
                else{
                    win.location.href = url;
                    currentHourTime = new Date().getHours();
                    currentMinTime = new Date().getSeconds();

             ");
            WriteLiteral(@"       currentTime.setSeconds(currentMinTime + 1);
                    flag = false;
                }
            }

            nextTime = new Date();
            if (currentTime < nextTime) {
                index++;
                flag = true;
                win.close(url);
            }
        }

        function excelDownload(company) {
            var url = """);
            Write(
#nullable restore
#line 570 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                        Url.Action("ProfitLossMultipleCompanyCustomReportExcel","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
            if (flag) {
                var windowText = ""window "" + company.toString();
                url = url + ""?fromDate="" + FromDate + ""&toDate="" + ToDate + ""&companyId="" + company;
                win = window.open();
                if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                    //alert(""Please disable your pop-up blocker to use this feature."");
                    //setTimeout(() => {
                    //    window.location.reload();
                    //},3000);
                     $mymodal = $(""#multipleDownloadErrorModal"");
                    $mymodal.find(""div.modal-body"");
                    $mymodal.modal(""show"");
                } 
                else{
                    win.location.href = url;
                    currentHourTime = new Date().getHours();
                    currentMinTime = new Date().getSeconds();

                    currentTime");
            WriteLiteral(@".setSeconds(currentMinTime + 1);
                    flag = false;
                }
            }

            nextTime = new Date();
            if (currentTime < nextTime) {
                
                index++;
                flag = true;
                win.close(url);
            }
        }
    });

    $(""#weeklyReport"").on('click', function () {
        var companyId = $(""#companyId"").val();
        var url = """);
            Write(
#nullable restore
#line 606 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                    Url.Action("ProfitLossCompanyWeeklyReport","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
        var currentStartDate = new Date();
        var currentEndDate = new Date();
        var currentDay = currentStartDate.getDay();
        var SelectedType = $(""#SelectedType"").val();
        var selected = new Array();
        var SelectedPdfExcelType = $(""#SelectedPdfExcelType"").val();

        var flag = true, firstFlag = true;
        var index = 0;
        var win;
        var currentHourTime = new Date().getHours();
        var currentMinTime = new Date().getMinutes();
        var currentTime = new Date();
        var nextTime = new Date();

        var retrievedObject = localStorage.getItem('profitLossReportSelectedCompany');

        if(retrievedObject != null && retrievedObject != ""[]""){
            var removeExtra = retrievedObject.replace(""["","""");
            removeExtra = removeExtra.replace(""]"","""");
            var splitData = removeExtra.split("","");
            if(splitData.length > 0 && splitData != null){
                for(var ind=0;ind<splitData.length;ind++){");
            WriteLiteral(@"
                    selected.push(parseInt(splitData[ind]));
                }
            }
        }

        localStorage.removeItem('profitLossReportSelectedCompany');

        if (selected.length != 0) {
            if (currentDay == 0) {
                var startingDate = currentStartDate.setDate(currentStartDate.getDate() - 6);
                var endingDate = currentDate;

                var startDate = new Date(startingDate);
                var endDate = new Date(endingDate);

                startMonth = (startDate.getMonth() + 1).toString();
                endMonth = (endDate.getMonth() + 1).toString();

                var startDay = startDate.getDate().toString();
                var endDay = endDate.getDate().toString();

                if (startDay.length <= 1) {
                    startDay = ""0"" + (startDate.getDate()).toString();
                }
                else {
                    startDay = (startDate.getDate()).toString();
                }


   ");
            WriteLiteral(@"             if (endDay.length <= 1) {
                    endDay = ""0"" + (endDate.getDate()).toString();
                }
                else {
                    endDay = (endDate.getDate()).toString();
                }

                if (startMonth.length <= 1) {
                    startMonth = ""0"" + (startDate.getMonth() + 1);
                }
                else {
                    startMonth = (startDate.getMonth() + 1);
                }

                if (endMonth.length <= 1) {
                    endMonth = ""0"" + (endDate.getMonth() + 1).toString();
                }
                else {
                    endMonth = (endDate.getMonth() + 1).toString();
                }

                var finalStartDate = startDate.getFullYear() + '-' + startMonth + '-' + startDay;
                var finalEndDate = endDate.getFullYear() + '-' + endMonth + '-' + endDay;

                if (SelectedType == ""Pdf or Excel"") {
                    if (SelectedPdfExcelType == """);
            WriteLiteral(@"Pdf"") {
                        $(""#loader"").show();
                        $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                        for (; index < selected.length;) {
                            pdfDownload(selected[index], finalStartDate, finalEndDate);
                        }
                        $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                        $(""#loader"").hide();
                    }
                    else {
                        if (SelectedType == ""Pdf or Excel"") {
                            if (SelectedPdfExcelType == ""Excel"") {
                                $(""#loader"").show();
                                $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                                for (; index < selected.length;) {
                                    excelDownload(selected[index], finalStartDate, finalEndDate);
                                }
                                $(""#reportSele");
            WriteLiteral(@"ctionCloseModal"").removeAttr(""disabled"");
                                $(""#loader"").hide();
                            }
                        }
                    }
                }
                else {
                    $(""#loader"").show();
                    $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                    for (var i = 0; i < selected.length; i++) {
                        var url = """);
            Write(
#nullable restore
#line 711 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                                    Url.Action("ProfitLossCompanyWeeklyReportGraph","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                        url = url + ""?fromDate="" + finalStartDate + ""&toDate="" + finalEndDate + ""&companyId="" + selected[i];
                        win = window.open();
                        if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                            $mymodal = $(""#multipleDownloadErrorModal"");
                            $mymodal.find(""div.modal-body"");
                            $mymodal.modal(""show"");
                        } 
                        else{
                            win.location.href = url;
                        }
                    }
                    $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                    $(""#loader"").hide();
                }

                window.location.reload();
            }
            else if (currentDay == 1) {
                var startingDate = currentStartDate.setDate(currentStartDate.getDate());");
            WriteLiteral(@"
                var endingDate = currentEndDate.setDate(currentEndDate.getDate() + 6);

                var startDate = new Date(startingDate);
                var endDate = new Date(endingDate);

                var startDay = startDate.getDate().toString();
                var endDay = endDate.getDate().toString();

                if (startDay.length <= 1) {
                    startDay = ""0"" + (startDate.getDate()).toString();
                }
                else {
                    startDay = (startDate.getDate()).toString();
                }


                if (endDay.length <= 1) {
                    endDay = ""0"" + (endDate.getDate()).toString();
                }
                else {
                    endDay = (endDate.getDate()).toString();
                }

                startMonth = (startDate.getMonth() + 1).toString();
                endMonth = (endDate.getMonth() + 1).toString();

                if (startMonth.length <= 1) {
                    startM");
            WriteLiteral(@"onth = ""0"" + (startDate.getMonth() + 1);
                }
                else {
                    startMonth = (startDate.getMonth() + 1);
                }

                if (endMonth.length <= 1) {
                    endMonth = ""0"" + (endDate.getMonth() + 1).toString();
                }
                else {
                    endMonth = (endDate.getMonth() + 1).toString();
                }

                var finalStartDate = startDate.getFullYear() + '-' + startMonth + '-' + startDay;
                var finalEndDate = endDate.getFullYear() + '-' + endMonth + '-' + endDay;
                if (SelectedType == ""Pdf or Excel"") {
                    if (SelectedPdfExcelType == ""Pdf"") {
                        $(""#loader"").show();
                        $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                        for (; index < selected.length;) {
                            pdfDownload(selected[index], finalStartDate, finalEndDate);
                  ");
            WriteLiteral(@"      }
                        $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                        $(""#loader"").hide();
                    }
                    else {
                        if (SelectedType == ""Pdf or Excel"") {
                            if (SelectedPdfExcelType == ""Excel"") {
                                $(""#loader"").show();
                                $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                                for (; index < selected.length;) {
                                    excelDownload(selected[index], finalStartDate, finalEndDate);
                                }
                                $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                                $(""#loader"").hide();
                            }
                        }
                    }
                }
                else {
                    $(""#loader"").show();
                    $(""#reportSelectionCloseMo");
            WriteLiteral("dal\").attr(\"disabled\", \"disabled\");\r\n                    for (var i = 0; i < selected.length; i++) {\r\n                        var url = \"");
            Write(
#nullable restore
#line 801 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                                    Url.Action("ProfitLossCompanyWeeklyReportGraph","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                        url = url + ""?fromDate="" + finalStartDate + ""&toDate="" + finalEndDate + ""&companyId="" + selected[i];
                        win = window.open();
                        if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {        
                            $mymodal = $(""#multipleDownloadErrorModal"");
                            $mymodal.find(""div.modal-body"");
                            $mymodal.modal(""show"");
                        } 
                        else{
                            win.location.href = url;
                        }
                    }
                    $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                    $(""#loader"").hide();
                }

                window.location.reload();
            }
            else if (currentDay == 2) {
                var startingDate = currentStartDate.setDate(currentStartDate.getD");
            WriteLiteral(@"ate() - 1);
                var endingDate = currentEndDate.setDate(currentEndDate.getDate() + 5);

                var startDate = new Date(startingDate);
                var endDate = new Date(endingDate);

                var startDay = startDate.getDate().toString();
                var endDay = endDate.getDate().toString();

                if (startDay.length <= 1) {
                    startDay = ""0"" + (startDate.getDate()).toString();
                }
                else {
                    startDay = (startDate.getDate()).toString();
                }


                if (endDay.length <= 1) {
                    endDay = ""0"" + (endDate.getDate()).toString();
                }
                else {
                    endDay = (endDate.getDate()).toString();
                }

                startMonth = (startDate.getMonth() + 1).toString();
                endMonth = (endDate.getMonth() + 1).toString();

                if (startMonth.length <= 1) {
              ");
            WriteLiteral(@"      startMonth = ""0"" + (startDate.getMonth() + 1);
                }
                else {
                    startMonth = (startDate.getMonth() + 1);
                }

                if (endMonth.length <= 1) {
                    endMonth = ""0"" + (endDate.getMonth() + 1).toString();
                }
                else {
                    endMonth = (endDate.getMonth() + 1).toString();
                }

                var finalStartDate = startDate.getFullYear() + '-' + startMonth + '-' + startDay;
                var finalEndDate = endDate.getFullYear() + '-' + endMonth + '-' + endDay;
                if (SelectedType == ""Pdf or Excel"") {
                    if (SelectedPdfExcelType == ""Pdf"") {
                        $(""#loader"").show();
                        $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                        for (; index < selected.length;) {
                            pdfDownload(selected[index], finalStartDate, finalEndDate);
      ");
            WriteLiteral(@"                  }
                        $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                        $(""#loader"").hide();
                    }
                    else {
                        if (SelectedType == ""Pdf or Excel"") {
                            if (SelectedPdfExcelType == ""Excel"") {
                                $(""#loader"").show();
                                $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                                for (; index < selected.length;) {
                                    excelDownload(selected[index], finalStartDate, finalEndDate);
                                }
                                $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                                $(""#loader"").hide();
                            }
                        }
                    }
                }
                else {
                    $(""#loader"").show();
                    $(""#reportSele");
            WriteLiteral("ctionCloseModal\").attr(\"disabled\", \"disabled\");\r\n                    for (var i = 0; i < selected.length; i++) {\r\n                        var url = \"");
            Write(
#nullable restore
#line 891 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                                    Url.Action("ProfitLossCompanyWeeklyReportGraph","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                        url = url + ""?fromDate="" + finalStartDate + ""&toDate="" + finalEndDate + ""&companyId="" + selected[i];
                        win = window.open();
                        if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                            //alert(""Please disable your pop-up blocker to use this feature."");
                            //setTimeout(() => {
                            //    window.location.reload();
                            //},3000);
                            $mymodal = $(""#multipleDownloadErrorModal"");
                            $mymodal.find(""div.modal-body"");
                            $mymodal.modal(""show"");
                        } 
                        else{
                            win.location.href = url;
                        }
                    }
                    $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
   ");
            WriteLiteral(@"                 $(""#loader"").hide();
                }

                window.location.reload();
            }
            else if (currentDay == 3) {
                var startingDate = currentStartDate.setDate(currentStartDate.getDate() - 2);
                var endingDate = currentEndDate.setDate(currentEndDate.getDate() + 4);

                var startDate = new Date(startingDate);
                var endDate = new Date(endingDate);

                var startDay = startDate.getDate().toString();
                var endDay = endDate.getDate().toString();

                if (startDay.length <= 1) {
                    startDay = ""0"" + (startDate.getDate()).toString();
                }
                else {
                    startDay = (startDate.getDate()).toString();
                }


                if (endDay.length <= 1) {
                    endDay = ""0"" + (endDate.getDate()).toString();
                }
                else {
                    endDay = (endDate.ge");
            WriteLiteral(@"tDate()).toString();
                }

                startMonth = (startDate.getMonth() + 1).toString();
                endMonth = (endDate.getMonth() + 1).toString();

                if (startMonth.length <= 1) {
                    startMonth = ""0"" + (startDate.getMonth() + 1);
                }
                else {
                    startMonth = (startDate.getMonth() + 1);
                }

                if (endMonth.length <= 1) {
                    endMonth = ""0"" + (endDate.getMonth() + 1).toString();
                }
                else {
                    endMonth = (endDate.getMonth() + 1).toString();
                }

                var finalStartDate = startDate.getFullYear() + '-' + startMonth + '-' + startDay;
                var finalEndDate = endDate.getFullYear() + '-' + endMonth + '-' + endDay;
                if (SelectedType == ""Pdf or Excel"") {
                    if (SelectedPdfExcelType == ""Pdf"") {
                        $(""#loader"").show();
  ");
            WriteLiteral(@"                      $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                        for (; index < selected.length;) {
                            pdfDownload(selected[index], finalStartDate, finalEndDate);
                        }
                        $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                        $(""#loader"").hide();
                    }
                    else {
                        if (SelectedType == ""Pdf or Excel"") {
                            if (SelectedPdfExcelType == ""Excel"") {
                                $(""#loader"").show();
                                $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                                for (; index < selected.length;) {
                                    excelDownload(selected[index], finalStartDate, finalEndDate);
                                }
                                $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
              ");
            WriteLiteral(@"                  $(""#loader"").hide();
                            }
                        }
                    }
                }
                else {
                    $(""#loader"").show();
                    $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                    for (var i = 0; i < selected.length; i++) {
                        var url = """);
            Write(
#nullable restore
#line 985 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                                    Url.Action("ProfitLossCompanyWeeklyReportGraph","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                        url = url + ""?fromDate="" + finalStartDate + ""&toDate="" + finalEndDate + ""&companyId="" + selected[i];
                        win = window.open();
                        if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                            $mymodal = $(""#multipleDownloadErrorModal"");
                            $mymodal.find(""div.modal-body"");
                            $mymodal.modal(""show"");
                        } 
                        else{
                            win.location.href = url;
                        }
                    }
                    $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                    $(""#loader"").hide();
                }

                window.location.reload();
            }
            else if (currentDay == 4) {
                var startingDate = currentStartDate.setDate(currentStartDate.getDate() - ");
            WriteLiteral(@"3);
                var endingDate = currentEndDate.setDate(currentEndDate.getDate() + 3);

                var startDate = new Date(startingDate);
                var endDate = new Date(endingDate);

                var startDay = startDate.getDate().toString();
                var endDay = endDate.getDate().toString();

                if (startDay.length <= 1) {
                    startDay = ""0"" + (startDate.getDate()).toString();
                }
                else {
                    startDay = (startDate.getDate()).toString();
                }


                if (endDay.length <= 1) {
                    endDay = ""0"" + (endDate.getDate()).toString();
                }
                else {
                    endDay = (endDate.getDate()).toString();
                }

                startMonth = (startDate.getMonth() + 1).toString();
                endMonth = (endDate.getMonth() + 1).toString();

                if (startMonth.length <= 1) {
                    st");
            WriteLiteral(@"artMonth = ""0"" + (startDate.getMonth() + 1);
                }
                else {
                    startMonth = (startDate.getMonth() + 1);
                }

                if (endMonth.length <= 1) {
                    endMonth = ""0"" + (endDate.getMonth() + 1).toString();
                }
                else {
                    endMonth = (endDate.getMonth() + 1).toString();
                }

                var finalStartDate = startDate.getFullYear() + '-' + startMonth + '-' + startDay;
                var finalEndDate = endDate.getFullYear() + '-' + endMonth + '-' + endDay;
                if (SelectedType == ""Pdf or Excel"") {
                    if (SelectedPdfExcelType == ""Pdf"") {
                        $(""#loader"").show();
                        $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                        for (; index < selected.length;) {
                            pdfDownload(selected[index], finalStartDate, finalEndDate);
              ");
            WriteLiteral(@"          }
                        $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                        $(""#loader"").hide();
                    }
                    else {
                        if (SelectedType == ""Pdf or Excel"") {
                            if (SelectedPdfExcelType == ""Excel"") {
                                $(""#loader"").show();
                                $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                                for (; index < selected.length;) {
                                    excelDownload(selected[index], finalStartDate, finalEndDate);
                                }
                                $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                                $(""#loader"").hide();
                            }
                        }
                    }
                }
                else {
                    $(""#loader"").show();
                    $(""#reportSelectionClo");
            WriteLiteral("seModal\").attr(\"disabled\", \"disabled\");\r\n                    for (var i = 0; i < selected.length; i++) {\r\n                        var url = \"");
            Write(
#nullable restore
#line 1075 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                                    Url.Action("ProfitLossCompanyWeeklyReportGraph","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                        url = url + ""?fromDate="" + finalStartDate + ""&toDate="" + finalEndDate + ""&companyId="" + selected[i];
                        win = window.open();
                        if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                            $mymodal = $(""#multipleDownloadErrorModal"");
                            $mymodal.find(""div.modal-body"");
                            $mymodal.modal(""show"");
                        } 
                        else{
                            win.location.href = url;
                        }
                    }
                    $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                    $(""#loader"").hide();
                }

                window.location.reload();
            }
            else if (currentDay == 5) {
                var startMonth = """", endMonth = """";
                var startingDate = c");
            WriteLiteral(@"urrentStartDate.setDate(currentStartDate.getDate() - 4);
                var endingDate = currentEndDate.setDate(currentEndDate.getDate() + 2);

                var startDate = new Date(startingDate);
                var endDate = new Date(endingDate);

                var startDay = startDate.getDate().toString();
                var endDay = endDate.getDate().toString();

                if (startDay.length <= 1) {
                    startDay = ""0"" + (startDate.getDate()).toString();
                }
                else {
                    startDay = (startDate.getDate()).toString();
                }


                if (endDay.length <= 1) {
                    endDay = ""0"" + (endDate.getDate()).toString();
                }
                else {
                    endDay = (endDate.getDate()).toString();
                }

                startMonth = (startDate.getMonth() + 1).toString();
                endMonth = (endDate.getMonth() + 1).toString();

                ");
            WriteLiteral(@"if (startMonth.length <= 1) {
                    startMonth = ""0"" + (startDate.getMonth() + 1);
                }
                else {
                    startMonth = (startDate.getMonth() + 1);
                }

                if (endMonth.length <= 1) {
                    endMonth = ""0"" + (endDate.getMonth() + 1).toString();
                }
                else {
                    endMonth = (endDate.getMonth() + 1).toString();
                }

                var finalStartDate = startDate.getFullYear() + '-' + startMonth + '-' + startDay;
                var finalEndDate = endDate.getFullYear() + '-' + endMonth + '-' + endDay;

                if (SelectedType == ""Pdf or Excel"") {
                    if (SelectedPdfExcelType == ""Pdf"") {
                        $(""#loader"").show();
                        $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                        for (; index < selected.length;) {
                            pdfDownload(selected");
            WriteLiteral(@"[index], finalStartDate, finalEndDate);
                        }
                        $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                        $(""#loader"").hide();
                    }
                    else {
                        if (SelectedType == ""Pdf or Excel"") {
                            if (SelectedPdfExcelType == ""Excel"") {
                                $(""#loader"").show();
                                $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                                for (; index < selected.length;) {
                                    excelDownload(selected[index], finalStartDate, finalEndDate);
                                }
                                $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                                $(""#loader"").hide();
                            }
                        }
                    }
                }
                else {
                    $(""#loade");
            WriteLiteral("r\").show();\r\n                    $(\"#reportSelectionCloseModal\").attr(\"disabled\", \"disabled\");\r\n                    for (var i = 0; i < selected.length; i++) {\r\n                        var url = \"");
            Write(
#nullable restore
#line 1167 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                                    Url.Action("ProfitLossCompanyWeeklyReportGraph","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                        url = url + ""?fromDate="" + finalStartDate + ""&toDate="" + finalEndDate + ""&companyId="" + selected[i];
                        win = window.open();
                        if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                            $mymodal = $(""#multipleDownloadErrorModal"");
                            $mymodal.find(""div.modal-body"");
                            $mymodal.modal(""show"");
                        } 
                        else{
                            win.location.href = url;
                        }
                    }
                    $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                    $(""#loader"").hide();
                }

                window.location.reload();
            }
            else if (currentDay == 6) {
                var startingDate = currentStartDate.setDate(currentStartDate.getDate() - ");
            WriteLiteral(@"5);
                var endingDate = currentEndDate.setDate(currentEndDate.getDate() + 1);

                var startDate = new Date(startingDate);
                var endDate = new Date(endingDate);

                var startDay = startDate.getDate().toString();
                var endDay = endDate.getDate().toString();

                if (startDay.length <= 1) {
                    startDay = ""0"" + (startDate.getDate()).toString();
                }
                else {
                    startDay = (startDate.getDate()).toString();
                }


                if (endDay.length <= 1) {
                    endDay = ""0"" + (endDate.getDate()).toString();
                }
                else {
                    endDay = (endDate.getDate()).toString();
                }

                startMonth = (startDate.getMonth() + 1).toString();
                endMonth = (endDate.getMonth() + 1).toString();

                if (startMonth.length <= 1) {
                    st");
            WriteLiteral(@"artMonth = ""0"" + (startDate.getMonth() + 1);
                }
                else {
                    startMonth = (startDate.getMonth() + 1);
                }

                if (endMonth.length <= 1) {
                    endMonth = ""0"" + (endDate.getMonth() + 1).toString();
                }
                else {
                    endMonth = (endDate.getMonth() + 1).toString();
                }

                var finalStartDate = startDate.getFullYear() + '-' + startMonth + '-' + startDay;
                var finalEndDate = endDate.getFullYear() + '-' + endMonth + '-' + endDay;

                if (SelectedType == ""Pdf or Excel"") {
                    if (SelectedPdfExcelType == ""Pdf"") {
                        $(""#loader"").show();
                        $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                        for (; index < selected.length;) {
                            pdfDownload(selected[index], finalStartDate, finalEndDate);
            ");
            WriteLiteral(@"            }
                        $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                        $(""#loader"").hide();
                    }
                    else {
                        if (SelectedType == ""Pdf or Excel"") {
                            if (SelectedPdfExcelType == ""Excel"") {
                                $(""#loader"").show();
                                $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                                for (; index < selected.length;) {
                                    excelDownload(selected[index], finalStartDate, finalEndDate);
                                }
                                $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                                $(""#loader"").hide();
                            }
                        }
                    }
                }
                else {
                    $(""#loader"").show();
                    $(""#reportSelectionC");
            WriteLiteral("loseModal\").attr(\"disabled\", \"disabled\");\r\n                    for (var i = 0; i < selected.length; i++) {\r\n                        var url = \"");
            Write(
#nullable restore
#line 1258 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                                    Url.Action("ProfitLossCompanyWeeklyReportGraph","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                        url = url + ""?fromDate="" + finalStartDate + ""&toDate="" + finalEndDate + ""&companyId="" + selected[i];
                        win = window.open();
                        if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                            $mymodal = $(""#multipleDownloadErrorModal"");
                            $mymodal.find(""div.modal-body"");
                            $mymodal.modal(""show"");
                        } 
                        else{
                            win.location.href = url;
                        }
                    }
                    $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                    $(""#loader"").hide();
                }

                window.location.reload();
            }
        }
        else {
            alert(""Please select company(s), for which you want to generate report.!"");
            re");
            WriteLiteral("turn false;\r\n        }\r\n\r\n        function pdfDownload(company, finalStartDate, finalEndDate) {\r\n            var url = \"");
            Write(
#nullable restore
#line 1283 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                        Url.Action("ProfitLossMultipleCompanyWeeklyReportPdf","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
            if (flag) {
                var windowText = ""window "" + company.toString();
                url = url + ""?fromDate="" + finalStartDate + ""&toDate="" + finalEndDate + ""&companyId="" + company;
                win = window.open();
                if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                    //alert(""Please disable your pop-up blocker to use this feature."");
                    //setTimeout(() => {
                    //    window.location.reload();
                    //},3000);
                    $mymodal = $(""#multipleDownloadErrorModal"");
                    $mymodal.find(""div.modal-body"");
                    $mymodal.modal(""show"");
                } 
                else{
                    win.location.href = url;
                    currentHourTime = new Date().getHours();
                    currentMinTime = new Date().getSeconds();

                    ");
            WriteLiteral(@"currentTime.setSeconds(currentMinTime + 1);
                    flag = false;
                }
            }

            nextTime = new Date();
            if (currentTime < nextTime) {
                
                index++;
                flag = true;
                win.close(url);
            }
        }

        function excelDownload(company, finalStartDate, finalEndDate) {
            var url = """);
            Write(
#nullable restore
#line 1317 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                        Url.Action("ProfitLossMultipleCompanyWeeklyReportExcel","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
            if (flag) {
                var windowText = ""window "" + company.toString();
                url = url + ""?fromDate="" + finalStartDate + ""&toDate="" + finalEndDate + ""&companyId="" + company;
                win = window.open();
                if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                    //alert(""Please disable your pop-up blocker to use this feature."");
                    //setTimeout(() => {
                    //    window.location.reload();
                    //},3000);
                    $mymodal = $(""#multipleDownloadErrorModal"");
                    $mymodal.find(""div.modal-body"");
                    $mymodal.modal(""show"");
                } 
                else{
                    win.location.href = url;
                    currentHourTime = new Date().getHours();
                    currentMinTime = new Date().getSeconds();

                    ");
            WriteLiteral(@"currentTime.setSeconds(currentMinTime + 1);
                    flag = false;
                }
            }

            nextTime = new Date();
            if (currentTime < nextTime) {
                
                index++;
                flag = true;
                win.close(url);
            }
        }
    });

    $(""#monthReport"").on('click', function () {
        var month = $(""#selectMonth"").val();
        var year = $(""#selectYear"").val();
        var companyId = $(""#companyId"").val();
        var SelectedType = $(""#SelectedType"").val();
        var selected = new Array();
        var SelectedPdfExcelType = $(""#SelectedPdfExcelType"").val();

        var retrievedObject = localStorage.getItem('profitLossReportSelectedCompany');

        if(retrievedObject != null && retrievedObject != ""[]""){
            var removeExtra = retrievedObject.replace(""["","""");
            removeExtra = removeExtra.replace(""]"","""");
            var splitData = removeExtra.split("","");
       ");
            WriteLiteral(@"     if(splitData.length > 0 && splitData != null){
                for(var ind=0;ind<splitData.length;ind++){
                    selected.push(parseInt(splitData[ind]));
                }
            }
        }

        var flag = true, firstFlag = true;
        var index = 0;
        var win;
        var currentHourTime = new Date().getHours();
        var currentMinTime = new Date().getMinutes();
        var currentTime = new Date();
        var nextTime = new Date();
        
        if (month != """" && month != null && month != ""unidentified"") {
            if (year != """" && year != null && year != ""unidentified"") {
                
                localStorage.removeItem('profitLossReportSelectedCompany');

                if (SelectedType == ""Pdf or Excel"") {
                    if (SelectedPdfExcelType == ""Pdf"") {
                        $(""#loader"").show();
                        $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                        for (; ind");
            WriteLiteral(@"ex < selected.length;) {
                            pdfDownload(selected[index]);
                        }
                        $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                        $(""#loader"").hide();
                    }
                    else {
                        if (SelectedType == ""Pdf or Excel"") {
                            if (SelectedPdfExcelType == ""Excel"") {       
                                $(""#loader"").show();
                                $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                                for (; index < selected.length;) {
                                    excelDownload(selected[index]);
                                }
                                $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                                $(""#loader"").hide();
                            }
                        }
                    }
                }
                else {
        ");
            WriteLiteral("            $(\"#loader\").show();\r\n                    $(\"#reportSelectionCloseModal\").attr(\"disabled\", \"disabled\");\r\n                    for (var i = 0; i < selected.length; i++) {\r\n                        var url = \"");
            Write(
#nullable restore
#line 1413 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                                    Url.Action("ProfitLossCompanyMonthlyReportGraph","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                        url = url + ""?month="" + month + ""&year="" + year + ""&companyId="" + selected[i];
                        win = window.open();
                        if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                            $mymodal = $(""#multipleDownloadErrorModal"");
                            $mymodal.find(""div.modal-body"");
                            $mymodal.modal(""show"");
                        } 
                        else{
                            win.location.href = url;
                        }
                    }
                    $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                    $(""#loader"").hide();
                }

                window.location.reload();
            }
            else {
                alert(""Please select Year.!"");
                return false;
            }
        }
        else {
           ");
            WriteLiteral(" alert(\"Please select Month.!\");\r\n            return false;\r\n        }\r\n\r\n        function pdfDownload(company) {\r\n            event.preventDefault();\r\n            var url = \"");
            Write(
#nullable restore
#line 1443 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                        Url.Action("ProfitLossMultipleCompanyMonthlyReportPdf","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
            if (flag) {
                var windowText = ""window "" + company.toString();
                url = url + ""?month="" + month + ""&year="" + year + ""&companyId="" + company;
                win = window.open('', windowText);
                //win.opener = null;
                
                if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                    //alert(""Please disable your pop-up blocker to use this feature."");
                    //setTimeout(() => {
                    //    window.location.reload();
                    //},3000);
                    $mymodal = $(""#multipleDownloadErrorModal"");
                    $mymodal.find(""div.modal-body"");
                    $mymodal.modal(""show"");
                } 
                else{
                    win.location.href = url;
                    win.focus();
                    currentHourTime = new Date().getHours();
   ");
            WriteLiteral(@"                 currentMinTime = new Date().getSeconds();

                    currentTime.setSeconds(currentMinTime + 2);
                    flag = false;
                }
            }

            nextTime = new Date();
            if (currentTime < nextTime) {
                
                index++;
                flag = true;
                win.close(url);
            }
        }
        
        function excelDownload(company) {
            event.preventDefault();
            var url = """);
            Write(
#nullable restore
#line 1481 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                        Url.Action("ProfitLossMultipleCompanyMonthlyReportExcel","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
            if (flag) {
                var windowText = ""window "" + company.toString();
                url = url + ""?month="" + month + ""&year="" + year + ""&companyId="" + company;
                win = window.open('', windowText);
                //win.opener = null;
                
                if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                    //alert(""Please disable your pop-up blocker to use this feature."");
                    //setTimeout(() => {
                    //    window.location.reload();
                    //},3000);
                    $mymodal = $(""#multipleDownloadErrorModal"");
                    $mymodal.find(""div.modal-body"");
                    $mymodal.modal(""show"");
                } 
                else{
                    win.location.href = url;
                    win.focus();
                    currentHourTime = new Date().getHours();
   ");
            WriteLiteral(@"                 currentMinTime = new Date().getSeconds();

                    currentTime.setSeconds(currentMinTime + 1);
                    flag = false;
                }
            }

            nextTime = new Date();
            if (currentTime < nextTime) {
                
                index++;
                flag = true;
                win.close(url);
            }
        }
    });

    $(""#yearReport"").on('click', function () {
        var year = $(""#selectedYear"").val();
        var companyId = $(""#companyId"").val();
        var SelectedType = $(""#SelectedType"").val();
        var selected = new Array();
        var SelectedPdfExcelType = $(""#SelectedPdfExcelType"").val();

        var flag = true, firstFlag = true;
        var index = 0;
        var win;
        var currentHourTime = new Date().getHours();
        var currentMinTime = new Date().getMinutes();
        var currentTime = new Date();
        var nextTime = new Date();

        var retrievedObjec");
            WriteLiteral(@"t = localStorage.getItem('profitLossReportSelectedCompany');

        if(retrievedObject != null && retrievedObject != ""[]""){
            var removeExtra = retrievedObject.replace(""["","""");
            removeExtra = removeExtra.replace(""]"","""");
            var splitData = removeExtra.split("","");
            if(splitData.length > 0 && splitData != null){
                for(var ind=0;ind<splitData.length;ind++){
                    selected.push(parseInt(splitData[ind]));
                }
            }
        }

        if (year != """" && year != null && year != ""unidentified"") {
            
            localStorage.removeItem('profitLossReportSelectedCompany');
            
            if (SelectedType == ""Pdf or Excel"") {
                if (SelectedPdfExcelType == ""Pdf"") {
                    $(""#loader"").show();
                    $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                    for (; index < selected.length;) {
                        pdfDownload(s");
            WriteLiteral(@"elected[index]);
                    }
                    $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                    $(""#loader"").hide();
                }
                else {
                    if (SelectedType == ""Pdf or Excel"") {
                        if (SelectedPdfExcelType == ""Excel"") {
                            $(""#loader"").show();
                            $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                            for (; index < selected.length;) {
                                excelDownload(selected[index]);
                            }
                            $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                            $(""#loader"").hide();
                        }
                    }
                }
            }
            else {
                $(""#loader"").show();
                $(""#reportSelectionCloseModal"").attr(""disabled"", ""disabled"");
                for (var i = 0; i < selec");
            WriteLiteral("ted.length; i++) {\r\n                    var url = \"");
            Write(
#nullable restore
#line 1578 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                                Url.Action("ProfitLossCompanyYealyReportGraph","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                    url = url + ""?year="" + year + ""&companyId="" + selected[i];
                    var win = window.open();
                    if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                        $mymodal = $(""#multipleDownloadErrorModal"");
                        $mymodal.find(""div.modal-body"");
                        $mymodal.modal(""show"");
                    } 
                    else{
                        win.location.href = url;
                    }
                }
                $(""#reportSelectionCloseModal"").removeAttr(""disabled"");
                $(""#loader"").hide();
            }
            window.location.reload();
        }
        else {
            alert(""Please select Year.!"");
            return false;
        }

        function pdfDownload(company) {
            var url = """);
            Write(
#nullable restore
#line 1601 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                        Url.Action("ProfitLossMultipleCompanyYearlyReportPdf","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
            if (flag) {
                var windowText = ""window "" + company.toString();
                url = url + ""?year="" + year + ""&companyId="" + company;
                win = window.open();
                if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                    $mymodal = $(""#multipleDownloadErrorModal"");
                    $mymodal.find(""div.modal-body"");
                    $mymodal.modal(""show"");
                } 
                else{
                    win.location.href = url;
                    currentHourTime = new Date().getHours();
                    currentMinTime = new Date().getSeconds();

                    currentTime.setSeconds(currentMinTime + 1);
                    flag = false;
                }
            }

            nextTime = new Date();
            if (currentTime < nextTime) {
                
                index++;
                fla");
            WriteLiteral("g = true;\r\n                win.close(url);\r\n            }\r\n        }\r\n\r\n        function excelDownload(company) {\r\n            var url = \"");
            Write(
#nullable restore
#line 1631 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                        Url.Action("ProfitLossMultipleCompanyYearlyReportExcel","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
            if (flag) {
                var windowText = ""window "" + company.toString();
                url = url + ""?year="" + year + ""&companyId="" + company;
                win = window.open();
                if (!win || win.closed || typeof win.closed == 'undefined' || typeof win.outerWidth == 'undefined' || typeof win.outerHeight == 'undefined') {
                    //alert(""Please disable your pop-up blocker to use this feature."");
                    //setTimeout(() => {
                    //    window.location.reload();
                    //},3000);
                    $mymodal = $(""#multipleDownloadErrorModal"");
                    $mymodal.find(""div.modal-body"");
                    $mymodal.modal(""show"");
                } 
                else{
                    win.location.href = url;
                    currentHourTime = new Date().getHours();
                    currentMinTime = new Date().getSeconds();

                    currentTime.setSeconds(currentMinTime + 1)");
            WriteLiteral(@";
                    flag = false;
                }
            }

            nextTime = new Date();
            if (currentTime < nextTime) {
                
                index++;
                flag = true;
                win.close(url);
            }
        }
    });
</script>
<script>
    // Disable all months after current month for current year.                                                         -- Yashasvi TBC(17-06-2023)
    $(document).ready(function () {
        var year = $(""#selectYear"").val();

        if (year == """" || year == null || year == ""unidentified"") {
            var getDate = new Date();
            var currentYear = getDate.getFullYear();
            var currentMonth = (getDate.getMonth() + 1).toString();
            var startMonth = (getDate.getMonth() + 2);
            //startMonth = startMonth + 1;
            var gap = 12 - parseInt(startMonth);
            if (currentMonth.length <= 1) {
                startMonth = ""0"" + (getDate.getMon");
            WriteLiteral(@"th() + 2);
            }

            for (var index = 0; index <= gap; index++) {

                if (startMonth.toString().length <= 1) {
                    startMonth = ""0"" + parseInt(startMonth);
                }
                $(""#selectMonth option[value="" + startMonth + ""]"").attr(""disabled"", ""disabled"");
                startMonth = parseInt(startMonth) + 1;
            }
        }
        else {
            var getDate = new Date();
            var currentYear = getDate.getFullYear();
            if (parseInt(year) == parseInt(currentYear)) {
                var currentMonth = (getDate.getMonth() + 1).toString();
                var startMonth = (getDate.getMonth() + 2);
                var gap = 12 - parseInt(startMonth);
                if (currentMonth.length <= 1) {
                    startMonth = ""0"" + (getDate.getMonth() + 2);
                }

                for (var index = 0; index <= gap; index++) {
                    if (startMonth.toString().length <= 1) {
");
            WriteLiteral(@"                        startMonth = ""0"" + parseInt(startMonth);
                    }
                    $(""#selectMonth option[value="" + startMonth + ""]"").attr(""disabled"", ""disabled"");
                    startMonth = parseInt(startMonth) + 1;
                }
            }
        }
    });

    $(""#selectYear"").on('change', function () {
        var year = $(""#selectYear"").val();
        var getDate = new Date();
        var currentYear = getDate.getFullYear();
        var currentMonth = (getDate.getMonth() + 1).toString();
        var startMonth = (getDate.getMonth() + 2);
        var gap = 12 - parseInt(startMonth);

        if (parseInt(year) == parseInt(currentYear)) {
            if (currentMonth.length <= 1) {
                startMonth = ""0"" + (getDate.getMonth() + 2);
            }

            for (var index = 0; index <= gap; index++) {
                if (startMonth.toString().length <= 1) {
                    startMonth = ""0"" + parseInt(startMonth);
                ");
            WriteLiteral(@"}
                $(""#selectMonth option[value="" + startMonth + ""]"").attr(""disabled"", ""disabled"");
                startMonth = parseInt(startMonth) + 1;
            }
        }
        else {
            for (var index = 0; index <= gap; index++) {
                if (startMonth.toString().length <= 1) {
                    startMonth = ""0"" + parseInt(startMonth);
                }
                $(""#selectMonth option[value="" + startMonth + ""]"").removeAttr(""disabled"");
                startMonth = parseInt(startMonth) + 1;
            }
        }
    });
</script>
<script>
    var selected = new Array();
    $(""#generateSelectedCompanyReport"").on('click', function () {
        var retrievedObject = localStorage.getItem('profitLossReportSelectedCompany');
        
        if (retrievedObject != null && retrievedObject != ""[]"") {
            var removeExtra = retrievedObject.replace(""["", """");
            removeExtra = removeExtra.replace(""]"", """");
            var splitData = removeExt");
            WriteLiteral(@"ra.split("","");
            if (splitData.length > 0 && splitData != null) {
                for (var ind = 0; ind < splitData.length; ind++) {
                    selected.push(parseInt(splitData[ind]));
                }
            }
        }

        if (selected.length == 0) {
            alert(""Please select company(s), for which you want to generate report.!"");
        }
        else {
            $mymodal = $(""#reportSelectionModal"");
            $mymodal.find(""div.modal-body"");
            $mymodal.modal(""show"");
        }
    });

    $(""#reportSelectionCloseModal"").on('click', function () {
        //$mymodal = $(""#reportSelectionModal"");
        //$mymodal.find(""div.modal-body"");
        //$('#multipleDownloadErrorModal').modal().hide(); $('#multipleDownloadErrorModal').modal(""hide"");
        //$(""#SelectPdfOrGraphType"").removeAttr(""hidden"");
        //$(""#SelectedRangeType"").attr(""hidden"", ""hidden"");
        //$(""#SelectedPdfOrExcelType"").attr(""hidden"", ""hidden"");
       ");
            WriteLiteral(@" //$(""#monthSelection"").attr(""hidden"", ""hidden"");
        //$(""#yearSelection"").attr(""hidden"", ""hidden"");
        //$(""#weeklySelection"").attr(""hidden"", ""hidden"");
        //$(""#customSelection"").attr(""hidden"", ""hidden"");
        //$(""#showSelectedType"").text("""");
        //$(""#showBackButtonBlock"").attr(""hidden"", ""hidden"");
        //$(""input:radio[name='SelectedOptionType']"").prop(""checked"", false);
        //$(""input:radio[name='SelectedOptionType'][value='Custom']"").prop(""checked"", true);
        window.location.reload();
    });

    $(""#multipleDownloadErrorCloseModal"").on('click',function(){
        //$mymodal = $(""#multipleDownloadErrorModal"");
        //$mymodal.find(""div.modal-body"");
        //$('#multipleDownloadErrorModal').modal().hide(); $('#multipleDownloadErrorModal').modal(""hide"");
        window.location.reload();
    })
</script>
<script>
    $(""#companyIdsSelection"").on('click', function () {
        $('input:checkbox[name=companyIds]').each(function () {
            ");
            WriteLiteral(@"if ($(this).is(':checked')) {
                $(this).removeAttr('checked');
            }
            else {
                $(this).attr('checked', 'checked');
            }
        });
    });

    function GeneratePdfOrGraph(companyId) {
        var url = """);
            Write(
#nullable restore
#line 1808 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                    Url.Action("CompanyProfitLossReport","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral("\";\r\n        url = url + \"?companyId=\" + companyId;\r\n        window.location.href = url;\r\n    };\r\n</script>\r\n<script>\r\n    $(document).ready(function () {\r\n        var url = \"");
            Write(
#nullable restore
#line 1815 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                    Url.Action("CompanyWiseProfitLossPaginationReport","ReportManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
        $(""#datatable"").DataTable({
            ""processing"": true,
            ""serverSide"": true,
            ""filter"": false,
            ""ajax"": {
                ""type"": ""post"",
                ""datatype"": ""json"",
                ""data"": function () {
                    var info = $('#datatable').DataTable().page.info();
                    $('#datatable').DataTable().ajax.url(
                        url
                    );
                }
            },
            ""columns"": [
                {
                    ""data"": function (data, full, meta) {
                        var flag = false;
                        var selectedData = new Array();
                        var retrievedObject = localStorage.getItem('profitLossReportSelectedCompany');

                        if (retrievedObject != null && retrievedObject != ""[]"") {
                            var removeExtra = retrievedObject.replace(""["", """");
                            removeExtra = removeExtra.replace");
            WriteLiteral(@"(""]"", """");
                            var splitData = removeExtra.split("","");
                            if (splitData.length > 0 && splitData != null) {
                                for (var index = 0; index < splitData.length; index++) {
                                    selectedData.push(parseInt(splitData[index]));
                                }
                            }
                        }
                        for(var index=0;index<selectedData.length;index++){
                            if(selectedData[index] ==  data.id){
                                flag = true;
                                break;
                            }
                        }
                        if(flag){
                            return '<input type=""checkbox"" class=""form-check-input"" name=""companyIds"" id=""companyIds"" onchange=""massGenerateReport(' + data.id + ')"" value=' + data.id + ' checked=""checked"" />';
                        }
                        else{
       ");
            WriteLiteral(@"                     return '<input type=""checkbox"" class=""form-check-input"" name=""companyIds"" id=""companyIds"" onchange=""massGenerateReport(' + data.id + ')"" value=' + data.id + ' />';
                        }
                        
                    },
                    ""name"": """"
                },
                { ""data"": ""companyAccountNumber"", ""name"": ""Company Account Number"" },
                { ""data"": ""companyName"", ""name"": ""Company"" },
                {
                    ""data"": function (data, full, meta) {
                        return '<button onclick=""GeneratePdfOrGraph(' + data.id + ');"" class=""btn btn-theme"">Generate Report</button>';
                    },
                    ""name"": """"
                },
            ],
            ""language"": {
                'processing': '<div class=""spinner-2""><div class=""center-div-2""><div class=""loader-circle-1""></div></div></div>'
            },
            responsive: true,
            paging: true,
            pagingTyp");
            WriteLiteral(@"e: 'simple_numbers',
            ""bInfo"": true,
            ordering: true,
            ""aLengthMenu"": [20, 30, 50],
            searching: true,
            dom: ""<'row'<'col-sm-3'l><'col-sm-3'f><'col-sm-6'p>>"" +
                ""<'row'<'col-sm-12'tr>>"" +
                ""<'row'<'col-sm-5'i><'col-sm-7'p>>"",
        });
    });

    function massGenerateReport(companyId){
        var selectedData = new Array();
        var retrievedObject = localStorage.getItem('profitLossReportSelectedCompany');

        if(retrievedObject != null && retrievedObject != ""[]""){
            var removeExtra = retrievedObject.replace(""["","""");
            removeExtra = removeExtra.replace(""]"","""");
            var splitData = removeExtra.split("","");
            if(splitData.length > 0 && splitData != null){
                for(var index=0;index<splitData.length;index++){
                    selectedData.push(parseInt(splitData[index]));
                }
            }
        }

        if (companyId != 0)");
            WriteLiteral(@" {
            
            if (!selectedData.includes(parseInt(companyId))) {
                selectedData.push(parseInt(companyId));
            }
            else {
                const index = selectedData.indexOf(companyId);
                selectedData.splice(index, 1);
            }
        }

        if(selectedData.length > 0 && selectedData != null){
            localStorage.setItem('profitLossReportSelectedCompany', JSON.stringify(selectedData));
        }    
    };

    $(window).on('load', function () {
        localStorage.removeItem('profitLossReportSelectedCompany');
    });
</script>
<script>
    $(function () {
        $(""#Insert"").hide();
        $(""#View"").hide();
        $("".Update"").hide();
        $("".Delete"").hide();
        $("".Details"").hide();
    });
</script>
<script>
    $(function () {
        $(""#loader"").show();
        var module = $(""#Module"").val();
        $.ajax({
            url: """);
            Write(
#nullable restore
#line 1937 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                   Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
            method: ""GET"",
            data: { ""Module"": ""ReportManagement"" },
            async: false,
            contentType: ""application/json; charset=utf-8"",
            dataType: ""json"",
            success: function (RoleResponse) {
                $(""#loader"").show();
                $.ajax({
                    url: """);
            Write(
#nullable restore
#line 1946 "D:\DIBN PORTAL\DIBN PORTAL - LIVE\DIBN\Areas\Admin\Views\ReportManagement\CompanyWiseProfitLossReport.cshtml"
                           Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Module"": ""ReportManagement"" },
                    async: false,
                    contentType: ""application/json; charset=utf-8"",
                    dataType: ""json"",
                    success: function (UserResponse) {
                        $(""#loader"").show();
                        if (UserResponse.length > 0) {
                            for (let i = 0; i < UserResponse.length; i++) {
                                $(""#"" + UserResponse[i]).show();
                                if (UserResponse[i] == ""View"") {
                                    $("".Details"").show();
                                }
                                if (UserResponse[i] == ""Update"") {
                                    $(""."" + UserResponse[i]).show();
                                }
                                if (UserResponse[i] == ""Delete"") {
                                    $(""."" + UserResponse[i]).show();
        ");
            WriteLiteral(@"                        }
                            }
                            $(""#loader"").hide();
                        }
                        else if (RoleResponse.length > 0) {
                            for (let i = 0; i < RoleResponse.length; i++) {
                                $(""#"" + RoleResponse[i]).show();
                                if (RoleResponse[i] == ""View"") {
                                    $("".Details"").show();
                                }
                                if (RoleResponse[i] == ""Update"") {
                                    $(""."" + RoleResponse[i]).show();
                                }
                                if (RoleResponse[i] == ""Delete"") {
                                    $(""."" + RoleResponse[i]).show();
                                }
                            }
                            $(""#loader"").hide();

                        } else {
                            alert(""You don't have any permissi");
            WriteLiteral("on for this module.\");\r\n                            $(\"#loader\").hide();\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        });\r\n        $(\"#loader\").hide();\r\n    });\r\n</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591

#pragma checksum "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f98"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_CompanyAccount_GetCompanyExpenseDetails), @"mvc.1.0.view", @"/Areas/Admin/Views/CompanyAccount/GetCompanyExpenseDetails.cshtml")]
namespace AspNetCore
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN

#nullable disable
    ;
#nullable restore
#line 2 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.Models

#nullable disable
    ;
#nullable restore
#line 3 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.Data

#nullable disable
    ;
#nullable restore
#line 4 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.IRepository

#nullable disable
    ;
#nullable restore
#line 5 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.Repository

#line default
#line hidden
#nullable disable
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f98", @"/Areas/Admin/Views/CompanyAccount/GetCompanyExpenseDetails.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"605a41b4408e5d1ff247f7264e35f4305eb9eeecf14a77cb4f30041778bbf31f", @"/Areas/Admin/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Areas_Admin_Views_CompanyAccount_GetCompanyExpenseDetails : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DIBN.Areas.Admin.Models.GetCompanyAccountDetailModel>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", "hidden", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("message"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Transaction Id", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Date", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Description", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "asc", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "desc", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Credit(AED)", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Debit(AED)", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Vat(%)", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Vat Amount", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("CompanyId"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Cash", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Online Transaction", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Cheque", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "AddPortalBalance", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "PortalBalanceExpense", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_20 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net/js/jquery.dataTables.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_21 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-bs4/js/dataTables.bootstrap4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_22 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-responsive/js/dataTables.responsive.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_23 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-responsive-bs4/js/responsive.bootstrap4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_24 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_25 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_26 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_27 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/sweetalert2/sweetalert2.all.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_28 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/sweetalert2/sweetalert2.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_29 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/bootstrap.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
  
    ViewData["Title"] = "GetCompanyExpenseDetails";

#line default
#line hidden
#nullable disable

            WriteLiteral("<style>\r\n    .datepicker {\r\n        z-index: 99999 !important;\r\n    }\r\n</style>\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        <h6 class=\"text-theme bg-white float-start border-theme p-2\"><b>Company   : ");
            Write(
#nullable restore
#line 12 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                                                                     Model.CompanyName

#line default
#line hidden
#nullable disable
            );
            WriteLiteral("</b></h6>\r\n        <h6 class=\"text-theme bg-white border-theme p-2 float-end\">\r\n            <b>\r\n                Portal Balance   : ");
#nullable restore
#line 15 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                    if (@Model.PortalBalance != null)
                {
                    

#line default
#line hidden
#nullable disable

            Write(
#nullable restore
#line 17 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                     Model.PortalBalance

#line default
#line hidden
#nullable disable
            );
#nullable restore
#line 17 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                        
                }
                else
                {

#line default
#line hidden
#nullable disable

            WriteLiteral("                    <span>0.0 AED</span>\r\n");
#nullable restore
#line 22 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                }

#line default
#line hidden
#nullable disable

            WriteLiteral("            </b>\r\n        </h6>\r\n    </div>\r\n</div>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9816709", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.
#nullable restore
#line 27 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                              message

#line default
#line hidden
#nullable disable
            );
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<div class=\"row\">\r\n    <div class=\"col-lg-12\">\r\n        <a");
            BeginWriteAttribute("href", " href=\"", 869, "\"", 935, 1);
            WriteAttributeValue("", 876, 
#nullable restore
#line 30 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                  Url.Action("Index","CompanyAccount",new{name="MyAccount"})

#line default
#line hidden
#nullable disable
            , 876, 59, false);
            EndWriteAttribute();
            WriteLiteral(@" class=""btn btn-theme float-end ms-2"" style=""margin-bottom:15px;"">Back to List</a>
        <button class=""btn btn-theme float-end Insert"" id=""AddTopUpBalance"">Add Top-up Balance</button>
    </div>
</div>
<div id=""loader"">
    <div class=""spinner-1"">
        <div class=""center-div-1"">
            <div class=""loader-circle-75"">
            </div>
        </div>
    </div>
</div>
<input type=""hidden"" id=""CompanyId""");
            BeginWriteAttribute("value", " value=\"", 1364, "\"", 1388, 1);
            WriteAttributeValue("", 1372, 
#nullable restore
#line 42 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                            Model.CompanyId

#line default
#line hidden
#nullable disable
            , 1372, 16, false);
            EndWriteAttribute();
            WriteLiteral(" />\r\n");
#nullable restore
#line 43 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
 if (Model.TotalBalance != null && Model.TotalBalance != "0")
{

#line default
#line hidden
#nullable disable

            WriteLiteral(@"    <div class=""row"" id=""View1"">
        <div class=""card"">
            <div class=""card-body"">
                <div class=""col-lg-12"">
                    <div class=""col-lg-2 float-start"">
                        <div class=""form-group"">
                            <label class=""control-label"">From Date : </label>
                            <input name=""FromDate"" class=""form-control"" data-toggle=""datepicker"" id=""FromDate"" placeholder=""yyyy-mm-dd"" readonly />
                        </div>
                    </div>
                    <div class=""col-lg-2 float-start"">
                        <div class=""form-group ms-2"">
                            <label class=""control-label"">To Date : </label>
                            <input name=""ToDate"" class=""form-control"" data-toggle=""datepicker"" id=""ToDate"" placeholder=""yyyy-mm-dd"" readonly />
                        </div>
                    </div>
                    <div class=""col-lg-8 float-end mt-3"">
                        <button class=");
            WriteLiteral("\"btn btn-theme pull-right ms-2\" style=\"float:right;margin-bottom:15px;\"");
            BeginWriteAttribute("onclick", " onclick=\"", 2555, "\"", 2595, 3);
            WriteAttributeValue("", 2565, "ExportAsPdf(", 2565, 12, true);
            WriteAttributeValue("", 2577, 
#nullable restore
#line 62 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                                                                                                                    Model.CompanyId

#line default
#line hidden
#nullable disable
            , 2577, 16, false);
            WriteAttributeValue("", 2593, ");", 2593, 2, true);
            EndWriteAttribute();
            WriteLiteral(">Export Pdf</button>\r\n                        <button class=\"btn btn-theme pull-right\" style=\"float:right;margin-bottom:15px;\"");
            BeginWriteAttribute("onclick", " onclick=\"", 2722, "\"", 2764, 3);
            WriteAttributeValue("", 2732, "ExportAsExcel(", 2732, 14, true);
            WriteAttributeValue("", 2746, 
#nullable restore
#line 63 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                                                                                                                 Model.CompanyId

#line default
#line hidden
#nullable disable
            , 2746, 16, false);
            WriteAttributeValue("", 2762, ");", 2762, 2, true);
            EndWriteAttribute();
            WriteLiteral(">Export Excel</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n");
#nullable restore
#line 69 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
}

#line default
#line hidden
#nullable disable

            WriteLiteral(@"
<div class=""row Insert"">
    <div class=""col-12"">
        <div class=""card"">
            <div class=""card-body"">
                <div class=""col-12 float-start"">
                    <h4 class=""card-title text-center"">Account Management</h4>
                    <hr style=""height:1px;"" class=""text-theme"" />
                    <div class=""table-rep-plugin"">
                        <div class=""table-responsive mb-0"" data-pattern=""priority-columns"">
                            <table id=""tblAddExpenses"" class=""table table-bordered table-striped"" style=""border-collapse: collapse; border-spacing: 0; width: 100%;"">
                                <thead>
                                    <tr>
                                        <th>
                                            Date
                                        </th>
                                        <th>
                                            Description
                                        </th>
                    ");
            WriteLiteral(@"                    <th>
                                            Amount
                                        </th>
                                        <th>
                                            Quantity
                                        </th>
                                        <th>
                                            Total Amount
                                        </th>
                                        <th>
                                            Vat
                                        </th>
                                        <th>
                                            Vat Amount
                                        </th>
                                        <th>
                                            Grand Total
                                        </th>
                                        <th>

                                        </th>
                                    </tr>
                      ");
            WriteLiteral(@"          </thead>
                                <tbody>
                                </tbody>
                                <tfoot id=""tableFooter"">
                                    <tr>
                                        <td>
                                            <input type=""text"" id=""txtDate"" class=""form-control"" required readonly />
                                         </td>
                                        <td>
                                            <textarea id=""txtTask"" maxlength=""200"" rows=""3"" cols=""30"" class=""form-control"" required></textarea>
                                        </td>
                                        <td>
                                            <input type=""text"" id=""txtAmount"" class=""form-control"" step="".01"" maxlength=""10"" onkeyup=""ValidAlphabet(this)"" onfocusout=""ValidAlphabet(this)"" onkeypress=""ValidTextLength(this)"" required />
                                        </td>
                                        <");
            WriteLiteral(@"td>
                                            <div style=""width: 110px;"" class=""product-cart-touchspin"">
                                                <input data-toggle=""touchspin"" type=""text"" value=""01"" id=""txtQuantity"" class=""txtQuantity"" required readonly />
                                            </div>
                                        </td>
                                        <td>
                                            <input type=""text"" id=""txtTotalAmount"" class=""form-control"" step="".01"" value=""0"" required readonly />
                                        </td>
                                        <td>
                                            <input type=""text"" id=""txtVat"" step="".01"" maxlength=""4"" class=""form-control"" value=""0"" onkeyup=""ValidAlphabet(this)"" onfocusout=""ValidAlphabet(this)"" onkeypress=""ValidTextLength(this)"" required />
                                        </td>
                                        <td>
                                  ");
            WriteLiteral(@"          <input type=""text"" id=""txtVatAmount"" step="".01"" class=""form-control"" value=""0"" required readonly />
                                        </td>
                                        <td>
                                            <input type=""text"" id=""txtGrandAmount"" class=""form-control"" step="".01"" value=""0"" required readonly />
                                        </td>
                                        <td>
                                            <input type=""button"" id=""btnAdd"" class=""btn btn-theme"" value=""Add"" />
                                            <button type=""button"" id=""btnClear"" class=""btn btn-theme mt-2""><i class=""fas fa-trash""></i></button>
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        <input type=""button"" id=""btnSave"" class=""btn btn-theme"" value=""Save all"" />
                ");
            WriteLiteral(@"        <span id=""btnPaymentDetailsMessage15"" class=""text-danger"">Please Wait While We Are Saving Portal Balance Details.</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class=""row"" id=""View"">
    <div class=""col-12"">
        <div class=""card"">
            <div class=""card-header"">
                <div class=""col-md-12 float-end"">
                    <button class=""btn btn-theme float-end"" onclick=""ClearFilterToDatatable();"">Clear All</button>
                </div>
                <div class=""col-md-12"">
                    <div class=""col-md-6 float-start"">
                        <div class=""col-lg-4 float-start"">
                            <div class=""form-group"">
                                <label class=""control-label"">Sort By : </label>
                                <select class=""form-select"" id=""sortingByFinal"">
                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9829713", async() => {
                WriteLiteral("Transaction Id");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9830941", async() => {
                WriteLiteral("Date");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9832159", async() => {
                WriteLiteral("Description");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            WriteLiteral(@"                                </select>
                            </div>
                        </div>
                        <div class=""col-lg-4 float-start"">
                            <div class=""form-group ms-2"">
                                <label class=""control-label"">Sorting Order : </label>
                                <select class=""form-select"" id=""sortingDirectionFinal"">
                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9833832", async() => {
                WriteLiteral("Low to High");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9835057", async() => {
                WriteLiteral("High to Low");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                </select>
                            </div>
                        </div>
                        <div class=""col-lg-4 float-start"" style=""margin-top:28px !important;"">
                            <button class=""btn btn-theme float-start ms-2 me-2"" onclick=""ApplyFilterToDataTable();"">Apply Filter</button>
                        </div>
                    </div>
                    <div class=""col-md-6 float-start"">
                        <div class=""col-lg-4 float-start"">
                            <div class=""form-group"">
                                <label class=""control-label"">Search By : </label>
                                <select class=""form-select"" id=""searchByValueFinal"">
                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9837046", async() => {
                WriteLiteral("Transaction Id");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9838274", async() => {
                WriteLiteral("Date");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9839492", async() => {
                WriteLiteral("Description");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9840717", async() => {
                WriteLiteral("Credit(AED)");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9841942", async() => {
                WriteLiteral("Debit(AED)");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9843166", async() => {
                WriteLiteral("Vat(%)");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9844386", async() => {
                WriteLiteral("Vat Amount");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_10.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                </select>
                            </div>
                        </div>
                        <div class=""col-lg-4 float-start"">
                            <div class=""form-group ms-2"">
                                <label class=""control-label"">Search By : </label>
                                <input id=""searchedValueFinal"" name=""searchedValueFinal"" class=""form-control"" />
                            </div>
                        </div>
                        <div class=""col-lg-4 float-start"" style=""margin-top:28px !important;"">
                            <button class=""btn btn-theme float-start ms-2 me-2"" onclick=""ApplyFilterToDataTable();"">Search</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""card-body"">
                <h4 class=""card-title text-center"">Company Account Summary</h4>
                <hr style=""height:1px;"" class=""text-theme"" />
             ");
            WriteLiteral(@"   <div class=""table-rep-plugin"">
                    <div class=""table-responsive mb-0"" data-pattern=""priority-columns"">
                        <table id=""datatable"" class=""table table-bordered table-striped dt-responsive nowrap"" style=""border-collapse: collapse; border-spacing: 0; width: 100%;"">
                            <thead>
                                <tr>
                                    <th>
                                        Transaction Id
                                    </th>
                                    <th data-sort='YYYYMMDD'>
                                        Date
                                    </th>
                                    <th>
                                        Description
                                    </th>
                                    <th>
                                        Credit(AED)
                                    </th>
                                    <th>
                                   ");
            WriteLiteral(@"     Debit(AED)
                                    </th>
                                    <th>
                                        Balance
                                    </th>
                                    <th>
                                        Vat (%)
                                    </th>
                                    <th>
                                        Vat Amount
                                    </th>
                                    <th>
                                        Download Receipt
                                    </th>
                                    <th>

                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
");
            WriteLiteral("                        </table>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9848767", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => 
#nullable restore
#line 290 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                               Model.CompanyId

#line default
#line hidden
#nullable disable
            );
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<div id=\"PortalBalanceAmount\" class=\"modal\" role=\"dialog\" data-bs-keyboard=\"false\" data-bs-backdrop=\"static\">\r\n");
            WriteLiteral(@"    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"">Portal Balance</h5>
                <button type=""button"" class=""btn btn-theme"" id=""PortalBalanceAmountClose"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9851230", async() => {
                WriteLiteral(@"
                    <div class=""form-group"">
                        <label class=""control-label"">Date</label> <span class=""text-danger"">*</span>
                        <input name=""Date"" class=""form-control"" data-toggle=""datepicker"" id=""ReceiptDate"" placeholder=""yyyy-mm-dd"" required readonly />
                    </div>
                    <div class=""form-group"">
                        <label class=""control-label"">Payment Mode</label> <span class=""text-danger"">*</span>
                        <select class=""form-select"" name=""PaymentMode"" id=""paymentMode"" required>
                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9852152", async() => {
                    WriteLiteral("Select Payment Mode");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_12.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9853443", async() => {
                    WriteLiteral("Cash");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_13.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9854719", async() => {
                    WriteLiteral("Online Transaction");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_14.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9856009", async() => {
                    WriteLiteral("Cheque");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_15.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_15);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                        </select>
                    </div>
                    <div class=""form-group"">
                        <label class=""control-label"">Description</label> <span class=""text-danger"">*</span>
                        <textarea name=""Description"" id=""txtDescription"" class=""form-control text-wrap"" maxlength=""200"" rows=""3"" cols=""30"" required></textarea>
                    </div>
                    <div class=""form-group"">
                        <label class=""control-label"">Amount</label> <span class=""text-danger"">*</span>
                        <input name=""Amount"" id=""Amount"" type=""text"" class=""form-control"" step="".01"" maxlength=""10"" onkeyup=""ValidAlphabet(this)"" onfocusout=""ValidAlphabet(this)"" onkeypress=""ValidTextLength(this)"" required />
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9858108", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => 
#nullable restore
#line 324 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                                       Model.CompanyId

#line default
#line hidden
#nullable disable
                );
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                        <input type=""hidden"" name=""Actionname"" value=""GetCompanyExpenseDetails"" />
                        <input type=""hidden"" name=""cnt"" value=""CompanyAccount"" />
                    </div>
                    <div class=""form-group"" style=""width: 110px;"">
                        <label class=""control-label"">Quantity</label> <span class=""text-danger"">*</span>
                        <input data-toggle=""touchspin"" type=""text"" id=""Quantity"" name=""Quantity"" value=""01"" class=""txtQuantity"" required readonly />
                    </div>
                    <div class=""form-group"">
                        <label class=""control-label"">Total Amount</label> <span class=""text-danger"">*</span>
                        <input name=""TotalAmount"" id=""TotalAmount"" type=""text"" class=""form-control"" step="".01"" required readonly />
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9860866", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => 
#nullable restore
#line 335 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                                       Model.CompanyId

#line default
#line hidden
#nullable disable
                );
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                        <input type=""hidden"" name=""Actionname"" value=""GetCompanyExpenseDetails"" />
                        <input type=""hidden"" name=""cnt"" value=""CompanyAccount"" />
                    </div>
                    <div class=""modal-footer"">
                        <div class=""form-group"">
                            <input type=""button"" id=""btnAddPortal"" value=""Add"" class=""btn btn-theme"" />
                            <span id=""btnPaymentDetailsMessage"" class=""text-danger"">Please Wait While We Are Saving Portal Balance Details.</span>
                        </div>
                    </div>
                ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Action = (string)__tagHelperAttribute_16.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_16);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Controller = (string)__tagHelperAttribute_17.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_17);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_18.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div id=\"UpdatePortalBalanceAmount\" class=\"modal\" role=\"dialog\" data-bs-keyboard=\"false\" data-bs-backdrop=\"static\">\r\n");
            WriteLiteral(@"    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"">Portal Balance</h5>
                <button type=""button"" class=""btn btn-theme"" id=""UpdatePortalBalanceAmountClose"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
            </div>
        </div>
    </div>
</div>

<div id=""EditExpense"" class=""modal"" role=""dialog"" data-bs-keyboard=""false"" data-bs-backdrop=""static"">
");
            WriteLiteral(@"    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"">Edit</h5>
                <button type=""button"" class=""close btn btn-theme"" id=""EditExpenseModalClose"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
            </div>
        </div>
    </div>
</div>

");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9866368", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- Required datatable js -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9867467", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_20);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9868532", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<!-- Responsive examples -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9869633", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9870698", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_23);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<!-- Bootrstrap touchspin -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9871800", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_24);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_25);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9872941", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_26);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<!-- Sweet Alerts-->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9874034", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_27);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9875099", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_28);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f1f39d9f16aec5ce8f4d97b8e138e98d3bfab923b9f6e71acb74678b9776f9876160", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_29);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<script>\r\n    $(document).ready(function () {\r\n        $.ajax({\r\n            contentType: \'application/json; charset=utf-8\',\r\n            type: \'POST\',\r\n            url: \"");
            Write(
#nullable restore
#line 407 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                   Url.Action("UpdateRepeatedAccountEntries", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
            success: function (result) {
            }
        });
    });

    function ValidAlphabet(data) {
        var code = (event.which) ? event.which : event.keyCode;
        if (!(code >= 48 && code <= 57) || !(code >= 96 && code <= 105) || code == 54 || code == 189 || code == 219 || code == 57) {
            if (code != 32 && code != 190) {
                var digits = $(data).val();
                var lastValue = digits.substring(digits.length - 1);
                digits = digits.replace(/[^(\.\s)[^0-9-]/g, '');
                if (lastValue == ""^"" || lastValue == ""-"" || lastValue == ""("" || lastValue == "")"" || lastValue == ""["") {
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(0, lastIndex);
                    digits = currentText;
                    digits = digits.replace(lastValue, '');
                }
                else if (digits.includes(""-"") || digits.includes(""^"") || digits.includes(""("") || d");
            WriteLiteral(@"igits.includes("")"") || digits.includes(""["")) {
                    if (digits.includes(""-"")) {
                        var lastIndex = digits.lastIndexOf(""-"");
                        var currentText = digits.substring(lastIndex + 1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes(""^"")) {
                        var lastIndex = digits.lastIndexOf(""^"");
                        var currentText = digits.substring(lastIndex + 1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes(""("")) {
                        var lastIndex = digits.lastIndexOf(""("");
                        var currentText = digits.substring(lastIndex + 1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes("")"")) {
                        var lastIndex = digits.lastIndexOf("")"");
                  ");
            WriteLiteral(@"      var currentText = digits.substring(lastIndex + 1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes(""["")) {
                        var lastIndex = digits.lastIndexOf(""["");
                        var currentText = digits.substring(lastIndex + 1, digits.length);
                        digits = currentText;
                    }
                }
                else if (digits.replace(/[^.]/g, """").length > 1) {
                    lastValue = digits.substring(digits.length - 1);
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(lastIndex, digits.length);
                    if (currentText.replace(/[^.]/g, """").length > 1) {
                        var currentDigits1 = digits.slice(0, lastIndex + 1);
                        digits = currentDigits1;
                    }
                    else {
                        var currentDigits = d");
            WriteLiteral(@"igits.slice(0, lastIndex);
                        digits = currentDigits;
                    }

                }
                $(data).val(digits);
            }
            else if (digits.replace(/[^.]/g, """").length > 1) {
                lastValue = digits.substring(digits.length - 1);
                var lastIndex = digits.indexOf(lastValue);
                var currentText = digits.substring(lastIndex, digits.length);
                if (currentText.replace(/[^.]/g, """").length > 1) {
                    var currentDigits1 = digits.slice(0, lastIndex + 1);
                    digits = currentDigits1;
                }
                else {
                    var currentDigits = digits.slice(0, lastIndex);
                    digits = currentDigits;
                }

                $(data).val(digits);
            }
        }
    }

    function ValidTextLength(data) {

        var digits = $(data).val();
        var currentDigits = digits.split(""."");
        if (digit");
            WriteLiteral(@"s.includes(""."") == true) {
            if (currentDigits[1].length >= 2) {
                event.preventDefault();
            }
        }
    }
</script>


<script>
    $(document).ready(function () {
        $(""#btnPaymentDetailsMessage"").hide();
        $(""#btnPaymentDetailsMessage15"").hide();
    });

    $(document).ready(function () {
        $(""#loader"").hide();
        var message = $(""#message"").val();
        var companyId = $(""#CompanyId"").val();
        if (message != null && message != """") {
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                },
                buttonsStyling: false
            })

            swalWithBootstrapButtons.fire({
                title: 'Error.',
                html: message,
                icon: 'error'
            }).then((result) => {
                var url = """);
            Write(
#nullable restore
#line 524 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                            Url.Action("GetCompanyExpenseDetails", "CompanyAccount")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                url = url + ""?Id="" + companyId;
                window.location.href = url;
            });
        }
    });

    $(function () {
        var today = new Date();
        $('#ReceiptDate').datepicker({
            format: ""yyyy-mm-dd"",
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
            endDate: ""today"",
            maxDate: today
        }).on('changeDate', function (ev) {
            $(this).datepicker('hide');
        });
    });
</script>
<script>
    $(""#Quantity"").on(""change"", function () {
        $(""#TotalAmount"").val(0);
        var amount = $(""#Amount"").val();
        var quantity = $(""#Quantity"").val();
        var totalAmount = parseFloat(amount) * parseInt(quantity);
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        $(""#TotalAmount"").val(parseFloat(totalAmount).toFixed(2));
    });

    $(""#Amount"").on(""keyup"", function () {
     ");
            WriteLiteral(@"   $(""#TotalAmount"").val(0);
        var amount = $(""#Amount"").val();
        var quantity = $(""#Quantity"").val();
        var totalAmount = parseFloat(amount) * parseInt(quantity);
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        $(""#TotalAmount"").val(parseFloat(totalAmount).toFixed(2));
    });

    $(""#Quantity"").on(""focus"", function () {
        $(""#TotalAmount"").val(0);
        var amount = $(""#Amount"").val();
        var quantity = $(""#Quantity"").val();
        var totalAmount = parseFloat(amount) * parseInt(quantity);
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        $(""#TotalAmount"").val(parseFloat(totalAmount).toFixed(2));
    });

    $(""#Amount"").on(""focus"", function () {
        $(""#TotalAmount"").val(0);
        var amount = $(""#Amount"").val();
        var quantity = $(""#Quantity"").val();
        var totalAmount = parseFloat(amount) * parseInt(quantity);
        if (isNaN(totalAmount)) {
            totalAmou");
            WriteLiteral("nt = 0;\r\n        }\r\n        $(\"#TotalAmount\").val(parseFloat(totalAmount).toFixed(2));\r\n    });\r\n</script>\r\n<script>\r\n    $(document).ready(function () {\r\n        var flag = false;\r\n        var companyId = $(\"#CompanyId\").val();\r\n        var url = \"");
            Write(
#nullable restore
#line 595 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                    Url.Action("GetCompanyAccountDetailsPagination", "CompanyAccount")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
        url = url + ""?CompanyId="" + companyId;

        var table = $('#datatable').DataTable({
            ""processing"": true,
            ""serverSide"": true,
            ""filter"": false,
            ""ajax"": {
                ""type"": ""post"",
                ""datatype"": ""json"",
                ""data"": function () {
                    var info = $('#datatable').DataTable().page.info();
                    $('#datatable').DataTable().ajax.url(
                        url
                    );
                }
            },
            ""columns"": [
                { ""data"": ""transactionId"", ""name"": ""Transaction Id"" },
                { ""data"": ""date"", ""name"": ""Date"" },
                {
                    ""data"": function (data, full, meta) {
                        var description = data.description;
                        if (description.length > 70) {
                            var desc = description.substring(0, 70);
                            desc = desc + '....';
      ");
            WriteLiteral(@"                      return '<span title=""' + data.description + '"" class=""text-wrap"">' + data.description + '</span>';
                        }
                        else {
                            return '<span title=""' + data.description + '"" class=""text-wrap"">' + description + '</span>';
                        }
                    },
                    ""name"": ""Description""
                },
                { ""data"": ""credit"", ""name"": ""Credit(AED)"" },
                { ""data"": ""debit"", ""name"": ""Debit(AED)"" },
                { ""data"": ""balance"", ""name"": ""Balance"" },
                {
                    ""data"": function (data, full, meta) {
                        if (data.debit != ""---"") {
                            return data.vat + '%';
                        }
                        else {
                            return '---';
                        }
                    },
                    ""name"": ""Vat (%)""
                },
                {
            ");
            WriteLiteral(@"        ""data"": function (data, full, meta) {
                        if (data.debit != ""---"") {
                            return data.vatAmount;
                        }
                        else {
                            return '---';
                        }
                    },
                    ""name"": ""Vat Amount""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.transactionType == ""Debit"" && data.expenseReceiptId != 0) {
                            var url = """);
            Write(
#nullable restore
#line 657 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                        Url.Action("DownloadExpenseReceipt", "PortalBalanceExpense")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                            return '<form action=""' + url + '"" method=""get""> <input type=""hidden"" name=""ReceiptId"" value=""' + data.expenseReceiptId + '""/><input type=""submit"" value=""Download"" name=""Download Receipt"" class=""btn btn-theme""/></form>';
                        }
                        else if (data.transactionType == ""Credit"" && data.expenseReceiptId != 0) {
                            var url = """);
            Write(
#nullable restore
#line 661 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                        Url.Action("DownloadPaymentReceipt", "CompanyAccount")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                            return '<form action=""' + url + '"" method=""get"" target=""_blank""> <input type=""hidden"" value=""' + data.expenseReceiptId + '"" name=""Id""/><input type=""submit"" value=""Download"" name=""Download Receipt"" id=""downloadReceipt"" class=""btn btn-theme ms-1""/></form>';
                        }
                        else {
                            return '---';
                        }
                    },
                    ""name"": ""Download Receipt""
                },
                {
                    ""data"": function (data, full, meta) {
                        var expenseUpdate = ""UpdateExpenses("" + data.id + "",'"" + data.transactionId + ""')"";
                        var expenseDelete = ""RemoveExpenses("" + data.id + "",'"" + data.grandTotal + ""',"" + data.companyId + "")"";
                        var portalUpdate = ""UpdatePayment("" + data.id + "","" + data.companyId + "",'"" + data.transactionId + ""')"";
                        var portalDelete = ""RemovePayment("" + data.i");
            WriteLiteral(@"d + "","" + data.companyId + "",'"" + data.grandTotal + ""')""
                        if (data.debit != ""---"") {
                            return '<span class=""btn btn-theme Update"" onclick=' + expenseUpdate + '><i class=""fas fa-edit""></i></span><span class=""btn btn-theme Delete ms-1"" onclick=' + expenseDelete + '><i class=""fas fa-trash""></i></span>';
                        }
                        else {
                            return '<span class=""btn btn-theme Update"" onclick=' + portalUpdate + '><i class=""fas fa-edit""></i></span><span class=""btn btn-theme Delete ms-1"" onclick=' + portalDelete + '><i class=""fas fa-trash""></i></span>';
                        }
                    },
                    ""name"": """"
                },
            ],
            ""initComplete"": function (settings, json) {
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();

                var accountManagementView = sessionStorage.getItem(""MyAccoun");
            WriteLiteral(@"t_View"");
                var accountManagementUpdate = sessionStorage.getItem(""MyAccount_Update"");
                var accountManagementDelete = sessionStorage.getItem(""MyAccount_Delete"");

                if (accountManagementView != """" && accountManagementView != ""null"" && accountManagementView != null && accountManagementView != ""undefined"") {
                    $("".Details"").show();
                }

                if (accountManagementUpdate != """" && accountManagementUpdate != ""null"" && accountManagementUpdate != null && accountManagementUpdate != ""undefined"") {
                    $("".Update"").show();
                }

                if (accountManagementDelete != """" && accountManagementDelete != ""null"" && accountManagementDelete != null && accountManagementDelete != ""undefined"") {
                    $("".Delete"").show();
                }
                if ((accountManagementView == """" || accountManagementView == ""null"" || accountManagementView == null || accountManagementView == ");
            WriteLiteral(@"""undefined"") &&
                    (accountManagementUpdate == """" || accountManagementUpdate == ""null"" || accountManagementUpdate == null || accountManagementUpdate == ""undefined"") &&
                    (accountManagementDelete == """" || accountManagementDelete == ""null"" || accountManagementDelete == null || accountManagementDelete == ""undefined"")) {
                    var module = $(""#Module"").val();
                    $.ajax({
                        url: """);
            Write(
#nullable restore
#line 711 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                               Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Module"": ""MyAccount"" },
                        success: function (RoleResponse) {
                            $(""#loader"").show();
                            $.ajax({
                                url: """);
            Write(
#nullable restore
#line 717 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                       Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                method: ""GET"",
                                data: { ""Module"": ""MyAccount"" },
                                success: function (UserResponse) {
                                    $(""#loader"").show();

                                    if (UserResponse.length > 0) {
                                        for (let i = 0; i < UserResponse.length; i++) {
                                            $(""#"" + UserResponse[i]).show();
                                            if (UserResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (UserResponse[i] == ""Update"") {
                                                $(""."" + UserResponse[i]).show();
                                            }
                                            if (UserResponse[i] == ""Delete"") {
                                                $("".Delete");
            WriteLiteral(@""").show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                    else if (RoleResponse.length > 0) {

                                        for (let i = 0; i < RoleResponse.length; i++) {
                                            $(""#"" + RoleResponse[i]).show();
                                            if (RoleResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (RoleResponse[i] == ""Update"") {
                                                $(""."" + RoleResponse[i]).show();
                                            }
                          ");
            WriteLiteral(@"                  if (RoleResponse[i] == ""Delete"") {
                                                $("".Delete"").show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                }
                            })
                        }
                    });
                }
                $(""#loader"").hide();
            },
            ""drawCallback"": function (settings) {
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();
                var accountManagementView = sessionStorage.getItem(""MyAccount_View"");
                var accountManagementUpdate = sessionStorage.getItem(""MyAccount_Update"");
                var accou");
            WriteLiteral(@"ntManagementDelete = sessionStorage.getItem(""MyAccount_Delete"");

                if (accountManagementView != """" && accountManagementView != ""null"" && accountManagementView != null && accountManagementView != ""undefined"") {
                    $("".Details"").show();
                }

                if (accountManagementUpdate != """" && accountManagementUpdate != ""null"" && accountManagementUpdate != null && accountManagementUpdate != ""undefined"") {
                    $("".Update"").show();
                }

                if (accountManagementDelete != """" && accountManagementDelete != ""null"" && accountManagementDelete != null && accountManagementDelete != ""undefined"") {
                    $("".Delete"").show();
                }

                if ((accountManagementView == """" || accountManagementView == ""null"" || accountManagementView == null || accountManagementView == ""undefined"") &&
                    (accountManagementUpdate == """" || accountManagementUpdate == ""null"" || accountManagement");
            WriteLiteral(@"Update == null || accountManagementUpdate == ""undefined"") &&
                    (accountManagementDelete == """" || accountManagementDelete == ""null"" || accountManagementDelete == null || accountManagementDelete == ""undefined"")) {
                    var module = $(""#Module"").val();
                    $.ajax({
                        url: """);
            Write(
#nullable restore
#line 790 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                               Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Module"": ""MyAccount"" },
                        success: function (RoleResponse) {
                            $(""#loader"").show();
                            $.ajax({
                                url: """);
            Write(
#nullable restore
#line 796 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                       Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                method: ""GET"",
                                data: { ""Module"": ""MyAccount"" },
                                success: function (UserResponse) {
                                    $(""#loader"").show();

                                    if (UserResponse.length > 0) {
                                        for (let i = 0; i < UserResponse.length; i++) {
                                            $(""#"" + UserResponse[i]).show();
                                            if (UserResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (UserResponse[i] == ""Update"") {
                                                $(""."" + UserResponse[i]).show();
                                            }
                                            if (UserResponse[i] == ""Delete"") {
                                                $("".Delete");
            WriteLiteral(@""").show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                    else if (RoleResponse.length > 0) {

                                        for (let i = 0; i < RoleResponse.length; i++) {
                                            $(""#"" + RoleResponse[i]).show();
                                            if (RoleResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (RoleResponse[i] == ""Update"") {
                                                $(""."" + RoleResponse[i]).show();
                                            }
                          ");
            WriteLiteral(@"                  if (RoleResponse[i] == ""Delete"") {
                                                $("".Delete"").show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                }
                            })
                        }
                    });
                }
                $(""#loader"").hide();
            },
            ""responsive"": true,
            ""deferRender"": true,
            ""language"": {
                'processing': '<div class=""spinner-2""><div class=""center-div-2""><div class=""loader-circle-1""></div></div></div>'
            },
            paging: true,
            ordering: false,
            searching: false,
            ""aLengthMenu"": [20, 30, 50],");
            WriteLiteral(@"
            dom: ""<'row'<'col-sm-3'l><'col-sm-3'f><'col-sm-6'p>>"" +
                ""<'row'<'col-sm-12'tr>>"" +
                ""<'row'<'col-sm-5'i><'col-sm-7'p>>"",
        });

        $('#datatable tbody').on('click', 'td.dtr-control', function () {
            var tr = $(this).closest('tr');
            var row = table.row(tr);
            if (!tr.hasClass(""shown"")) {
                $(""#loader"").show();
                row.child.show();
                tr.addClass('shown');
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();

                var accountManagementView = sessionStorage.getItem(""MyAccount_View"");
                var accountManagementUpdate = sessionStorage.getItem(""MyAccount_Update"");
                var accountManagementDelete = sessionStorage.getItem(""MyAccount_Delete"");

                if (accountManagementView != """" && accountManagementView != ""null"" && accountManagementView != null && accountManagementView ");
            WriteLiteral(@"!= ""undefined"") {
                    $("".Details"").show();
                }

                if (accountManagementUpdate != """" && accountManagementUpdate != ""null"" && accountManagementUpdate != null && accountManagementUpdate != ""undefined"") {
                    $("".Update"").show();
                }

                if (accountManagementDelete != """" && accountManagementDelete != ""null"" && accountManagementDelete != null && accountManagementDelete != ""undefined"") {
                    $("".Delete"").show();
                }
                if ((accountManagementView == """" || accountManagementView == ""null"" || accountManagementView == null || accountManagementView == ""undefined"") &&
                    (accountManagementUpdate == """" || accountManagementUpdate == ""null"" || accountManagementUpdate == null || accountManagementUpdate == ""undefined"") &&
                    (accountManagementDelete == """" || accountManagementDelete == ""null"" || accountManagementDelete == null || accountManagementDelete");
            WriteLiteral(" == \"undefined\")) {\r\n                    var module = $(\"#Module\").val();\r\n                    $.ajax({\r\n                        url: \"");
            Write(
#nullable restore
#line 889 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                               Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Module"": ""MyAccount"" },
                        success: function (RoleResponse) {
                            $(""#loader"").show();
                            $.ajax({
                                url: """);
            Write(
#nullable restore
#line 895 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                       Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                method: ""GET"",
                                data: { ""Module"": ""MyAccount"" },
                                success: function (UserResponse) {
                                    $(""#loader"").show();
                                    if (UserResponse.length > 0) {
                                        for (let i = 0; i < UserResponse.length; i++) {
                                            $(""#"" + UserResponse[i]).show();
                                            if (UserResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (UserResponse[i] == ""Update"") {
                                                $(""."" + UserResponse[i]).show();
                                            }
                                            if (UserResponse[i] == ""Delete"") {
                                                $("".Delete"")");
            WriteLiteral(@".show();
                                            }
                                        }
                                        $(""#loader"").hide();
                                    }
                                    else if (RoleResponse.length > 0) {
                                        for (let i = 0; i < RoleResponse.length; i++) {
                                            $(""#"" + RoleResponse[i]).show();
                                            if (RoleResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (RoleResponse[i] == ""Update"") {
                                                $(""."" + RoleResponse[i]).show();
                                            }
                                            if (RoleResponse[i] == ""Delete"") {
                                                $("".Delete"").show();
                            ");
            WriteLiteral(@"                }
                                        }
                                        $(""#loader"").hide();
                                    }
                                }
                            })
                        }
                    });
                }
                $(""#loader"").hide();
            }
            else {
                row.child.hide();
                tr.removeClass('shown');
            }
        });
    });
</script>
<script>
    function ApplyFilterToDataTable() {
        var flag = false;
        var companyId = $(""#CompanyId"").val();
        var sortingBy = $(""#sortingByFinal"").val();
        var sortingOrder = $(""#sortingDirectionFinal"").val();
        var searchBy = $(""#searchByValueFinal"").val();
        var searchedValue = $(""#searchedValueFinal"").val();
        var url = """);
            Write(
#nullable restore
#line 952 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                    Url.Action("GetCompanyAccountDetailsPagination", "CompanyAccount")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
        url = url + ""?CompanyId="" + companyId + ""&sortBy="" + sortingBy + ""&sortingDirection="" + sortingOrder;
        if (searchBy != """" && searchedValue != """") {
            url = url + ""&searchBy="" + searchBy + ""&searchValue="" + searchedValue;
        }
        if ($.fn.dataTable.isDataTable('#datatable')) {
            $('#datatable').DataTable().destroy();
            $('#datatable').empty();
        }

        var table = $('#datatable').DataTable({
            ""processing"": true,
            ""serverSide"": true,
            ""filter"": false,
            ""ajax"": {
                ""type"": ""post"",
                ""datatype"": ""json"",
                ""data"": function () {
                    var info = $('#datatable').DataTable().page.info();
                    $('#datatable').DataTable().ajax.url(
                        url
                    );
                }
            },
            ""columns"": [
                { ""data"": ""transactionId"", sTitle: ""Transaction Id"" },
     ");
            WriteLiteral(@"           { ""data"": ""date"", sTitle: ""Date"" },
                {
                    ""data"": function (data, full, meta) {
                        var description = data.description;
                        if (description.length > 70) {
                            var desc = description.substring(0, 70);
                            desc = desc + '....';
                            return '<span title=""' + data.description + '"" class=""text-wrap"">' + data.description + '</span>';
                        }
                        else {
                            return '<span title=""' + data.description + '"" class=""text-wrap"">' + description + '</span>';
                        }
                    },
                    sTitle: ""Description""
                },
                { ""data"": ""credit"", sTitle: ""Credit(AED)"" },
                { ""data"": ""debit"", sTitle: ""Debit(AED)"" },
                { ""data"": ""balance"", sTitle: ""Balance"" },
                {
                    ""data"": function");
            WriteLiteral(@" (data, full, meta) {
                        if (data.debit != ""---"") {
                            return data.vat + '%';
                        }
                        else {
                            return '---';
                        }
                    },
                    sTitle: ""Vat (%)""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.debit != ""---"") {
                            return data.vatAmount;
                        }
                        else {
                            return '---';
                        }
                    },
                    sTitle: ""Vat Amount""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.transactionType == ""Debit"" && data.expenseReceiptId != 0) {
                            var url = """);
            Write(
#nullable restore
#line 1021 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                        Url.Action("DownloadExpenseReceipt", "PortalBalanceExpense")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                            return '<form action=""' + url + '"" method=""get""> <input type=""hidden"" name=""ReceiptId"" value=""' + data.expenseReceiptId + '""/><input type=""submit"" value=""Download"" name=""Download Receipt"" class=""btn btn-theme""/></form>';
                        }
                        else if (data.transactionType == ""Credit"" && data.expenseReceiptId != 0) {
                            var url = """);
            Write(
#nullable restore
#line 1025 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                        Url.Action("DownloadPaymentReceipt", "CompanyAccount")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
                            return '<form action=""' + url + '"" method=""get"" target=""_blank""> <input type=""hidden"" value=""' + data.expenseReceiptId + '"" name=""Id""/><input type=""submit"" value=""Download"" name=""Download Receipt"" id=""downloadReceipt"" class=""btn btn-theme ms-1""/></form>';
                        }
                        else {
                            return '---';
                        }
                    },
                    sTitle: ""Download Receipt""
                },
                {
                    ""data"": function (data, full, meta) {
                        var expenseUpdate = ""UpdateExpenses("" + data.id + "",'"" + data.transactionId + ""')"";
                        var expenseDelete = ""RemoveExpenses("" + data.id + "",'"" + data.grandTotal + ""',"" + data.companyId + "")"";
                        var portalUpdate = ""UpdatePayment("" + data.id + "","" + data.companyId + "",'"" + data.transactionId + ""')"";
                        var portalDelete = ""RemovePayment("" + data.i");
            WriteLiteral(@"d + "","" + data.companyId + "",'"" + data.grandTotal + ""')""
                        if (data.debit != ""---"") {
                            return '<span class=""btn btn-theme Update"" onclick=' + expenseUpdate + '><i class=""fas fa-edit""></i></span><span class=""btn btn-theme Delete ms-1"" onclick=' + expenseDelete + '><i class=""fas fa-trash""></i></span>';
                        }
                        else {
                            return '<span class=""btn btn-theme Update"" onclick=' + portalUpdate + '><i class=""fas fa-edit""></i></span><span class=""btn btn-theme Delete ms-1"" onclick=' + portalDelete + '><i class=""fas fa-trash""></i></span>';
                        }
                    },
                    sTitle: """"
                },
            ],
            ""initComplete"": function (settings, json) {
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();
                var accountManagementView = sessionStorage.getItem(""MyAccount_");
            WriteLiteral(@"View"");
                var accountManagementUpdate = sessionStorage.getItem(""MyAccount_Update"");
                var accountManagementDelete = sessionStorage.getItem(""MyAccount_Delete"");


                if (accountManagementView != """" && accountManagementView != ""null"" && accountManagementView != null && accountManagementView != ""undefined"") {
                    $("".Details"").show();
                }

                if (accountManagementUpdate != """" && accountManagementUpdate != ""null"" && accountManagementUpdate != null && accountManagementUpdate != ""undefined"") {
                    $("".Update"").show();
                }

                if (accountManagementDelete != """" && accountManagementDelete != ""null"" && accountManagementDelete != null && accountManagementDelete != ""undefined"") {
                    $("".Delete"").show();
                }
                if ((accountManagementView == """" || accountManagementView == ""null"" || accountManagementView == null || accountManagementView == ");
            WriteLiteral(@"""undefined"") &&
                    (accountManagementUpdate == """" || accountManagementUpdate == ""null"" || accountManagementUpdate == null || accountManagementUpdate == ""undefined"") &&
                    (accountManagementDelete == """" || accountManagementDelete == ""null"" || accountManagementDelete == null || accountManagementDelete == ""undefined"")) {
                    var module = $(""#Module"").val();
                    $.ajax({
                        url: """);
            Write(
#nullable restore
#line 1075 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                               Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Module"": ""MyAccount"" },
                        success: function (RoleResponse) {
                            $(""#loader"").show();
                            $.ajax({
                                url: """);
            Write(
#nullable restore
#line 1081 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                       Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                method: ""GET"",
                                data: { ""Module"": ""MyAccount"" },
                                success: function (UserResponse) {
                                    $(""#loader"").show();
                                    if (UserResponse.length > 0) {
                                        for (let i = 0; i < UserResponse.length; i++) {
                                            $(""#"" + UserResponse[i]).show();
                                            if (UserResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (UserResponse[i] == ""Update"") {
                                                $(""."" + UserResponse[i]).show();
                                            }
                                            if (UserResponse[i] == ""Delete"") {
                                                $("".Delete"")");
            WriteLiteral(@".show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                    else if (RoleResponse.length > 0) {
                                        for (let i = 0; i < RoleResponse.length; i++) {
                                            $(""#"" + RoleResponse[i]).show();
                                            if (RoleResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (RoleResponse[i] == ""Update"") {
                                                $(""."" + RoleResponse[i]).show();
                                            }
                              ");
            WriteLiteral(@"              if (RoleResponse[i] == ""Delete"") {
                                                $("".Delete"").show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                }
                            })
                        }
                    });
                }
                $(""#loader"").hide();
            },
            ""drawCallback"": function (settings, json) {
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();
                var accountManagementView = sessionStorage.getItem(""MyAccount_View"");
                var accountManagementUpdate = sessionStorage.getItem(""MyAccount_Update"");
                var acc");
            WriteLiteral(@"ountManagementDelete = sessionStorage.getItem(""MyAccount_Delete"");


                if (accountManagementView != """" && accountManagementView != ""null"" && accountManagementView != null && accountManagementView != ""undefined"") {
                    $("".Details"").show();
                }

                if (accountManagementUpdate != """" && accountManagementUpdate != ""null"" && accountManagementUpdate != null && accountManagementUpdate != ""undefined"") {
                    $("".Update"").show();
                }

                if (accountManagementDelete != """" && accountManagementDelete != ""null"" && accountManagementDelete != null && accountManagementDelete != ""undefined"") {
                    $("".Delete"").show();
                }
                if ((accountManagementView == """" || accountManagementView == ""null"" || accountManagementView == null || accountManagementView == ""undefined"") &&
                    (accountManagementUpdate == """" || accountManagementUpdate == ""null"" || accountManageme");
            WriteLiteral(@"ntUpdate == null || accountManagementUpdate == ""undefined"") &&
                    (accountManagementDelete == """" || accountManagementDelete == ""null"" || accountManagementDelete == null || accountManagementDelete == ""undefined"")) {

                    var module = $(""#Module"").val();
                    $.ajax({
                        url: """);
            Write(
#nullable restore
#line 1153 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                               Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Module"": ""MyAccount"" },
                        success: function (RoleResponse) {
                            $(""#loader"").show();
                            $.ajax({
                                url: """);
            Write(
#nullable restore
#line 1159 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                       Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                method: ""GET"",
                                data: { ""Module"": ""MyAccount"" },
                                success: function (UserResponse) {
                                    $(""#loader"").show();
                                    if (UserResponse.length > 0) {
                                        for (let i = 0; i < UserResponse.length; i++) {
                                            $(""#"" + UserResponse[i]).show();
                                            if (UserResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (UserResponse[i] == ""Update"") {
                                                $(""."" + UserResponse[i]).show();
                                            }
                                            if (UserResponse[i] == ""Delete"") {
                                                $("".Delete"")");
            WriteLiteral(@".show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                    else if (RoleResponse.length > 0) {
                                        for (let i = 0; i < RoleResponse.length; i++) {
                                            $(""#"" + RoleResponse[i]).show();
                                            if (RoleResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (RoleResponse[i] == ""Update"") {
                                                $(""."" + RoleResponse[i]).show();
                                            }
                              ");
            WriteLiteral(@"              if (RoleResponse[i] == ""Delete"") {
                                                $("".Delete"").show();
                                            }
                                        }
                                        $($.fn.dataTable.tables(true)).DataTable()
                                            .columns.adjust();
                                        $(""#loader"").hide();
                                    }
                                }
                            })
                        }
                    });
                }
                $(""#loader"").hide();
            },
            ""responsive"": true,
            ""deferRender"": true,
            ""language"": {
                'processing': '<div class=""spinner-2""><div class=""center-div-2""><div class=""loader-circle-1""></div></div></div>'
            },
            paging: true,
            ordering: false,
            searching: false,
            ""aLengthMenu"": [20, 30, 50],
   ");
            WriteLiteral(@"         dom: ""<'row'<'col-sm-3'l><'col-sm-3'f><'col-sm-6'p>>"" +
                ""<'row'<'col-sm-12'tr>>"" +
                ""<'row'<'col-sm-5'i><'col-sm-7'p>>"",
        })

        $('#datatable tbody').on('click', 'td.dtr-control', function () {
            var tr = $(this).closest('tr');
            var row = table.row(tr);
            if (!tr.hasClass(""shown"")) {
                $(""#loader"").show();
                row.child.show();
                tr.addClass('shown');
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();

                var accountManagementView = sessionStorage.getItem(""MyAccount_View"");
                var accountManagementUpdate = sessionStorage.getItem(""MyAccount_Update"");
                var accountManagementDelete = sessionStorage.getItem(""MyAccount_Delete"");


                if (accountManagementView != """" && accountManagementView != ""null"" && accountManagementView != null && accountManagementView != ");
            WriteLiteral(@"""undefined"") {
                    $("".Details"").show();
                }

                if (accountManagementUpdate != """" && accountManagementUpdate != ""null"" && accountManagementUpdate != null && accountManagementUpdate != ""undefined"") {
                    $("".Update"").show();
                }

                if (accountManagementDelete != """" && accountManagementDelete != ""null"" && accountManagementDelete != null && accountManagementDelete != ""undefined"") {
                    $("".Delete"").show();
                }
                if ((accountManagementView == """" || accountManagementView == ""null"" || accountManagementView == null || accountManagementView == ""undefined"") &&
                    (accountManagementUpdate == """" || accountManagementUpdate == ""null"" || accountManagementUpdate == null || accountManagementUpdate == ""undefined"") &&
                    (accountManagementDelete == """" || accountManagementDelete == ""null"" || accountManagementDelete == null || accountManagementDelete ==");
            WriteLiteral(" \"undefined\")) {\r\n\r\n                    var module = $(\"#Module\").val();\r\n                    $.ajax({\r\n                        url: \"");
            Write(
#nullable restore
#line 1252 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                               Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Module"": ""MyAccount"" },
                        success: function (RoleResponse) {
                            $(""#loader"").show();
                            $.ajax({
                                url: """);
            Write(
#nullable restore
#line 1258 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                       Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                method: ""GET"",
                                data: { ""Module"": ""MyAccount"" },
                                success: function (UserResponse) {
                                    $(""#loader"").show();
                                    if (UserResponse.length > 0) {
                                        for (let i = 0; i < UserResponse.length; i++) {
                                            $(""#"" + UserResponse[i]).show();
                                            if (UserResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (UserResponse[i] == ""Update"") {
                                                $(""."" + UserResponse[i]).show();
                                            }
                                            if (UserResponse[i] == ""Delete"") {
                                                $("".Delete"")");
            WriteLiteral(@".show();
                                            }
                                        }
                                        $(""#loader"").hide();
                                    }
                                    else if (RoleResponse.length > 0) {
                                        for (let i = 0; i < RoleResponse.length; i++) {
                                            $(""#"" + RoleResponse[i]).show();
                                            if (RoleResponse[i] == ""View"") {
                                                $("".Details"").show();
                                            }
                                            if (RoleResponse[i] == ""Update"") {
                                                $(""."" + RoleResponse[i]).show();
                                            }
                                            if (RoleResponse[i] == ""Delete"") {
                                                $("".Delete"").show();
                            ");
            WriteLiteral(@"                }
                                        }
                                        $(""#loader"").hide();
                                    }
                                }
                            })
                        }
                    });
                }
                $(""#loader"").hide();
            }
            else {
                row.child.hide();
                tr.removeClass('shown');
            }
        });
    };

    function ClearFilterToDatatable() {
        window.location.reload();
    }
</script>
<script>
    $(""#searchByValueFinal"").on('change', function () {
        var selectedValue = $(""#searchByValueFinal"").val();
        if (selectedValue == ""Date"") {
            $(""#searchedValueFinal"").val("""");
            $(""#searchedValueFinal"").datepicker({
                format: 'dd-mm-yyyy',
                changeMonth: true,
                changeYear: true,
                autoclose: true,
                todayHighlight:");
            WriteLiteral(@" true,
            })

            $(""#searchedValueFinal"").attr(""readonly"", ""readonly"");
        }
        else {
            $(""#searchedValueFinal"").datepicker(""destroy"");
            $(""#searchedValueFinal"").removeAttr(""readonly"");
            $(""#searchedValueFinal"").val("""");
        }
    });
</script>
<script>
    $(""#UpdatePortalBalanceAmountClose"").on(""click"", function () {
        window.location.reload();
    });

    $(""#PortalBalanceAmountClose"").on(""click"", function () {
        window.location.reload();
    });

    $(""#EditExpenseModalClose"").on(""click"", function () {
        window.location.reload();
    });
</script>
<script>
    $("".txtQuantity"").TouchSpin({
        min: 1,
        max: 20,
        boostat: 5,
        maxboostedstep: 10
    });

    $(function () {
        var today = new Date();
        $(""#txtDate"").datepicker({
            format: 'yyyy-mm-dd',
            changeMonth: true,
            changeYear: true,
            autoclose: true,");
            WriteLiteral(@"
            todayHighlight: true,
            endDate: ""today"",
            maxDate: today
        }).on('changeDate', function (ev) {
            $(this).datepicker('hide');
        });
    });
</script>
<script>
    function ExportAsPdf(Id) {
        var fromDate = $(""#FromDate"").val();
        var toDate = $(""#ToDate"").val();
        var today = new Date();
        var dd = String(today.getDate() + 1).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0');
        var yyyy = today.getFullYear();

        today = yyyy + '-' + mm + '-' + dd;
        if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(fromDate) || !/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(toDate)) {
            alert(""Please Enter Valid Date Format for From and To Date."");
            if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(fromDate)) {
                $(""#FromDate"").datepicker(""setDate"", 0);
                $(""#FromDate"").focus();
            }
            else if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(toDate)) {
   ");
            WriteLiteral("             $(\"#ToDate\").datepicker(\"setDate\", 0);\r\n                $(\"#ToDate\").focus();\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            var url = \"");
            Write(
#nullable restore
#line 1392 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                        Url.Action("GetCompanyExpenses", "CompanyAccount")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
            url = url + ""?Id="" + Id + ""&FromDate="" + fromDate + ""&ToDate="" + toDate;
            window.open(url);
        }

    };

    function ExportAsExcel(Id) {
        var fromDate = $(""#FromDate"").val();
        var toDate = $(""#ToDate"").val();
        var today = new Date();
        var dd = String(today.getDate() + 1).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0');
        var yyyy = today.getFullYear();

        today = yyyy + '-' + mm + '-' + dd;
        if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(fromDate) || !/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(toDate)) {
            alert(""Please Enter Valid Date Format for From and To Date."");
            if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(fromDate)) {
                $(""#FromDate"").datepicker(""setDate"", 0);
                $(""#FromDate"").focus();
            }
            else if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(toDate)) {
                $(""#ToDate"").datepicker(""setDate"", 0);
                $(""#ToDate");
            WriteLiteral("\").focus();\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            var url = \"");
            Write(
#nullable restore
#line 1421 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                        Url.Action("ExportAsExcel", "CompanyAccount")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""";
            url = url + ""?Id="" + Id + ""&FromDate="" + fromDate + ""&ToDate="" + toDate;
            window.location.href = url;
        }
    };
</script>
<script>
    $(function () {
        $(""#FromDate"").datepicker({
            format: 'yyyy-mm-dd',
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate() + 1);
            $('#ToDate').datepicker('setStartDate', minDate);
        });
        $(""#ToDate"").datepicker({
            format: 'yyyy-mm-dd',
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate() - 1);
            $('#FromDate').datepicker('setEndD");
            WriteLiteral(@"ate', minDate);
        });
    });

    $(""#AddTopUpBalance"").on(""click"", function () {
        $mymodal = $(""#PortalBalanceAmount"");
        $mymodal.modal(""show"");
        $(""#ReceiptDate"").focus();
    });

    $(document).ready(function () {
        $(""#btnPaymentDetailsMessage"").hide();
        $(""#btnPaymentDetailsMessage15"").hide();
    });
</script>
<script>
    $(""#btnAddPortal"").on('click', function () {
        $(""#loader"").show();
        var amount = $(""#Amount"").val();
        var quantity = $(""#Quantity"").val();
        var totalAmount = parseFloat(amount) * parseInt(quantity);
        $(""#TotalAmount"").val(parseFloat(totalAmount).toFixed(2));

        var dateString = $(""#ReceiptDate"").val();
        var textDesc = $(""#txtDescription"").val();
        amount = $(""#Amount"").val();

        if (amount == """" || amount == ""0"" || amount == ""0.0"") {
            $(""#loader"").hide();
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {");
            WriteLiteral(@"
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                },
                buttonsStyling: false
            })
            swalWithBootstrapButtons.fire(
                'Error',
                ""Please Provide Amount of Expense."",
                'error'
            )
            return false;
        }
        var paymentMode = $(""#paymentMode"").val();
        if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(dateString)) {
            $(""#loader"").hide();
            alert(""Please Enter Valid Date Format for Date."");
            var today = new Date();
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
            var yyyy = today.getFullYear();

            today = yyyy + '-' + mm + '-' + dd;
            $('#ReceiptDate').datepicker('setDate', today);
            $(""#ReceiptDate"").focus();
            return false;
        }
 ");
            WriteLiteral(@"       else {
            if (isNaN(parseFloat(amount))) {
                $(""#loader"").hide();
                alert(""Please Provide Valid Amount."");
                $(""#Amount2"").val(parseFloat(amount).toFixed(2));
                return false;

            }
            else if (textDesc != """" && paymentMode != """") {
                $(""#loader"").hide();
                $(""#btnAddPortal"").removeAttr(""type"");
                $(""#btnAddPortal"").attr(""type"", ""submit"");
                $(""#btnAddPortal"").hide();
                $(""#btnPaymentDetailsMessage"").show();
            }
            else {
                if (textDesc == """") {
                    $(""#loader"").hide();
                    const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                            confirmButton: 'ms-3 btn btn-success',
                            cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
             ");
            WriteLiteral(@"       })
                    swalWithBootstrapButtons.fire(
                        'Error',
                        ""Please Provide Description for which you are adding Top-up Balance."",
                        'error'
                    )
                    return false;
                }
                else if (paymentMode == """") {
                    $(""#loader"").hide();
                    const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                            confirmButton: 'ms-3 btn btn-success',
                            cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
                    })
                    swalWithBootstrapButtons.fire(
                        'Error',
                        ""Please Select Payment Mode."",
                        'error'
                    )
                    return false;
                }
            }
        }
    });
</script>
");
            WriteLiteral("<script>\r\n    function UpdateExpenses(Id, transactionId) {\r\n        var Module = $(\"#Module\").val();\r\n        var companyId = $(\"#CompanyId\").val();\r\n        $.ajax({\r\n            url: \"");
            Write(
#nullable restore
#line 1563 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                   Url.Action("GetExpenseModification", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
            method: ""GET"",
            data: { ""Id"": Id, ""TransactionId"": transactionId },
            success: function (response) {
                if (response != """" && response != null) {
                    const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                            confirmButton: 'ms-3 btn btn-success',
                            cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
                    })

                    swalWithBootstrapButtons.fire({
                        title: 'Error.',
                        html: response,
                        icon: 'error'
                    }).then((result) => {
                        window.location.reload();
                    });
                }
                else {
                    $.ajax({
                        url: """);
            Write(
#nullable restore
#line 1586 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                               Url.Action("UpdateExpenses", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Id"": Id, ""name"": Module, ""ActionName"": ""GetCompanyExpenseDetails"", ""Cnt"": ""CompanyAccount"", ""companyId"": companyId },
                        success: function (response) {
                            $mymodal = $(""#EditExpense"");
                            $mymodal.find(""div.modal-body"").html(response);
                            $mymodal.modal(""show"");
                        }
                    });
                }
            }
        });
    }
</script>
<script>
    function RemoveExpenses(Id, Amount, companyId) {
        event.preventDefault();
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: 'ms-3 btn btn-success',
                cancelButton: 'btn btn-danger'
            },
            buttonsStyling: false
        })

        swalWithBootstrapButtons.fire({
            title: 'Are you sure?',
            text: ""You won't be able to");
            WriteLiteral(@" revert this!"",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
            reverseButtons: true,
            showConfirmButton: true,
        }).then((result) => {
            if (result.isConfirmed) {
                $(""#loader"").show();
                $.ajax({
                    url: """);
            Write(
#nullable restore
#line 1624 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                           Url.Action("Delete", "PortalBalanceExpense")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Id"": Id, ""CompanyId"": companyId, ""Amount"": Amount },
                    success: function (response) {
                        $(""#loader"").hide();
                        if (response.startsWith(""Selected Expense Deleted Successfully."")) {
                            swalWithBootstrapButtons.fire({
                                title: 'Deleted.',
                                text: ""Selected Expense Deleted Successfully..!!"",
                                icon: 'success'
                            }).then((result) => {
                                window.location.reload();
                            });
                        }
                        else {
                            swalWithBootstrapButtons.fire({
                                title: 'Error.',
                                html: response,
                                icon: 'error'
                            }).then((result) => {
   ");
            WriteLiteral(@"                             window.location.reload();
                            });
                        }
                    }
                });
            }
            else if (
                result.dismiss === Swal.DismissReason.cancel
            ) {
                $(""#loader"").hide();
                swalWithBootstrapButtons.fire(
                    'Cancelled',
                    'Cancled by User..!! :)',
                    'error'
                )

            }
        });
    };

    function UpdatePayment(Id, companyId, transactionId) {
        var module = $(""#Module"").val();
        $.ajax({
            url: """);
            Write(
#nullable restore
#line 1667 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                   Url.Action("GetTransactionModification", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
            method: ""GET"",
            data: { ""Id"": Id, ""CompanyId"": companyId, ""TransactionId"": transactionId },
            success: function (response) {
                if (response != """" && response != null) {
                    const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                            confirmButton: 'ms-3 btn btn-success',
                            cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
                    })

                    swalWithBootstrapButtons.fire({
                        title: 'Error.',
                        html: response,
                        icon: 'error'
                    }).then((result) => {
                        window.location.reload();
                    });
                }
                else {
                    $.ajax({
                        url: """);
            Write(
#nullable restore
#line 1690 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                               Url.Action("GetPaymentDetails", "PortalBalanceExpense")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                        method: ""GET"",
                        data: { ""Id"": Id, ""CompanyId"": companyId, ""ActionName"": ""GetCompanyExpenseDetails"", ""Cnt"": ""CompanyAccount"" },
                        success: function (response) {
                            $mymodal = $(""#UpdatePortalBalanceAmount"");
                            $mymodal.find(""div.modal-body"").html(response);
                            $mymodal.modal(""show"");
                        }
                    });
                }
            }
        });
    };
</script>
<script>
    function RemovePayment(Id, companyId, Amount) {
        event.preventDefault();
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: 'ms-3 btn btn-success',
                cancelButton: 'btn btn-danger'
            },
            buttonsStyling: false
        })

        swalWithBootstrapButtons.fire({
            title: 'Are you sure?',
            text: ""You won't be able to r");
            WriteLiteral(@"evert this!"",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
            reverseButtons: true,
            showConfirmButton: true,
        }).then((result) => {
            if (result.isConfirmed) {
                $(""#loader"").show();
                $.ajax({
                    url: """);
            Write(
#nullable restore
#line 1728 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                           Url.Action("DeletePaymentDetails", "PortalBalanceExpense")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Id"": Id, ""CompanyId"": companyId, ""Amount"": Amount },
                    success: function (response) {
                        $(""#loader"").hide();
                        if (response.startsWith(""Selected Payment Transaction Deleted Successfully."")) {
                            swalWithBootstrapButtons.fire({
                                title: 'Deleted.',
                                text: ""Selected Payment Transaction Deleted Successfully..!!"",
                                icon: 'success'
                            }).then((result) => {
                                window.location.reload();
                            });
                        }
                        else {
                            swalWithBootstrapButtons.fire({
                                title: 'Error.',
                                html: response,
                                icon: 'error'
                            })");
            WriteLiteral(@".then((result) => {
                                window.location.reload();
                            });
                        }
                    }
                });
            }
            else if (
                result.dismiss === Swal.DismissReason.cancel
            ) {
                $(""#loader"").hide();
                swalWithBootstrapButtons.fire(
                    'Cancelled',
                    'Cancled by User..!! :)',
                    'error'
                )
            }
        });
    }
</script>
<script>
    $(""#txtAmount"").on(""keyup"", function () {
        $(""#txtTotalAmount"").val(0);
        var amount = $(""#txtAmount"").val();
        var quantity = $(""#txtQuantity"").val();
        var totalAmount = 0, grandTotal = 0, vatPercentage = 0;
        totalAmount = $(""#txtTotalAmount"").val();
        grandTotal = $(""#txtGrandAmount"").val();
        vatPercentage = $(""#txtVat"").val();
        if (parseInt(vatPercentage) != 0) {
            total");
            WriteLiteral(@"Amount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $(""#txtTotalAmount"").val(parseFloat(totalAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });

    $(""#txtQuantity"").on(""change"", function () {
        $(""#txtTotalAmount"").val(0);
        var amount = $(""#txtAmount"").val();
        var quantity = $(""#txtQuantity"").val();
        var totalAmount = 0, g");
            WriteLiteral(@"randTotal = 0, vatPercentage = 0;
        totalAmount = $(""#txtTotalAmount"").val();
        grandTotal = $(""#txtGrandAmount"").val();
        vatPercentage = $(""#txtVat"").val();
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $(""#txtTotalAmount"").val(parseFloat(totalAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandT");
            WriteLiteral(@"otal).toFixed(2));
    });

    $(""#txtVat"").on(""keyup"", function () {
        var amount = $(""#txtAmount"").val();
        var totalAmount = $(""#txtTotalAmount"").val();
        var vatPercentage = $(""#txtVat"").val();
        var vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercentage)) / 100;
        if (isNaN(vatAmount)) {
            vatAmount = 0;
        }
        var totalAmount = $(""#txtTotalAmount"").val();
        var grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
        if (isNaN(vatAmount)) {
            vatAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });

    $(""#txtAmount"").on(""focus"", function () {
        $(""#txtTotalAmount"").val(0);
        var amount = $(""#txtAmount"").val();
        var quantity = $(""#txtQuantity"").val();
        var totalAmount = 0, grandTotal");
            WriteLiteral(@" = 0, vatPercentage = 0;
        totalAmount = $(""#txtTotalAmount"").val();
        grandTotal = $(""#txtGrandAmount"").val();
        vatPercentage = $(""#txtVat"").val();
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $(""#txtTotalAmount"").val(parseFloat(totalAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toF");
            WriteLiteral(@"ixed(2));
    });

    $(""#txtQuantity"").on(""focus"", function () {
        $(""#txtTotalAmount"").val(0);
        var amount = $(""#txtAmount"").val();
        var quantity = $(""#txtQuantity"").val();
        var totalAmount = 0, grandTotal = 0, vatPercentage = 0;
        totalAmount = $(""#txtTotalAmount"").val();
        grandTotal = $(""#txtGrandAmount"").val();
        vatPercentage = $(""#txtVat"").val();
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(totalAmount)) {
   ");
            WriteLiteral(@"         totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $(""#txtTotalAmount"").val(parseFloat(totalAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });

    $(""#txtVat"").on(""focus"", function () {
        var amount = $(""#txtAmount"").val();
        var totalAmount = $(""#txtTotalAmount"").val();
        var vatPercentage = $(""#txtVat"").val();
        var vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercentage)) / 100;
        if (isNaN(vatAmount)) {
            vatAmount = 0;
        }
        var totalAmount = $(""#txtTotalAmount"").val();
        var grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
        if (isNaN(vatAmount)) {
            vatAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2)");
            WriteLiteral(@");
    });
</script>
<script>
    var UploadedReceiptFile = new Array();
    $(""body"").on(""click"", ""#btnClear"", function () {
        $(""#txtTask"").val('');
        $(""#txtAmount"").val('');
        $(""#txtQuantity"").val('1');
        $(""#txtTotalAmount"").val('0');
        $(""#txtVat"").val('0');
        $(""#txtVatAmount"").val('0');
        $(""#txtDate"").val('');
        $(""#txtDate"").datepicker('setDate', null);
        $(""#txtGrandAmount"").val('0');
    });

    $(""body"").on(""click"", ""#btnAdd"", function () {
        $(""#loader"").show();

        var amount = $(""#txtAmount"").val();
        var quantity = $(""#txtQuantity"").val();
        var totalAmount = parseFloat(amount) * parseInt(quantity);
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }

        $(""#txtTotalAmount"").val(parseFloat(totalAmount).toFixed(2));
        var vatPercetange = $(""#txtVat"").val();
        var vatAmount = $(""#txtVatAmount"").val();
        vatAmount = (parseFloat(totalAmount) * pa");
            WriteLiteral(@"rseFloat(vatPercetange)) / 100;
        $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));

        var grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));


        var Task = $(""#txtTask"").val();
        var Amount = $(""#txtAmount"").val();
        var Quantity = $(""#txtQuantity"").val();
        var TotalAmount = $(""#txtTotalAmount"").val();
        var CompanyId = $(""#CompanyId"").val();
        var date = $(""#txtDate"").val();
        var Vat = $(""#txtVat"").val();
        var VatAmount = $(""#txtVatAmount"").val();
        var GrandAmount = $(""#txtGrandAmount"").val();
        var name = $(""#Module"").val();


        if (Amount == """" || Amount == ""0"" || Amount == ""0.0"" || Quantity == """" || TotalAmount == """" || Task == """" || CompanyId == ""0"" || !/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)) {
            if (CompanyId == ""0"") {
                const swalWithBootstrapButtons = Swal.mixin({
                    cust");
            WriteLiteral(@"omClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Select Company for which you are adding Expense."",
                    'error'
                )
                $(""#loader"").hide();
            }
            else if (Task == """") {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Name for which you are adding Expense."",
                    'error'
                )
");
            WriteLiteral(@"                $(""#loader"").hide();
            } else if (Amount == """" || Amount == ""0"" || Amount == ""0.0"") {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Amount of Expense."",
                    'error'
                )
                $(""#loader"").hide();
            } else if (Quantity == """") {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapB");
            WriteLiteral(@"uttons.fire(
                    'Error',
                    ""Please Provide Quantity."",
                    'error'
                )
                $(""#loader"").hide();
            } else if (TotalAmount == """") {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Total Amount of This Expense"",
                    'error'
                )
                $(""#loader"").hide();
            } else if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)) {

                alert(""Please Enter Valid Date Format for Date."");
                var today = new Date();
                var dd = String(today.getDate()).padStart(2, '0');
                ");
            WriteLiteral(@"var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
                var yyyy = today.getFullYear();

                today = yyyy + '-' + mm + '-' + dd;
                $('#txtDate').datepicker('setDate', today);
                $(""#txtDate"").focus();
                $(""#loader"").hide();
            }

        }
        else if (isNaN(parseFloat(Amount)) || isNaN(parseFloat(Vat))) {
            if (isNaN(parseFloat(Amount))) {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Valid Amount."",
                    'error'
                ).then((result) => {
                    $(""#txtAmount"").val(0);
            ");
            WriteLiteral(@"    });
                $(""#loader"").hide();
            }
            else if (isNaN(parseFloat(Vat))) {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Valid  Vat."",
                    'error'
                ).then((result) => {
                    var grandTotals = parseFloat(Amount) * parseInt(Quantity);
                    $(""#txtVat"").val(0);
                    $(""#txtVatAmount"").val(0);
                    $(""#txtGrandAmount"").val(parseFloat(grandTotals).toFixed(2));
                });
                $(""#loader"").hide();
            }
        }
        else {
            if (UploadedReceiptFile.length < 20) {
      ");
            WriteLiteral(@"          UploadedReceiptFile.push(
                    {
                        ""Task"": Task,
                        ""Amount"": parseFloat(Amount).toFixed(2).toString(),
                        ""Quantity"": Quantity,
                        ""TotalAmount"": parseFloat(TotalAmount).toFixed(2).toString(),
                        ""CompanyId"": CompanyId,
                        ""Vat"": parseFloat(Vat).toFixed(2).toString(),
                        ""VatAmount"": parseFloat(VatAmount).toFixed(2).toString(),
                        ""Date"": date,
                        ""Type"": ""Debit"",
                        ""GrandTotal"": parseFloat(GrandAmount).toFixed(2).toString()
                    }
                );

                var txtTask = $(""#txtTask"");
                var txtAmount = $(""#txtAmount"");
                var txtQuantity = $(""#txtQuantity"");
                var txtTotalAmount = $(""#txtTotalAmount"");
                var txtFormFile = $(""#txtFormFile"");
                var Companies = $(""#");
            WriteLiteral(@"Companies"");
                var txtDate = $(""#txtDate"");
                var txtVat = $(""#txtVat"");
                var txtVatAmount = $(""#txtVatAmount"");
                var txtGrandAmount = $(""#txtGrandAmount"");

                var tbody = $(""#tblAddExpenses > TBODY"")[0];

                var row = tbody.insertRow(-1);

                var cell = $(row.insertCell(-1));
                cell.html(txtDate.val());

                var cell = $(row.insertCell(-1));
                cell.html(txtTask.val());

                cell = $(row.insertCell(-1));
                cell.html(parseFloat(txtAmount.val()).toFixed(2));

                cell = $(row.insertCell(-1));
                cell.html(txtQuantity.val());

                cell = $(row.insertCell(-1));
                cell.html(parseFloat(txtTotalAmount.val()).toFixed(2));

                cell = $(row.insertCell(-1));
                cell.html(parseFloat(txtVat.val()).toFixed(2));

                cell = $(row.insertCell(-1));
");
            WriteLiteral(@"                cell.html(parseFloat(txtVatAmount.val()).toFixed(2));

                cell = $(row.insertCell(-1));
                cell.html(parseFloat(txtGrandAmount.val()).toFixed(2));

                cell = $(row.insertCell(-1));
                var btnRemove = $(""<input />"");
                btnRemove.attr(""type"", ""button"");
                btnRemove.attr(""class"", ""btn btn-theme"");
                btnRemove.attr(""onclick"", ""Remove(this);"");
                btnRemove.val(""Remove"");
                cell.append(btnRemove);

                txtTask.val("""");
                txtAmount.val("""");
                txtQuantity.val(""1"");
                txtTotalAmount.val("""");
                txtVat.val(""0"");
                txtVatAmount.val(""0"");
                txtDate.val("""");
                $(""#txtDate"").datepicker('setDate', null);
                txtTotalAmount.val("""");
                txtGrandAmount.val(""0"");
                if (parseInt(UploadedReceiptFile.length) < 20) {
          ");
            WriteLiteral(@"          txtDate.focus();
                }
                if (parseInt(UploadedReceiptFile.length) == 20) {
                    const swalWithBootstrapButtons = Swal.mixin({
                        customClass: {
                            confirmButton: 'ms-3 btn btn-success',
                            cancelButton: 'btn btn-danger'
                        },
                        buttonsStyling: false
                    })
                    swalWithBootstrapButtons.fire({
                        title: 'Maximum limit is about to exceeds , Do you want to Save all entries?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes!',
                        cancelButtonText: 'No, cancel!',
                        reverseButtons: true,
                        showConfirmButton: true,
                    }).then((result) => {
                        if (result.isConfirmed) {
                           ");
            WriteLiteral(@" $(""#loader"").show();
                            if (parseInt(UploadedReceiptFile.length) > 0) {
                                $('#btnSave').hide();
                                $('#btnSave').prop('disabled',true);
                                $(""#btnPaymentDetailsMessage15"").show();
                                var data = JSON.stringify(UploadedReceiptFile);
                                setTimeout(function () {
                                    $.ajax({
                                        contentType: 'application/json; charset=utf-8',
                                        dataType: 'json',
                                        async: false,
                                        type: 'POST',
                                        url: """);
            Write(
#nullable restore
#line 2211 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                               Url.Action("AddCompanyExpenses", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                        data: data,
                                        success: function (result) {
                                            const swalWithBootstrapButtons = Swal.mixin({
                                                customClass: {
                                                    confirmButton: 'ms-3 btn btn-success',
                                                    cancelButton: 'btn btn-danger'
                                                },
                                                buttonsStyling: false
                                            })
                                            swalWithBootstrapButtons.fire({
                                                title: 'Success.',
                                                text: ""Company Expense(s) Added Successfully.!!"",
                                                icon: 'success'
                                            }).then((result) => {
                   ");
            WriteLiteral(@"                             $.ajax({
                                                    contentType: 'application/json; charset=utf-8',
                                                    type: 'POST',
                                                    url: """);
            Write(
#nullable restore
#line 2229 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                                           Url.Action("UpdateRepeatedAccountEntries", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                                    success: function (result) {
                                                        $(""#loader"").hide();
                                                        $('#btnSave').prop('disabled',false);
                                                        $('#btnSave').show();
                                                        $(""#btnPaymentDetailsMessage15"").hide();
                                                        window.location.reload();
                                                    }
                                                });
                                            });
                                        },
                                        error: function () {
                                            const swalWithBootstrapButtons = Swal.mixin({
                                                customClass: {
                                                    confirmButton: 'ms-3 btn btn-succes");
            WriteLiteral(@"s',
                                                    cancelButton: 'btn btn-danger'
                                                },
                                                buttonsStyling: false
                                            })
                                            swalWithBootstrapButtons.fire({
                                                title: 'Error.',
                                                text: ""Something went wrong , please try again."",
                                                icon: 'error'
                                            }).then((result) => {
                                                $('#btnSave').prop('disabled', false);
                                                $('#btnSave').show();
                                                $(""#loaderId"").hide();
                                                $(""#btnPaymentDetailsMessage"").hide();
                                                $(""#tblAddExpenses TBODY""");
            WriteLiteral(@").focus();
                                            });
                                        }
                                    })
                                }, 20)
                            }
                        }
                        else {
                            $(""#loader"").hide();
                            $('tfoot#tableFooter > tr').hide();
                            if ($(""#maximumRecordsId"").length == 0) {
                                $('#btnSave').before(""<p class='text-danger fw-bold fs-6 pt-1 pb-1 text-center' id='maximumRecordsId'>* Maximum limit exceeded , please click on save all button. *</p>"");
                            }
                            else {
                                $(""#maximumRecordsId"").show();
                            }
                        }
                    });
                }
                $(""#loader"").hide();
                $(document).scrollTop($(""#tblAddExpenses"").height());
            }
   ");
            WriteLiteral(@"         else {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })

                swalWithBootstrapButtons.fire({
                    title: 'Error.',
                    text: ""Please first save all this entries before adding other entries."",
                    icon: 'error'
                }).then((result) => {
                    var txtTask = $(""#txtTask"");
                    var txtAmount = $(""#txtAmount"");
                    var txtQuantity = $(""#txtQuantity"");
                    var txtTotalAmount = $(""#txtTotalAmount"");
                    var txtFormFile = $(""#txtFormFile"");
                    var Companies = $(""#Companies"");
                    var txtDate = $(""#txtDate"");
                    var txtVat = $(""#txtVat"");
        ");
            WriteLiteral(@"            var txtVatAmount = $(""#txtVatAmount"");
                    var txtGrandAmount = $(""#txtGrandAmount"");

                    txtTask.val("""");
                    txtAmount.val("""");
                    txtQuantity.val(""1"");
                    txtTotalAmount.val("""");
                    txtVat.val(""0"");
                    txtVatAmount.val(""0"");
                    txtDate.val("""");
                    $(""#txtDate"").datepicker('setDate', null);
                    txtTotalAmount.val("""");
                    txtGrandAmount.val(""0"");
                    txtDate.focus();
                    $(""#tblAddExpenses TBODY"").focus();
                    $(""#loader"").hide();
                });
            }
        }

    });

    $(""body"").on(""click"", ""#btnSave"", function () {
        $(""#loader"").show();
        if (parseInt(UploadedReceiptFile.length) > 0) {
            if ($(""#txtTask"").val() != """"
                || ($(""#txtAmount"").val() != """" && $(""#txtAmount"").val() != ""0"" && $(");
            WriteLiteral(@"""#txtAmount"").val() != ""0.0"")
                || ($(""#txtTotalAmount"").val() != """" && $(""#txtTotalAmount"").val() != ""0"" && $(""#txtTotalAmount"").val() != ""0.0"")
                || $(""#txtDate"").val() != """"
                || ($(""#txtVatAmount"").val() != """" && ($(""#txtVat"").val() != """" && $(""#txtVat"").val() != ""0"" && $(""#txtVat"").val() != ""0.0""))
            ) {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire({
                    title: 'One entry is Left. Do you want to Continue ?',
                    text: ""You won't be able to revert this!"",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes!',
                    cancelButt");
            WriteLiteral(@"onText: 'No, cancel!',
                    reverseButtons: true,
                    showConfirmButton: true,
                }).then((result) => {
                    if (result.isConfirmed) {
                        $(""#loader"").show();
                        if (parseInt(UploadedReceiptFile.length) > 0) {
                            $('#btnSave').hide();
                            $('#btnSave').prop('disabled', true);
                            $(""#btnPaymentDetailsMessage15"").show();
                            var data = JSON.stringify(UploadedReceiptFile);
                            setTimeout(function () {
                                $.ajax({
                                    contentType: 'application/json; charset=utf-8',
                                    dataType: 'json',
                                    async: false,
                                    type: 'POST',
                                    url: """);
            Write(
#nullable restore
#line 2362 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                           Url.Action("AddCompanyExpenses", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                    data: data,
                                    success: function (result) {
                                        const swalWithBootstrapButtons = Swal.mixin({
                                            customClass: {
                                                confirmButton: 'ms-3 btn btn-success',
                                                cancelButton: 'btn btn-danger'
                                            },
                                            buttonsStyling: false
                                        })
                                        swalWithBootstrapButtons.fire({
                                            title: 'Success.',
                                            text: ""Company Expense(s) Added Successfully.!!"",
                                            icon: 'success'
                                        }).then((result) => {
                                            $.ajax({
                     ");
            WriteLiteral("                           contentType: \'application/json; charset=utf-8\',\r\n                                                type: \'POST\',\r\n                                                url: \"");
            Write(
#nullable restore
#line 2380 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                                       Url.Action("UpdateRepeatedAccountEntries", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                                success: function (result) {
                                                    $(""#loader"").hide();
                                                    $('#btnSave').prop('disabled', false);
                                                    $('#btnSave').show();
                                                    $(""#btnPaymentDetailsMessage15"").hide();
                                                    window.location.reload();
                                                }
                                            });
                                        });
                                    },
                                    error: function () {
                                        const swalWithBootstrapButtons = Swal.mixin({
                                            customClass: {
                                                confirmButton: 'ms-3 btn btn-success',
                                                ca");
            WriteLiteral(@"ncelButton: 'btn btn-danger'
                                            },
                                            buttonsStyling: false
                                        })
                                        swalWithBootstrapButtons.fire({
                                            title: 'Error.',
                                            text: ""Something went wrong , please try again."",
                                            icon: 'error'
                                        }).then((result) => {
                                            $('#btnSave').prop('disabled', false);
                                            $('#btnSave').show();
                                            $(""#loaderId"").hide();
                                            $(""#btnPaymentDetailsMessage"").hide();
                                            $(""#tblAddExpenses TBODY"").focus();
                                        });
                                    }
               ");
            WriteLiteral(@"                 })
                            }, 20)
                        }
                        else {
                            $(""#loader"").hide();
                            const swalWithBootstrapButtons = Swal.mixin({
                                customClass: {
                                    confirmButton: 'ms-3 btn btn-success',
                                    cancelButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            })
                            swalWithBootstrapButtons.fire({
                                title: 'Error.',
                                text: ""Please Add Expenses for Company"",
                                icon: 'error'
                            }).then((result) => {
                                
                                $(""#tblAddExpenses TBODY"").focus();
                            });
                        }
                    }");
            WriteLiteral(@"
                });
            }
            else {
                $(""#loader"").show();
                $('#btnSave').hide();
                $('#btnSave').prop('disabled', true);
                $(""#btnPaymentDetailsMessage15"").show();
                var data = JSON.stringify(UploadedReceiptFile);
                setTimeout(function () {
                    $.ajax({
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json',
                        async: false,
                        type: 'POST',
                        url: """);
            Write(
#nullable restore
#line 2447 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                               Url.Action("AddCompanyExpenses", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                        data: data,
                        success: function (result) {
                            const swalWithBootstrapButtons = Swal.mixin({
                                customClass: {
                                    confirmButton: 'ms-3 btn btn-success',
                                    cancelButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            })
                            swalWithBootstrapButtons.fire({
                                title: 'Success.',
                                text: ""Company Expense(s) Added Successfully.!!"",
                                icon: 'success'
                            }).then((result) => {
                                $.ajax({
                                    contentType: 'application/json; charset=utf-8',
                                    type: 'POST',
                                    url: """);
            Write(
#nullable restore
#line 2465 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                                           Url.Action("UpdateRepeatedAccountEntries", "AccountManagement")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                                    success: function (result) {
                                        $(""#loader"").hide();
                                        $('#btnSave').show();
                                        $('#btnSave').prop('disabled',false);
                                        $(""#btnPaymentDetailsMessage15"").hide();
                                        window.location.reload();
                                    }
                                });
                            });
                        },
                        error: function () {
                            const swalWithBootstrapButtons = Swal.mixin({
                                customClass: {
                                    confirmButton: 'ms-3 btn btn-success',
                                    cancelButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            })
                            ");
            WriteLiteral(@"swalWithBootstrapButtons.fire({
                                title: 'Error.',
                                text: ""Something went wrong , please try again."",
                                icon: 'error'
                            }).then((result) => {
                                $('#btnSave').prop('disabled', false);
                                $('#btnSave').show();
                                $(""#loaderId"").hide();
                                $(""#btnPaymentDetailsMessage"").hide();
                                $(""#tblAddExpenses TBODY"").focus();
                            });
                        }
                    })
                }, 20)
            }
        }
        else {
            $(""#loader"").hide();
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                },
                buttonsStylin");
            WriteLiteral(@"g: false
            })
            swalWithBootstrapButtons.fire({
                title: 'Error.',
                text: ""Please Add Expenses for Company"",
                icon: 'error'
            }).then((result) => {
                
                $(""#tblAddExpenses TBODY"").focus();
            });
        }

    });

    function Remove(data) {
        var row = $(data).closest(""TR"");
        var task = $(""TD"", row).eq(1).html();
        if (confirm(""Are you sure you want to delete this :"" + task)) {
            var table = $(""#tblAddExpenses"")[0];
            var remove = UploadedReceiptFile.splice(row[0].rowIndex - 1, 1);
            table.deleteRow(row[0].rowIndex);
            if (parseInt(UploadedReceiptFile.length) != 20) {
                $('tfoot#tableFooter > tr').show();
                $('#maximumRecordsId').hide();
            }
        }
    };
</script>
<script>
    jQuery.extend(jQuery.fn.dataTableExt.oSort, {
        ""date-uk-pre"": function (a) {
        ");
            WriteLiteral(@"    var ukDatea = a.split('-');
            return (ukDatea[2] + ukDatea[1] + ukDatea[0]) * 1;
        },

        ""date-uk-asc"": function (a, b) {
            return ((a < b) ? -1 : ((a > b) ? 1 : 0));
        },

        ""date-uk-desc"": function (a, b) {
            return ((a < b) ? 1 : ((a > b) ? -1 : 0));
        }
    });
</script>
<script>
    $(function () {
        $("".Insert"").hide();
        $(""#View"").hide();
        $(""#View1"").hide();
        $("".Update"").hide();
        $("".Delete"").hide();
        $("".Details"").hide();
    });
</script>
<script>
    $(function () {
        sessionStorage.removeItem(""MyAccount_View"");
        sessionStorage.removeItem(""MyAccount_Update"");
        sessionStorage.removeItem(""MyAccount_Delete"");
        var module = $(""#Module"").val();
        $.ajax({
            url: """);
            Write(
#nullable restore
#line 2568 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                   Url.Action("GetRolePermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral("\",\r\n            method: \"GET\",\r\n            data: { \"Module\": \"MyAccount\" },\r\n            success: function (RoleResponse) {\r\n                $.ajax({\r\n                    url: \"");
            Write(
#nullable restore
#line 2573 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\CompanyAccount\GetCompanyExpenseDetails.cshtml"
                           Url.Action("GetUserPermissionsName", "Permission")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Module"": ""MyAccount"" },
                    success: function (UserResponse) {
                        if (UserResponse.length > 0) {
                            for (let i = 0; i < UserResponse.length; i++) {
                                $(""#"" + UserResponse[i]).show();
                                if (UserResponse[i] == ""View"") {
                                    sessionStorage.setItem(""MyAccount_View"", ""View"");
                                    $("".Details"").show();
                                    $(""#View1"").show();
                                }
                                if (UserResponse[i] == ""Update"") {
                                    sessionStorage.setItem(""MyAccount_Update"", ""Update"");
                                    $(""."" + UserResponse[i]).show();
                                }
                                if (UserResponse[i] == ""Delete"") {
                                    ses");
            WriteLiteral(@"sionStorage.setItem(""MyAccount_Delete"", ""Delete"");
                                    $(""."" + UserResponse[i]).show();
                                }
                                if (UserResponse[i] == ""Insert"") {
                                    $(""."" + UserResponse[i]).show();
                                }
                            }
                        }
                        else if (RoleResponse.length > 0) {
                            for (let i = 0; i < RoleResponse.length; i++) {
                                $(""#"" + RoleResponse[i]).show();
                                if (RoleResponse[i] == ""View"") {
                                    sessionStorage.setItem(""MyAccount_View"", ""View"");
                                    $("".Details"").show();
                                    $(""#View1"").show();
                                }
                                if (RoleResponse[i] == ""Update"") {
                                    sessionStorage.setItem(""");
            WriteLiteral(@"MyAccount_Update"", ""Update"");
                                    $(""."" + RoleResponse[i]).show();
                                }
                                if (RoleResponse[i] == ""Delete"") {
                                    sessionStorage.setItem(""MyAccount_Delete"", ""Delete"");
                                    $(""."" + RoleResponse[i]).show();
                                }
                                if (RoleResponse[i] == ""Insert"") {
                                    $(""."" + RoleResponse[i]).show();
                                }
                            }

                        } else {
                            alert(""You don't have any permission for this module."");
                        }
                    }
                })
            }
        });
    });
</script>
<script>
    $(window).resize(function () {
        var allRows = $('#datatable tbody tr');
        allRows.each(function () {
            var tr = $(this).closest('tr');
    ");
            WriteLiteral(@"        var row = $($.fn.dataTable.tables(true)).DataTable().row(tr);
            if (tr.hasClass(""shown"")) {
                row.child.hide();
                tr.removeClass('shown');
                tr.removeClass('parent');
            }
        });
    });
</script>
");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DIBN.Areas.Admin.Models.GetCompanyAccountDetailModel> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591

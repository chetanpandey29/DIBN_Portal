#pragma checksum "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_AccountManagement_TemporaryAccountManagement), @"mvc.1.0.view", @"/Areas/Admin/Views/AccountManagement/TemporaryAccountManagement.cshtml")]
namespace AspNetCore
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.IRepository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\_ViewImports.cshtml"
using DIBN.Areas.Admin.Repository;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f7", @"/Areas/Admin/Views/AccountManagement/TemporaryAccountManagement.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"605a41b4408e5d1ff247f7264e35f4305eb9eeecf14a77cb4f30041778bbf31f", @"/Areas/Admin/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Areas_Admin_Views_AccountManagement_TemporaryAccountManagement : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DIBN.Areas.Admin.Models.TemporaryAccountManagementModel>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "-1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Credit", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Debit", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Cash", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Online Transaction", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Cheque", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net/js/jquery.dataTables.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-bs4/js/dataTables.bootstrap4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-responsive/js/dataTables.responsive.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/datatables.net-responsive-bs4/js/responsive.bootstrap4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/sweetalert2/sweetalert2.all.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/libs/sweetalert2/sweetalert2.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/select2/select2.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/select2/select2.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/bootstrap.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
  
    ViewData["Title"] = "Temporary Account Management";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>
    .datepicker {
        z-index: 99999 !important;
    }

    .ui-autocomplete {
        max-height: 200px;
        max-width: 300px;
        overflow-y: auto;
        overflow-x: hidden;
    }

    .select2-selection--single {
        height: 100% !important;
    }

    .select2-selection__rendered {
        word-wrap: break-word !important;
        width: 150px !important;
        text-overflow: inherit !important;
        white-space: normal !important;
    }

    .select2-results__option[aria-selected] {
        border-bottom: 1px dotted #000;
    }

    .custom-width {
        width: 150px !important;
    }
</style>
<input type=""hidden"" name=""message"" id=""message""");
            BeginWriteAttribute("value", " value=\"", 848, "\"", 870, 1);
#nullable restore
#line 37 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
WriteAttributeValue("", 856, Model.message, 856, 14, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        <a");
            BeginWriteAttribute("href", " href=\"", 934, "\"", 981, 1);
#nullable restore
#line 40 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
WriteAttributeValue("", 941, Url.Action("Index","AccountManagement"), 941, 40, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" class=\"btn btn-blue float-end mb-2\">Back</a>\r\n        <a");
            BeginWriteAttribute("href", " href=\"", 1039, "\"", 1103, 1);
#nullable restore
#line 41 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
WriteAttributeValue("", 1046, Url.Action("GetTemporaryAccountLog","AccountManagement"), 1046, 57, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" class=""btn btn-blue float-end mb-2 me-2"">Temporary Account Log</a>
    </div>
</div>
<div class=""row"">
    <div class=""col-md-12"">
        <div class=""card"">
            <div class=""card-body"">
                <h4 class=""text-blue text-center fw-bold"">Temporary Account Management</h4>
            </div>
        </div>
    </div>
</div>
<div class=""row Insert"">
    <div class=""col-12"">
        <div class=""card"">
            <div class=""card-body"">
                <div class=""col-12 float-start"">
                    <div class=""table-rep-plugin"">
                        <div class=""table-responsive mb-0"" data-pattern=""priority-columns"">
                            <table id=""tblAddExpenses"" class=""table table-bordered table-striped"" style=""border-collapse: collapse; border-spacing: 0; width: 100%;"">
                                <thead>
                                    <tr>
                                        <th>
                                            Company
            ");
            WriteLiteral(@"                            </th>
                                        <th>
                                            Date
                                        </th>
                                        <th>
                                            Description
                                        </th>
                                        <th>
                                            Type
                                        </th>
                                        <th>
                                            Payment Mode
                                        </th>
                                        <th>
                                            Amount
                                        </th>
                                        <th>
                                            Quantity
                                        </th>
                                        <th>
                                            Total Amount
      ");
            WriteLiteral(@"                                  </th>
                                        <th>
                                            Vat
                                        </th>
                                        <th>
                                            Vat Amount
                                        </th>
                                        <th>
                                            Grand Total
                                        </th>
                                        <th>

                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td>
                                            ");
#nullable restore
#line 106 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
                                       Write(Html.DropDownListFor(w => w.CompanyId, Model.Companies, new { @class = "form-control form-select single-line",@id="Companies" }));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
                                        </td>
                                        <td><input type=""text"" id=""txtDate"" class=""form-control"" required readonly /></td>
                                        <td><textarea id=""txtTask"" class=""form-control text-wrap"" rows=""3"" cols=""30"" maxlength=""200"" required></textarea></td>
                                        <td>
                                            <select class=""form-control form-select single-line"" id=""txtType"" onchange=""CheckType(this)"" style=""width:100px !important;"">
                                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f717380", async() => {
                WriteLiteral(" Select Type ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f718619", async() => {
                WriteLiteral(" Credit ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f719853", async() => {
                WriteLiteral(" Debit ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                            </select>
                                        </td>
                                        <td>
                                            <select class=""form-control form-select single-line"" id=""txtPaymentMode"" style=""width:100px !important;"">
                                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f721390", async() => {
                WriteLiteral(" Select Payment Mode ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f722637", async() => {
                WriteLiteral(" Cash ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f723869", async() => {
                WriteLiteral(" Online Transaction ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f725115", async() => {
                WriteLiteral(" Cheque ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                            </select>
                                        </td>
                                        <td><input type=""text"" id=""txtAmount"" class=""form-control"" maxlength=""10"" onkeyup=""ValidAlphabet(this)"" onfocusout=""ValidAlphabet(this)"" onkeypress=""ValidTextLength(this)"" step="".01"" required /></td>
                                        <td>
                                            <div style=""width: 90px;"" class=""product-cart-touchspin"">
                                                <input data-toggle=""touchspin"" type=""text"" value=""01"" id=""txtQuantity"" required readonly />
                                            </div>
                                        </td>
                                        <td><input type=""text"" step="".01"" id=""txtTotalAmount"" class=""form-control"" value=""0"" required readonly /></td>
                                        <td><input type=""text"" step="".01"" id=""txtVat"" maxlength=""4"" class=""form-control"" onkeyup=""ValidAlp");
            WriteLiteral(@"habet(this)"" onkeypress=""ValidTextLength(this)"" onfocusout=""ValidAlphabet(this)"" value=""0"" required /></td>
                                        <td><input type=""text"" id=""txtVatAmount"" step="".01"" class=""form-control"" value=""0"" required readonly /></td>
                                        <td><input type=""text"" step="".01"" id=""txtGrandAmount"" class=""form-control"" value=""0"" required readonly /></td>
                                        <td>
                                            <input type=""button"" id=""btnAdd"" class=""btn btn-blue"" value=""Add"" />
                                            <button type=""button"" id=""btnClear"" class=""btn btn-blue mt-2""><i class=""fas fa-trash""></i></button>
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        <input type=""button"" id=""btnSave"" class=""btn btn-blue"" value=""Save all"" />
      ");
            WriteLiteral(@"                  <span id=""btnPaymentDetailsMessage15"" class=""text-danger"">Please Wait While We Are Saving Portal Balance Details.</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class=""row"" id=""View"">
    <div class=""col-12"">
        <div class=""card"">
            <div class=""card-body"">
                <div class=""table-rep-plugin"">
                    <div class=""table-responsive mb-0"" data-pattern=""priority-columns"">
                        <table id=""datatable"" class=""table table-bordered table-striped dt-responsive nowrap"" style=""border-collapse: collapse; border-spacing: 0; width: 100%;"">
                            <thead>
                                <tr>
                                    <th>
                                        Transaction Id
                                    </th>
                                    <th data-sort='YYYYMMDD'>
                                        Date
               ");
            WriteLiteral(@"                     </th>
                                    <th>
                                        Company
                                    </th>
                                    <th>
                                        Description
                                    </th>
                                    <th>
                                        Credit(AED)
                                    </th>
                                    <th>
                                        Debit(AED)
                                    </th>
                                    <th>
                                        Vat (%)
                                    </th>
                                    <th>
                                        Vat Amount
                                    </th>
                                    <th>
                                        Created By
                                    </th>
                                    <th>");
            WriteLiteral(@"
                                        Approved By
                                    </th>
                                    <th>
                                        Rejected By
                                    </th>
                                    <th>
                                        Approve
                                    </th>
                                    <th>

                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
<div id=""UpdatePortalBalanceAmount"" class=""modal"" role=""dialog"" data-bs-keyboard=""false"" data-bs-backdrop=""static"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""mod");
            WriteLiteral(@"al-title"">Update</h5>
                <button type=""button"" class=""btn btn-blue"" id=""UpdatePortalBalanceAmountClose"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
            </div>
        </div>
    </div>
</div>

<div id=""EditExpense"" class=""modal"" role=""dialog"" data-bs-keyboard=""false"" data-bs-backdrop=""static"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"">Update</h5>
                <button type=""button"" class=""close btn btn-blue"" id=""EditExpenseModalClose"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
            </div>
        </div>
    </div>
</div>


");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f732711", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- Required datatable js -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f733809", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f734873", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<!-- Responsive examples -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f735973", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f737037", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<!-- Bootrstrap touchspin -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f738139", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f739280", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<!-- Sweet Alerts-->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f740373", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f741438", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<!-- Select 2-->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f742519", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f743660", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d3f84316f02a68164a7b71badd475004dc2af8292090026a9b738a4a388f35f744729", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script>
    $(function () {
        var message = $(""#message"").val();
        if (message != """" && message != null) {
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                },
                buttonsStyling: false
            })

            if (message.includes(""Successfully!"")) {
                swalWithBootstrapButtons.fire({
                    title: 'Success',
                    text: message,
                    icon: 'success'
                }).then((result) => {
                    var url = """);
#nullable restore
#line 282 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
                          Write(Url.Action("TemporaryAccountManagement","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
                    window.location.href = url;
                });
            }
            else {
                swalWithBootstrapButtons.fire({
                    title: 'Error',
                    text: message,
                    icon: 'error'
                }).then((result) => {
                    var url = """);
#nullable restore
#line 292 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
                          Write(Url.Action("TemporaryAccountManagement","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n                    window.location.href = url;\r\n                });\r\n            }\r\n        }\r\n    });\r\n</script>\r\n<script>\r\n    $(document).ready(function () {\r\n        var url = \"");
#nullable restore
#line 301 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
              Write(Url.Action("GetTemporaryAccountManagementDataWithPagination","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";

        var table = $('#datatable').DataTable({
            ""processing"": true,
            ""serverSide"": true,
            ""filter"": false,
            ""ajax"": {
                ""type"": ""post"",
                ""datatype"": ""json"",
                ""data"": function () {
                    $('#datatable').DataTable().ajax.url(
                        url
                    );
                }
            },
            ""columns"": [
                { ""data"": ""transactionId"", ""name"": ""Transaction Id"" },
                { ""data"": ""transactionDate"", ""name"": ""Date"" },
                { ""data"": ""companyName"", ""name"": ""Company"" },
                {
                    ""data"": function (data, full, meta) {
                        var description = data.description;
                        if (description.length > 70) {
                            var desc = description.substring(0, 70);
                            desc = desc + '....';
                            return '<span title=""' + ");
            WriteLiteral(@"data.description + '"" class=""text-wrap"">' + data.description + '</span>';
                        }
                        else {
                            return '<span title=""' + data.description + '"" class=""text-wrap"">' + description + '</span>';
                        }
                    },
                    ""name"": ""Description""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.entryType == ""Credit"") {
                            return data.grandTotal;
                        }
                        else {
                            return ""---"";
                        }
                    },
                    ""name"": ""Credit(AED)""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.entryType == ""Debit"") {
                            return data.grandTotal;
                        }
                        else {");
            WriteLiteral(@"
                            return ""---"";
                        }
                    },
                    ""name"": ""Debit(AED)""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.entryType == ""Debit"") {
                            return data.vat + '%';
                        }
                        else {
                            return '---';
                        }
                    },
                    ""name"": ""Vat (%)""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.entryType == ""Debit"") {
                            return data.vatAmount;
                        }
                        else {
                            return '---';
                        }
                    },
                    ""name"": ""Vat Amount""
                },
                {
                    ""data"": function (data, f");
            WriteLiteral(@"ull, meta) {
                        if (data.createdBy != ""N/A"") {
                            return data.createdBy;
                        }
                        else {
                            return '---';
                        }
                    },
                    ""name"": ""Created By""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.isApproved == true) {
                            return data.approvedBy;
                        }
                        else {
                            return '---';
                        }
                    },
                    ""name"": ""Approved By""
                },
                {
                    ""data"": function (data, full, meta) {
                        if (data.isRejected == true) {
                            return data.rejectedBy;
                        }
                        else {
                            return '--");
            WriteLiteral(@"-';
                        }
                    },
                    ""name"": ""Rejected By""
                },
                {
                    ""data"": function (data, full, meta) {
                        var expenseUpdate = ""ApproveExpense("" + data.id + "")"";
                        var expenseDelete = ""RejectExpense("" + data.id + "")"";

                        if (data.isApproved != true && data.isRejected != true) {
                            return '<button class=""btn btn-blue Update"" onclick=' + expenseUpdate + '>Approve</button><button class=""btn btn-blue Delete ms-1"" onclick=' + expenseDelete + '>Reject</button>';
                        }
                        else {
                            return ""---"";
                        }
                    },
                    ""name"": """"
                },
                {
                    ""data"": function (data, full, meta) {
                        var expenseUpdate = ""UpdateExpenses("" + data.id + "")"";
            ");
            WriteLiteral(@"            var expenseDelete = ""RemoveExpenses("" + data.id + "")"";
                        var portalUpdate = ""UpdatePayment("" + data.id + "")"";
                        if (data.isApproved != true && data.isRejected != true) {
                            if (data.entryType != ""Credit"") {
                                return '<span class=""btn btn-blue Update"" onclick=' + expenseUpdate + '><i class=""fas fa-edit""></i></span><span class=""btn btn-blue Delete ms-1"" onclick=' + expenseDelete + '><i class=""fas fa-trash""></i></span>';
                            }
                            else {
                                return '<span class=""btn btn-blue Update"" onclick=' + portalUpdate + '><i class=""fas fa-edit""></i></span><span class=""btn btn-blue Delete ms-1"" onclick=' + expenseDelete + '><i class=""fas fa-trash""></i></span>';
                            }
                        }
                        else {
                            return ""---"";
                        }
              ");
            WriteLiteral(@"      },
                    ""name"": """"
                },
            ],
            ""initComplete"": function (settings, json) {
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();
                var module = $(""#Module"").val();
                $.ajax({
                    url: """);
#nullable restore
#line 451 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
                     Write(Url.Action("GetRolePermissionsName", "Permission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Module"": ""MyAccount"" },
                    success: function (RoleResponse) {
                        $(""#loader"").show();
                        $.ajax({
                            url: """);
#nullable restore
#line 457 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
                             Write(Url.Action("GetUserPermissionsName", "Permission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                            method: ""GET"",
                            data: { ""Module"": ""MyAccount"" },
                            success: function (UserResponse) {
                                $(""#loader"").show();

                                if (UserResponse.length > 0) {
                                    for (let i = 0; i < UserResponse.length; i++) {
                                        $(""#"" + UserResponse[i]).show();
                                        if (UserResponse[i] == ""View"") {
                                            $("".Details"").show();
                                        }
                                        if (UserResponse[i] == ""Update"") {
                                            $(""."" + UserResponse[i]).show();
                                        }
                                        if (UserResponse[i] == ""Delete"") {
                                            $("".Delete"").show();
                                        }
     ");
            WriteLiteral(@"                               }
                                    $($.fn.dataTable.tables(true)).DataTable()
                                        .columns.adjust();
                                    $(""#loader"").hide();
                                }
                                else if (RoleResponse.length > 0) {

                                    for (let i = 0; i < RoleResponse.length; i++) {
                                        $(""#"" + RoleResponse[i]).show();
                                        if (RoleResponse[i] == ""View"") {
                                            $("".Details"").show();
                                        }
                                        if (RoleResponse[i] == ""Update"") {
                                            $(""."" + RoleResponse[i]).show();
                                        }
                                        if (RoleResponse[i] == ""Delete"") {
                                            $("".Delete"").show();
    ");
            WriteLiteral(@"                                    }
                                    }
                                    $($.fn.dataTable.tables(true)).DataTable()
                                        .columns.adjust();
                                    $(""#loader"").hide();
                                }
                            }
                        })
                    }
                });
                $(""#loader"").hide();
            },
            ""drawCallback"": function (settings) {
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();
                var module = $(""#Module"").val();
                $.ajax({
                    url: """);
#nullable restore
#line 510 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
                     Write(Url.Action("GetRolePermissionsName", "Permission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Module"": ""MyAccount"" },
                    success: function (RoleResponse) {
                        $(""#loader"").show();
                        $.ajax({
                            url: """);
#nullable restore
#line 516 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
                             Write(Url.Action("GetUserPermissionsName", "Permission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                            method: ""GET"",
                            data: { ""Module"": ""MyAccount"" },
                            success: function (UserResponse) {
                                $(""#loader"").show();

                                if (UserResponse.length > 0) {
                                    for (let i = 0; i < UserResponse.length; i++) {
                                        $(""#"" + UserResponse[i]).show();
                                        if (UserResponse[i] == ""View"") {
                                            $("".Details"").show();
                                        }
                                        if (UserResponse[i] == ""Update"") {
                                            $(""."" + UserResponse[i]).show();
                                        }
                                        if (UserResponse[i] == ""Delete"") {
                                            $("".Delete"").show();
                                        }
     ");
            WriteLiteral(@"                               }
                                    $($.fn.dataTable.tables(true)).DataTable()
                                        .columns.adjust();
                                    $(""#loader"").hide();
                                }
                                else if (RoleResponse.length > 0) {

                                    for (let i = 0; i < RoleResponse.length; i++) {
                                        $(""#"" + RoleResponse[i]).show();
                                        if (RoleResponse[i] == ""View"") {
                                            $("".Details"").show();
                                        }
                                        if (RoleResponse[i] == ""Update"") {
                                            $(""."" + RoleResponse[i]).show();
                                        }
                                        if (RoleResponse[i] == ""Delete"") {
                                            $("".Delete"").show();
    ");
            WriteLiteral(@"                                    }
                                    }
                                    $($.fn.dataTable.tables(true)).DataTable()
                                        .columns.adjust();
                                    $(""#loader"").hide();
                                }
                            }
                        })
                    }
                });
                $(""#loader"").hide();
            },
            ""responsive"": true,
            ""deferRender"": true,
            ""language"": {
                'processing': '<div class=""spinner-2""><div class=""center-div-2""><div class=""loader-circle-1""></div></div></div>'
            },
            paging: true,
            ordering: true,
            searching: true,
            ""aLengthMenu"": [20, 30, 50],
            dom: ""<'row'<'col-sm-3'l><'col-sm-3'f><'col-sm-6'p>>"" +
                ""<'row'<'col-sm-12'tr>>"" +
                ""<'row'<'col-sm-5'i><'col-sm-7'p>>"",
        });

      ");
            WriteLiteral(@"  $('#datatable tbody').on('click', 'td.dtr-control', function () {

            var tr = $(this).closest('tr');
            var row = table.row(tr);
            if (!tr.hasClass(""shown"")) {

                $(""#loader"").show();
                row.child.show();
                tr.addClass('shown');
                $("".Update"").hide();
                $("".Delete"").hide();
                $("".Details"").hide();

                var module = $(""#Module"").val();
                $.ajax({
                    url: """);
#nullable restore
#line 592 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
                     Write(Url.Action("GetRolePermissionsName", "Permission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Module"": ""MyAccount"" },
                    success: function (RoleResponse) {
                        $(""#loader"").show();
                        $.ajax({
                            url: """);
#nullable restore
#line 598 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
                             Write(Url.Action("GetUserPermissionsName", "Permission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                            method: ""GET"",
                            data: { ""Module"": ""MyAccount"" },
                            success: function (UserResponse) {
                                $(""#loader"").show();
                                if (UserResponse.length > 0) {
                                    for (let i = 0; i < UserResponse.length; i++) {
                                        $(""#"" + UserResponse[i]).show();
                                        if (UserResponse[i] == ""View"") {
                                            $("".Details"").show();
                                        }
                                        if (UserResponse[i] == ""Update"") {
                                            $(""."" + UserResponse[i]).show();
                                        }
                                        if (UserResponse[i] == ""Delete"") {
                                            $("".Delete"").show();
                                        }
       ");
            WriteLiteral(@"                             }
                                    $(""#loader"").hide();
                                }
                                else if (RoleResponse.length > 0) {
                                    for (let i = 0; i < RoleResponse.length; i++) {
                                        $(""#"" + RoleResponse[i]).show();
                                        if (RoleResponse[i] == ""View"") {
                                            $("".Details"").show();
                                        }
                                        if (RoleResponse[i] == ""Update"") {
                                            $(""."" + RoleResponse[i]).show();
                                        }
                                        if (RoleResponse[i] == ""Delete"") {
                                            $("".Delete"").show();
                                        }
                                    }
                                    $(""#loader"").hide();
        ");
            WriteLiteral(@"                        }
                            }
                        })
                    }
                });
                $(""#loader"").hide();
            }
            else {
                row.child.hide();
                tr.removeClass('shown');
            }
        });
    });
</script>
<script>
    function ApproveExpense(Id) {
        $.ajax({
            url: """);
#nullable restore
#line 649 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
             Write(Url.Action("ApproveTemporaryAccount","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            method: ""GET"",
            data: { ""Id"": Id },
            success: function (response) {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })

                swalWithBootstrapButtons.fire({
                    title: 'Success',
                    text: ""Selected Account Entry Approved Successfully.!"",
                    icon: 'success'
                }).then((result) => {
                    window.location.reload();
                });
            }
        })
    };

    function RejectExpense(Id) {
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: 'ms-3 btn btn-success',
                cancelButton: 'btn btn-danger'
            },
            buttonsStyli");
            WriteLiteral(@"ng: false
        })

        swalWithBootstrapButtons.fire({
            title: 'Are you sure?',
            text: ""You won't be able to revert this!"",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, Reject it!',
            cancelButtonText: 'No, cancel!',
            reverseButtons: true,
            showConfirmButton: true,
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: """);
#nullable restore
#line 693 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
                     Write(Url.Action("RejectTemporaryAccount","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Id"": Id },
                    success: function (response) {
                        swalWithBootstrapButtons.fire({
                            title: 'Success',
                            text: ""Selected Account Entry Rejected Successfully.!"",
                            icon: 'success'
                        }).then((result) => {
                            window.location.reload();
                        });

                    }
                })
            }
            else if (
                result.dismiss === Swal.DismissReason.cancel
            ) {
                $(""#loader"").hide();
                swalWithBootstrapButtons.fire(
                    'Cancelled',
                    'Cancled by User..!! :)',
                    'error'
                )

            }
        });
    };

    function UpdatePayment(Id) {
        $.ajax({
            url: """);
#nullable restore
#line 724 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
             Write(Url.Action("GetTemporaryCreditAccount","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            method: ""GET"",
            data: { ""Id"": Id },
            success: function (response) {
                $mymodal = $(""#UpdatePortalBalanceAmount"");
                $mymodal.find(""div.modal-body"").html(response);
                $mymodal.modal(""show"");
            }
        });
    };

    function UpdateExpenses(Id, transactionId) {
        $.ajax({
            url: """);
#nullable restore
#line 737 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
             Write(Url.Action("GetTemporaryDebitAccount","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            method: ""GET"",
            data: { ""Id"": Id },
            success: function (response) {
                $mymodal = $(""#EditExpense"");
                $mymodal.find(""div.modal-body"").html(response);
                $mymodal.modal(""show"");
            }
        });
    };
</script>
<script>
    function RemoveExpenses(Id) {
        event.preventDefault();
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: 'ms-3 btn btn-success',
                cancelButton: 'btn btn-danger'
            },
            buttonsStyling: false
        })

        swalWithBootstrapButtons.fire({
            title: 'Are you sure?',
            text: ""You won't be able to revert this!"",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
            reverseButtons: true,
            showConfirmButton: true,
        }).the");
            WriteLiteral("n((result) => {\r\n            if (result.isConfirmed) {\r\n                $(\"#loader\").show();\r\n                $.ajax({\r\n                    url: \"");
#nullable restore
#line 772 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
                     Write(Url.Action("DeleteTemporaryAccountExpense", "AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                    method: ""POST"",
                    data: { ""Id"": Id },
                    success: function (response) {
                        $(""#loader"").hide();
                        swalWithBootstrapButtons.fire({
                            title: 'Deleted.',
                            text: ""Selected Account Entry Deleted Successfully..!!"",
                            icon: 'success'
                        }).then((result) => {
                            window.location.reload();
                        });
                    }
                });
            }
            else if (
                result.dismiss === Swal.DismissReason.cancel
            ) {
                $(""#loader"").hide();
                swalWithBootstrapButtons.fire(
                    'Cancelled',
                    'Cancled by User..!! :)',
                    'error'
                )

            }
        });
    };
</script>
<script>
    $(function () {
        $(""#Insert"").");
            WriteLiteral("hide();\r\n        $(\"#View\").hide();\r\n        $(\".Update\").hide();\r\n        $(\".Delete\").hide();\r\n        $(\".Details\").hide();\r\n    });\r\n\r\n    $(function () {\r\n        $.ajax({\r\n            url: \"");
#nullable restore
#line 812 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
             Write(Url.Action("GetRolePermissionsName", "Permission"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\",\r\n            method: \"GET\",\r\n            data: { \"Module\": \"AccountManagement\" },\r\n            success: function (RoleResponse) {\r\n                $.ajax({\r\n                    url: \"");
#nullable restore
#line 817 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
                     Write(Url.Action("GetUserPermissionsName", "Permission"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                    method: ""GET"",
                    data: { ""Module"": ""AccountManagement"" },
                    success: function (UserResponse) {
                        if (UserResponse.length > 0) {
                            for (let i = 0; i < UserResponse.length; i++) {
                                $(""#"" + UserResponse[i]).show();
                                if (UserResponse[i] == ""View"") {
                                    $("".Details"").show();
                                }
                                if (UserResponse[i] == ""Update"") {
                                    $(""."" + UserResponse[i]).show();
                                }
                                if (UserResponse[i] == ""Delete"") {
                                    $(""."" + UserResponse[i]).show();
                                }
                            }
                        }
                        else if (RoleResponse.length > 0) {
                            for (let i = 0");
            WriteLiteral(@"; i < RoleResponse.length; i++) {
                                $(""#"" + RoleResponse[i]).show();
                                if (RoleResponse[i] == ""View"") {
                                    $("".Details"").show();
                                }
                                if (RoleResponse[i] == ""Update"") {
                                    $(""."" + RoleResponse[i]).show();
                                }
                                if (RoleResponse[i] == ""Delete"") {
                                    $(""."" + RoleResponse[i]).show();
                                }
                            }

                        } else {
                            alert(""You don't have any permission for this module."");
                        }
                    }
                })
            }
        });
    });
</script>
<script>
    $(""#txtQuantity"").TouchSpin({
        min: 1,
        max: 20,
        boostat: 5,
        maxboostedstep: 10
    });

    $(");
            WriteLiteral(@"function () {
        $(""#Companies"").select2({
            separator: ""|""
        });
    });

    $(function () {
        var today = new Date();
        $(""#txtDate"").datepicker({
            format: 'yyyy-mm-dd',
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            todayHighlight: true,
            language: ""tr"",
            endDate: ""today"",
            maxDate: today
        }).on('changeDate', function (ev) {
            $(this).datepicker('hide');
        });
    });

    $(document).ready(function () {
        $(""#btnPaymentDetailsMessage15"").hide();
    });

    $(document).on('focus', '.select2.select2-container', function (e) {
        if (e.originalEvent && $(this).find("".select2-selection--single"").length > 0) {
            $(this).siblings('select').select2('open');
        }
    });
</script>
<script>
    function ValidAlphabet(data) {
        var code = (event.which) ? event.which : event.keyCode;
        var");
            WriteLiteral(@" indexData = 0;
        if (!(code >= 48 && code <= 57) || !(code >= 96 && code <= 105) || code == 54 || code == 189 || code == 219 || code == 57) {
            if (code != 32 && code != 190) {
                var digits = $(data).val();
                var lastValue = digits.substring(digits.length - 1);
                digits = digits.replace(/[^(\.\s)[^0-9-]/g, '');

                if (lastValue == ""^"" || lastValue == ""-"" || lastValue == ""("" || lastValue == "")"" || lastValue == ""["") {
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(0, lastIndex);
                    digits = currentText;
                    digits = digits.replace(lastValue, '');
                }
                else if (digits.includes(""-"") || digits.includes(""^"") || digits.includes(""("") || digits.includes("")"") || digits.includes(""["")) {
                    if (digits.includes(""-"")) {
                        var lastIndex = digits.lastIndexOf(""-"");
    ");
            WriteLiteral(@"                    var currentText = digits.substring(lastIndex + 1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes(""^"")) {
                        var lastIndex = digits.lastIndexOf(""^"");
                        var currentText = digits.substring(lastIndex + 1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes(""("")) {
                        var lastIndex = digits.lastIndexOf(""("");
                        var currentText = digits.substring(lastIndex + 1, digits.length);
                        digits = currentText;
                    }
                    else if (digits.includes("")"")) {
                        var lastIndex = digits.lastIndexOf("")"");
                        var currentText = digits.substring(lastIndex + 1, digits.length);
                        digits = currentText;
                    }
                    else");
            WriteLiteral(@" if (digits.includes(""["")) {
                        var lastIndex = digits.lastIndexOf(""["");
                        var currentText = digits.substring(lastIndex + 1, digits.length);
                        digits = currentText;
                    }
                }
                else if (digits.replace(/[^.]/g, """").length > 1) {
                    lastValue = digits.substring(digits.length - 1);
                    var lastIndex = digits.indexOf(lastValue);
                    var currentText = digits.substring(lastIndex, digits.length);
                    if (currentText.replace(/[^.]/g, """").length > 1) {
                        var currentDigits1 = digits.slice(0, lastIndex + 1);
                        digits = currentDigits1;
                    }
                    else {
                        var currentDigits = digits.slice(0, lastIndex);
                        digits = currentDigits;
                    }

                }
                $(data).val(digits);
        ");
            WriteLiteral(@"    }
            else if (digits.replace(/[^.]/g, """").length > 1) {
                lastValue = digits.substring(digits.length - 1);
                var lastIndex = digits.indexOf(lastValue);
                var currentText = digits.substring(lastIndex, digits.length);
                if (currentText.replace(/[^.]/g, """").length > 1) {
                    var currentDigits1 = digits.slice(0, lastIndex + 1);
                    digits = currentDigits1;
                }
                else {
                    var currentDigits = digits.slice(0, lastIndex);
                    digits = currentDigits;
                }

                $(data).val(digits);
            }
        }
    }

    function ValidTextLength(data) {
        var digits = $(data).val();
        var currentDigits = digits.split(""."");
        if (digits.includes(""."") == true) {
            if (currentDigits[1].length >= 2) {
                event.preventDefault();
            }
        }
    }

    $(document).");
            WriteLiteral(@"ready(function () {
        $(""#loader"").hide();
    });
</script>
<script>
    $(""#txtAmount"").on(""keyup"", function () {
        $(""#txtTotalAmount"").val(0);
        var amount = $(""#txtAmount"").val();
        var quantity = $(""#txtQuantity"").val();
        var totalAmount = 0, grandTotal = 0, vatPercentage = 0;
        totalAmount = $(""#txtTotalAmount"").val();
        grandTotal = $(""#txtGrandAmount"").val();
        vatPercentage = $(""#txtVat"").val();
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAm");
            WriteLiteral(@"ount);
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $(""#txtTotalAmount"").val(parseFloat(totalAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });

    $(""#txtQuantity"").on(""change"", function () {
        $(""#txtTotalAmount"").val(0);
        var amount = $(""#txtAmount"").val();
        var quantity = $(""#txtQuantity"").val();
        var totalAmount = 0, grandTotal = 0, vatPercentage = 0;
        totalAmount = $(""#txtTotalAmount"").val();
        grandTotal = $(""#txtGrandAmount"").val();
        vatPercentage = $(""#txtVat"").val();
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
       ");
            WriteLiteral(@"         vatAmount = 0;
            }
            $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $(""#txtTotalAmount"").val(parseFloat(totalAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });

    $(""#txtVat"").on(""keyup"", function () {
        var amount = $(""#txtAmount"").val();
        var totalAmount = $(""#txtTotalAmount"").val();
        var vatPercentage = $(""#txtVat"").val();
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        var vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercentage)) / 100;
        if (isNaN(vatAmount)) {
            vatAmount = 0;
        }
        var grandTotal = parseFlo");
            WriteLiteral(@"at(totalAmount) + parseFloat(vatAmount);
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });

    $(""#txtAmount"").on(""focus"", function () {
        $(""#txtTotalAmount"").val(0);
        var amount = $(""#txtAmount"").val();
        var quantity = $(""#txtQuantity"").val();
        var totalAmount = 0, grandTotal = 0, vatPercentage = 0;
        totalAmount = $(""#txtTotalAmount"").val();
        grandTotal = $(""#txtGrandAmount"").val();
        vatPercentage = $(""#txtVat"").val();
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $(""#txtV");
            WriteLiteral(@"atAmount"").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $(""#txtTotalAmount"").val(parseFloat(totalAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });

    $(""#txtQuantity"").on(""focus"", function () {
        $(""#txtTotalAmount"").val(0);
        var amount = $(""#txtAmount"").val();
        var quantity = $(""#txtQuantity"").val();
        var totalAmount = 0, grandTotal = 0, vatPercentage = 0;
        totalAmount = $(""#txtTotalAmount"").val();
        grandTotal = $(""#txtGrandAmount"").val();
        vatPercentage = $(""#txtVat"").val();
        if (parseInt(vatPercentage) != 0) {
            totalAmount = ((parseFloat(amount) * quantity));
            vatAmount");
            WriteLiteral(@" = parseFloat(totalAmount) * parseFloat(vatPercentage) / 100;
            grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
            if (isNaN(vatAmount)) {
                vatAmount = 0;
            }
            $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        }
        else {
            totalAmount = ((parseFloat(amount) * quantity));
            grandTotal = parseFloat(totalAmount);
        }
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $(""#txtTotalAmount"").val(parseFloat(totalAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });

    $(""#txtVat"").on(""focus"", function () {
        var amount = $(""#txtAmount"").val();
        var totalAmount = $(""#txtTotalAmount"").val();
        var vatPercentage = $(""#txtVat"").val();
        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }
        v");
            WriteLiteral(@"ar vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercentage)) / 100;
        if (isNaN(vatAmount)) {
            vatAmount = 0;
        }
        var grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
        if (isNaN(grandTotal)) {
            grandTotal = 0;
        }
        $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));
    });
</script>
<script>
    var UploadedReceiptFile = new Array();
    $(""body"").on(""click"", ""#btnClear"", function () {
        $(""#txtTask"").val('');
        $(""#txtAmount"").val('');
        $(""#txtQuantity"").val('1');
        $(""#txtTotalAmount"").val('0');
        $(""#txtVat"").val('0');
        $(""#Companies"").select2('val', '0');
        $(""#txtVatAmount"").val('0');
        $(""#txtDate"").val('');
        $(""#txtType"").val(""-1"");
        $(""#txtDate"").datepicker('setDate', null);
        $(""#txtGrandAmount"").val('0');
    });

    $(""body"").on(""click"", ""#btnAd");
            WriteLiteral(@"d"", function () {
        $(""#loader"").show();
        var amount = $(""#txtAmount"").val();
        var quantity = $(""#txtQuantity"").val();
        var totalAmount = parseFloat(amount) * parseInt(quantity);
        $(""#txtTotalAmount"").val(parseFloat(totalAmount).toFixed(2));
        var vatPercetange = $(""#txtVat"").val();
        var vatAmount = $(""#txtVatAmount"").val();
        vatAmount = (parseFloat(totalAmount) * parseFloat(vatPercetange)) / 100;
        $(""#txtVatAmount"").val(parseFloat(vatAmount).toFixed(2));
        var grandTotal = parseFloat(totalAmount) + parseFloat(vatAmount);
        $(""#txtGrandAmount"").val(parseFloat(grandTotal).toFixed(2));

        if (isNaN(totalAmount)) {
            totalAmount = 0;
        }

        // Get All data from Textbox
        var Task = $(""#txtTask"").val();
        var Amount = $(""#txtAmount"").val();
        var Quantity = $(""#txtQuantity"").val();
        var TotalAmount = $(""#txtTotalAmount"").val();
        var CompanyId = $(""#Companies"").");
            WriteLiteral(@"val();
        var Type = $(""#txtType"").val();
        var PaymentMode = $(""#txtPaymentMode"").val();
        var date = $(""#txtDate"").val();
        var Vat = $(""#txtVat"").val();
        var VatAmount = $(""#txtVatAmount"").val();
        var GrandAmount = $(""#txtGrandAmount"").val();
        var name = $(""#Module"").val();

        if (Amount == """" || Amount == ""0"" || Amount == ""0.0"" || Quantity == """" || TotalAmount == """" || Task == """" || CompanyId == ""0"" || Type == ""-1"" || !/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)) {
            if (CompanyId == ""0"") {
                $(""#loader"").hide();
                if (isNaN(Amount)) {
                    $(""#txtAmount"").val(0);
                }
                if (isNaN(Quantity)) {
                    $(""#txtQuantity"").val(0);
                }
                if (isNaN(TotalAmount)) {
                    $(""#txtTotalAmount"").val(0);
                }
                if (isNaN(Vat)) {
                    $(""#txtVat"").val(0);
                }
    ");
            WriteLiteral(@"            if (isNaN(VatAmount)) {
                    $(""#txtVatAmount"").val(0);
                }
                if (isNaN(GrandAmount)) {
                    $(""#txtGrandAmount"").val(0);
                }
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Select Company for which you are adding Expense."",
                    'error'
                )
            }
            else if (Task == """") {
                $(""#loader"").hide();
                if (isNaN(Amount)) {
                    $(""#txtAmount"").val(0);
                }
                if (isNaN(Quantity)) {
                    $(""#txtQuantity"").val(0);
                }");
            WriteLiteral(@"
                if (isNaN(TotalAmount)) {
                    $(""#txtTotalAmount"").val(0);
                }
                if (isNaN(Vat)) {
                    $(""#txtVat"").val(0);
                }
                if (isNaN(VatAmount)) {
                    $(""#txtVatAmount"").val(0);
                }
                if (isNaN(GrandAmount)) {
                    $(""#txtGrandAmount"").val(0);
                }
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Name for which you are adding Expense."",
                    'error'
                )
            }
            else if (Amount == """" || Amount == ""0"" || Amount == ""0.0"")");
            WriteLiteral(@" {
                $(""#loader"").hide();
                if (isNaN(Amount)) {
                    $(""#txtAmount"").val(0);
                }
                if (isNaN(Quantity)) {
                    $(""#txtQuantity"").val(0);
                }
                if (isNaN(TotalAmount)) {
                    $(""#txtTotalAmount"").val(0);
                }
                if (isNaN(Vat)) {
                    $(""#txtVat"").val(0);
                }
                if (isNaN(VatAmount)) {
                    $(""#txtVatAmount"").val(0);
                }
                if (isNaN(GrandAmount)) {
                    $(""#txtGrandAmount"").val(0);
                }
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons");
            WriteLiteral(@".fire(
                    'Error',
                    ""Please Provide Amount of Expense."",
                    'error'
                )
            } else if (Quantity == """") {
                $(""#loader"").hide();
                if (isNaN(Amount)) {
                    $(""#txtAmount"").val(0);
                }
                if (isNaN(Quantity)) {
                    $(""#txtQuantity"").val(0);
                }
                if (isNaN(TotalAmount)) {
                    $(""#txtTotalAmount"").val(0);
                }
                if (isNaN(Vat)) {
                    $(""#txtVat"").val(0);
                }
                if (isNaN(VatAmount)) {
                    $(""#txtVatAmount"").val(0);
                }
                if (isNaN(GrandAmount)) {
                    $(""#txtGrandAmount"").val(0);
                }
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
 ");
            WriteLiteral(@"                       cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Quantity."",
                    'error'
                )
            } else if (TotalAmount == """") {
                $(""#loader"").hide();
                if (isNaN(Amount)) {
                    $(""#txtAmount"").val(0);
                }
                if (isNaN(Quantity)) {
                    $(""#txtQuantity"").val(0);
                }
                if (isNaN(TotalAmount)) {
                    $(""#txtTotalAmount"").val(0);
                }
                if (isNaN(Vat)) {
                    $(""#txtVat"").val(0);
                }
                if (isNaN(VatAmount)) {
                    $(""#txtVatAmount"").val(0);
                }
                if (isNaN(GrandAmount)) {
                    $(""#txtGrandAmount"").val(0);
       ");
            WriteLiteral(@"         }
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Total Amount of This Expense"",
                    'error'
                )
            }
            else if (Type == ""-1"") {
                $(""#loader"").hide();
                if (isNaN(Amount)) {
                    $(""#txtAmount"").val(0);
                }
                if (isNaN(Quantity)) {
                    $(""#txtQuantity"").val(0);
                }
                if (isNaN(TotalAmount)) {
                    $(""#txtTotalAmount"").val(0);
                }
                if (isNaN(Vat)) {
                    $(""#txtVat"").val(0);
                }
     ");
            WriteLiteral(@"           if (isNaN(VatAmount)) {
                    $(""#txtVatAmount"").val(0);
                }
                if (isNaN(GrandAmount)) {
                    $(""#txtGrandAmount"").val(0);
                }
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Select Expense Type(Credit/Debit)."",
                    'error'
                )
            }
            else if (!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)) {
                $(""#loader"").hide();
                if (isNaN(Amount)) {
                    $(""#txtAmount"").val(0);
                }
                if (isNaN(Quantity)) {
                    $(""#txtQuantity"").val(0);
    ");
            WriteLiteral(@"            }
                if (isNaN(TotalAmount)) {
                    $(""#txtTotalAmount"").val(0);
                }
                if (isNaN(Vat)) {
                    $(""#txtVat"").val(0);
                }
                if (isNaN(VatAmount)) {
                    $(""#txtVatAmount"").val(0);
                }
                if (isNaN(GrandAmount)) {
                    $(""#txtGrandAmount"").val(0);
                }
                alert(""Please Enter Valid Date Format for Date."");
                var today = new Date();
                var dd = String(today.getDate()).padStart(2, '0');
                var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
                var yyyy = today.getFullYear();

                today = yyyy + '-' + mm + '-' + dd;
                $('#txtDate').datepicker('setDate', today);
                $(""#txtDate"").focus();
            }

        }
        else if (Type == ""Credit"" && (PaymentMode == """" || PaymentMode == ""-1"")) {");
            WriteLiteral(@"
            if (PaymentMode == """" || PaymentMode == ""-1"") {
                $(""#loader"").hide();
                if (isNaN(Amount)) {
                    $(""#txtAmount"").val(0);
                }
                if (isNaN(Quantity)) {
                    $(""#txtQuantity"").val(0);
                }
                if (isNaN(TotalAmount)) {
                    $(""#txtTotalAmount"").val(0);
                }
                if (isNaN(Vat)) {
                    $(""#txtVat"").val(0);
                }
                if (isNaN(VatAmount)) {
                    $(""#txtVatAmount"").val(0);
                }
                if (isNaN(GrandAmount)) {
                    $(""#txtGrandAmount"").val(0);
                }
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
 ");
            WriteLiteral(@"               })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Select Payment Mode."",
                    'error'
                )
            }
        }
        else if (isNaN(parseFloat(Amount)) || isNaN(parseFloat(Vat))) {
            if (isNaN(parseFloat(Amount))) {
                $(""#loader"").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Valid Amount."",
                    'error'
                ).then((result) => {
                    $(""#txtAmount"").val(0);
                });
            }
            else if (isNaN(parseFloat(Vat))) {
           ");
            WriteLiteral(@"     $(""#loader"").hide();
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })
                swalWithBootstrapButtons.fire(
                    'Error',
                    ""Please Provide Valid  Vat."",
                    'error'
                ).then((result) => {
                    var grandTotals = parseFloat(Amount) * parseInt(Quantity);
                    $(""#txtVat"").val(0);
                    $(""#txtVatAmount"").val(0);
                    $(""#txtGrandAmount"").val(parseFloat(grandTotals).toFixed(2));
                });
            }
        }
        else {
            $(""#loader"").show();
            UploadedReceiptFile.push(
                {
                    ""Task"": Task,
                    ""Amount"": parseFloat(Amount).toF");
            WriteLiteral(@"ixed(2).toString(),
                    ""Quantity"": Quantity,
                    ""TotalAmount"": parseFloat(TotalAmount).toFixed(2).toString(),
                    ""CompanyId"": CompanyId,
                    ""Vat"": parseFloat(Vat).toFixed(2).toString(),
                    ""VatAmount"": parseFloat(VatAmount).toFixed(2).toString(),
                    ""Date"": date,
                    ""Type"": Type,
                    ""PaymentMode"": PaymentMode,
                    ""GrandTotal"": parseFloat(GrandAmount).toFixed(2).toString()
                }
            );

            var txtTask = $(""#txtTask"");
            var txtAmount = $(""#txtAmount"");
            var txtQuantity = $(""#txtQuantity"");
            var txtTotalAmount = $(""#txtTotalAmount"");
            var txtFormFile = $(""#txtFormFile"");
            var Companies = $(""#Companies"");
            var txtType = $(""#txtType"");
            var txtPaymentMode = $(""#txtPaymentMode"");
            var txtDate = $(""#txtDate"");
            var txt");
            WriteLiteral(@"Vat = $(""#txtVat"");
            var txtVatAmount = $(""#txtVatAmount"");
            var txtGrandAmount = $(""#txtGrandAmount"");

            //Get Table body.
            var tbody = $(""#tblAddExpenses > TBODY"")[0];

            //Add New Row
            var row = tbody.insertRow(-1);

            var cell = $(row.insertCell(-1));
            cell.html($(""#Companies :selected"").text());

            var cell = $(row.insertCell(-1));
            cell.html(txtDate.val());
            // Add textbox for Name
            var cell = $(row.insertCell(-1));
            cell.html(txtTask.val());

            var cell = $(row.insertCell(-1));
            cell.html($(""#txtType :selected"").text());

            var cell = $(row.insertCell(-1));

            var selectedpaymentMethod = $(""#txtPaymentMode :selected"").text();
            if (selectedpaymentMethod.includes(""Select Payment Mode"")) {
                cell.html("""");
            }
            else {
                cell.html($(""#txtPay");
            WriteLiteral(@"mentMode :selected"").text());
            }

            //Add textbox for Country
            cell = $(row.insertCell(-1));
            cell.html(parseFloat(txtAmount.val()).toFixed(2));

            cell = $(row.insertCell(-1));
            cell.html(txtQuantity.val());

            cell = $(row.insertCell(-1));
            cell.html(parseFloat(txtTotalAmount.val()).toFixed(2));

            cell = $(row.insertCell(-1));
            cell.html(parseFloat(txtVat.val()).toFixed(2));

            cell = $(row.insertCell(-1));
            cell.html(parseFloat(txtVatAmount.val()).toFixed(2));

            cell = $(row.insertCell(-1));
            cell.html(parseFloat(txtGrandAmount.val()).toFixed(2));

            cell = $(row.insertCell(-1));
            var btnRemove = $(""<button />"");
            btnRemove.attr(""type"", ""button"");
            btnRemove.attr(""class"", ""btn btn-blue fas fa-trash"");
            btnRemove.attr(""onclick"", ""RemoveField(this);"");
            cell.append(btnRe");
            WriteLiteral(@"move);

            $(""#Companies"").select2('val', '0');
            $(""#Companies"").focus();
            $(""#Companies"").select2('open');
            txtTask.val("""");
            txtAmount.val("""");
            txtQuantity.val(""1"");
            txtTotalAmount.val("""");
            txtVat.val(""0"");
            txtVatAmount.val(""0"");
            txtDate.val("""");
            $(""#txtDate"").datepicker('setDate', null);
            txtTotalAmount.val("""");
            txtGrandAmount.val(""0"");
            $(""#txtType"").val(""-1"");
            $(""#txtPaymentMode"").val(""-1"");
            $(""#txtVat"").removeAttr(""readonly"");
            $(""#loader"").hide();
            $(document).scrollTop($(""#tblAddExpenses"").height());
        }
        $(""#loader"").hide();
    });

    $(""body"").on(""click"", ""#btnSave"", function () {
        $(""#loader"").show();
        if (parseInt(UploadedReceiptFile.length) > 0) {
            if ($(""#Companies"").val() != ""0"" || $(""#txtTask"").val() != """" || $(""#txtDate"").va");
            WriteLiteral(@"l() != """"
                || ($(""#txtAmount"").val() != """" && $(""#txtAmount"").val() != ""0"" && $(""#txtAmount"").val() != ""0.0"")
                || ($(""#txtTotalAmount"").val() != """" && $(""#txtTotalAmount"").val() != ""0"" && $(""#txtTotalAmount"").val() != ""0.0"")
                || ($(""#txtGrandAmount"").val() != """" && $(""#txtGrandAmount"").val() != ""0"" && $(""#txtGrandAmount"").val() != ""0.0"")
                || ($(""#txtVatAmount"").val() != """" && ($(""#txtVat"").val() != """" && $(""#txtVat"").val() != ""0"" && $(""#txtVat"").val() != ""0.0""))
            ) {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'ms-3 btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                })

                swalWithBootstrapButtons.fire({
                    title: 'One entry is Left. Do you want to Continue ?',
                    text: ""You won't be ab");
            WriteLiteral(@"le to revert this!"",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes!',
                    cancelButtonText: 'No, cancel!',
                    reverseButtons: true,
                    showConfirmButton: true,
                }).then((result) => {
                    if (result.isConfirmed) {
                        $(""#loader"").show();
                        if (parseInt(UploadedReceiptFile.length) > 0) {
                            $('#btnSave').hide();
                            $(""#btnPaymentDetailsMessage"").show();
                            var data = JSON.stringify(UploadedReceiptFile);
                            $.ajax({
                                contentType: 'application/json; charset=utf-8',
                                dataType: 'json',
                                type: 'POST',
                                url: """);
#nullable restore
#line 1646 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
                                 Write(Url.Action("AddTemporaryAccountExpenses","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                                data: data,
                                success: function (result) {
                                    $(""#loader"").hide();
                                    const swalWithBootstrapButtons = Swal.mixin({
                                        customClass: {
                                            confirmButton: 'ms-3 btn btn-success',
                                            cancelButton: 'btn btn-danger'
                                        },
                                        buttonsStyling: false
                                    })
                                    swalWithBootstrapButtons.fire({
                                        title: 'Success.',
                                        text: ""Company Expense(s) Added Successfully.!!"",
                                        icon: 'success'
                                    }).then((result) => {
                                        $('#btnSave').show();
          ");
            WriteLiteral(@"                              window.location.reload();
                                    });
                                }
                            })
                        }
                        else {
                            $(""#loader"").hide();
                            const swalWithBootstrapButtons = Swal.mixin({
                                customClass: {
                                    confirmButton: 'ms-3 btn btn-success',
                                    cancelButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            })
                            swalWithBootstrapButtons.fire({
                                title: 'Error.',
                                text: ""Please Add Expenses/Credits for Company(s)"",
                                icon: 'error'
                            }).then((result) => {
                                $(""#tblAddExpenses TBODY"").focus()");
            WriteLiteral(@";
                            });
                        }
                    }
                });
            }
            else {
                $('#btnSave').hide();
                $(""#loader"").show();
                $(""#btnPaymentDetailsMessage"").show();
                var data = JSON.stringify(UploadedReceiptFile);
                $.ajax({
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    type: 'POST',
                    url: """);
#nullable restore
#line 1697 "D:\Devotion Business\DIBN\DIBN\Areas\Admin\Views\AccountManagement\TemporaryAccountManagement.cshtml"
                     Write(Url.Action("AddTemporaryAccountExpenses","AccountManagement"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                    data: data,
                    success: function (result) {
                        $(""#loader"").hide();
                        const swalWithBootstrapButtons = Swal.mixin({
                            customClass: {
                                confirmButton: 'ms-3 btn btn-success',
                                cancelButton: 'btn btn-danger'
                            },
                            buttonsStyling: false
                        })
                        swalWithBootstrapButtons.fire({
                            title: 'Success.',
                            text: ""Company Expense(s) Added Successfully.!!"",
                            icon: 'success'
                        }).then((result) => {
                            $('#btnSave').show();
                            window.location.reload();
                        });
                    }
                })
            }
        }
        else {
            $(""#loader"").hide();");
            WriteLiteral(@"
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: 'ms-3 btn btn-success',
                    cancelButton: 'btn btn-danger'
                },
                buttonsStyling: false
            })
            swalWithBootstrapButtons.fire({
                title: 'Error.',
                text: ""Please Add Expenses/Credits for Company(s)"",
                icon: 'error'
            }).then((result) => {
                $(""#tblAddExpenses TBODY"").focus();
            });
        }
        $(""#loader"").hide();
    });

    function RemoveField(data) {
        var row = $(data).closest(""TR"");
        var task = $(""TD"", row).eq(0).html();
        if (confirm(""Are you sure you want to delete this :"" + task)) {
            var table = $(""#tblAddExpenses"")[0];
            var remove = UploadedReceiptFile.splice(row[0].rowIndex - 1, 1);
            table.deleteRow(row[0].rowIndex);
        }
    };
</script>
<script>");
            WriteLiteral(@"
    function CheckType(type) {
        if ($(type).val() == ""Credit"") {
            $(""#txtVat"").attr(""readonly"", ""readonly"");
            $(""#txtVat"").val(""0"");
            $(""#txtVatAmount"").attr(""readonly"", ""readonly"");
            $(""#txtVatAmount"").val(""0"");
            $(""#txtPaymentMode"").prop(""disabled"", false);
            var amount = $(""#txtTotalAmount"").val();
            $(""#txtGrandAmount"").val(parseFloat(amount).toFixed(2));
        }
        else if ($(type).val() == ""Debit"") {
            $(""#txtVat"").removeAttr(""readonly"");
            $(""#txtPaymentMode"").prop(""disabled"", true);
        }
    }
</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DIBN.Areas.Admin.Models.TemporaryAccountManagementModel> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
